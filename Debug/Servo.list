
Servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004724  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  080047e0  080047e0  000147e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048a4  080048a4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080048a4  080048a4  000148a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048ac  080048ac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048ac  080048ac  000148ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048b0  080048b0  000148b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080048b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  2000000c  080048c0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  080048c0  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be15  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b69  00000000  00000000  0002be49  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cf8  00000000  00000000  0002d9b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c10  00000000  00000000  0002e6b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000171d4  00000000  00000000  0002f2c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a247  00000000  00000000  00046494  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009669c  00000000  00000000  000506db  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e6d77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ed4  00000000  00000000  000e6df4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080047c8 	.word	0x080047c8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080047c8 	.word	0x080047c8

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	1c08      	adds	r0, r1, #0
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	464f      	mov	r7, r9
 8000434:	4646      	mov	r6, r8
 8000436:	46d6      	mov	lr, sl
 8000438:	b5c0      	push	{r6, r7, lr}
 800043a:	0004      	movs	r4, r0
 800043c:	b082      	sub	sp, #8
 800043e:	000d      	movs	r5, r1
 8000440:	4691      	mov	r9, r2
 8000442:	4698      	mov	r8, r3
 8000444:	428b      	cmp	r3, r1
 8000446:	d82f      	bhi.n	80004a8 <__udivmoddi4+0x78>
 8000448:	d02c      	beq.n	80004a4 <__udivmoddi4+0x74>
 800044a:	4641      	mov	r1, r8
 800044c:	4648      	mov	r0, r9
 800044e:	f000 f8b1 	bl	80005b4 <__clzdi2>
 8000452:	0029      	movs	r1, r5
 8000454:	0006      	movs	r6, r0
 8000456:	0020      	movs	r0, r4
 8000458:	f000 f8ac 	bl	80005b4 <__clzdi2>
 800045c:	1a33      	subs	r3, r6, r0
 800045e:	469c      	mov	ip, r3
 8000460:	3b20      	subs	r3, #32
 8000462:	469a      	mov	sl, r3
 8000464:	d500      	bpl.n	8000468 <__udivmoddi4+0x38>
 8000466:	e076      	b.n	8000556 <__udivmoddi4+0x126>
 8000468:	464b      	mov	r3, r9
 800046a:	4652      	mov	r2, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	001f      	movs	r7, r3
 8000470:	464b      	mov	r3, r9
 8000472:	4662      	mov	r2, ip
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d828      	bhi.n	80004ce <__udivmoddi4+0x9e>
 800047c:	d025      	beq.n	80004ca <__udivmoddi4+0x9a>
 800047e:	4653      	mov	r3, sl
 8000480:	1ba4      	subs	r4, r4, r6
 8000482:	41bd      	sbcs	r5, r7
 8000484:	2b00      	cmp	r3, #0
 8000486:	da00      	bge.n	800048a <__udivmoddi4+0x5a>
 8000488:	e07b      	b.n	8000582 <__udivmoddi4+0x152>
 800048a:	2200      	movs	r2, #0
 800048c:	2300      	movs	r3, #0
 800048e:	9200      	str	r2, [sp, #0]
 8000490:	9301      	str	r3, [sp, #4]
 8000492:	2301      	movs	r3, #1
 8000494:	4652      	mov	r2, sl
 8000496:	4093      	lsls	r3, r2
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	4662      	mov	r2, ip
 800049e:	4093      	lsls	r3, r2
 80004a0:	9300      	str	r3, [sp, #0]
 80004a2:	e018      	b.n	80004d6 <__udivmoddi4+0xa6>
 80004a4:	4282      	cmp	r2, r0
 80004a6:	d9d0      	bls.n	800044a <__udivmoddi4+0x1a>
 80004a8:	2200      	movs	r2, #0
 80004aa:	2300      	movs	r3, #0
 80004ac:	9200      	str	r2, [sp, #0]
 80004ae:	9301      	str	r3, [sp, #4]
 80004b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <__udivmoddi4+0x8a>
 80004b6:	601c      	str	r4, [r3, #0]
 80004b8:	605d      	str	r5, [r3, #4]
 80004ba:	9800      	ldr	r0, [sp, #0]
 80004bc:	9901      	ldr	r1, [sp, #4]
 80004be:	b002      	add	sp, #8
 80004c0:	bc1c      	pop	{r2, r3, r4}
 80004c2:	4690      	mov	r8, r2
 80004c4:	4699      	mov	r9, r3
 80004c6:	46a2      	mov	sl, r4
 80004c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004ca:	42a3      	cmp	r3, r4
 80004cc:	d9d7      	bls.n	800047e <__udivmoddi4+0x4e>
 80004ce:	2200      	movs	r2, #0
 80004d0:	2300      	movs	r3, #0
 80004d2:	9200      	str	r2, [sp, #0]
 80004d4:	9301      	str	r3, [sp, #4]
 80004d6:	4663      	mov	r3, ip
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d0e9      	beq.n	80004b0 <__udivmoddi4+0x80>
 80004dc:	07fb      	lsls	r3, r7, #31
 80004de:	4698      	mov	r8, r3
 80004e0:	4641      	mov	r1, r8
 80004e2:	0872      	lsrs	r2, r6, #1
 80004e4:	430a      	orrs	r2, r1
 80004e6:	087b      	lsrs	r3, r7, #1
 80004e8:	4666      	mov	r6, ip
 80004ea:	e00e      	b.n	800050a <__udivmoddi4+0xda>
 80004ec:	42ab      	cmp	r3, r5
 80004ee:	d101      	bne.n	80004f4 <__udivmoddi4+0xc4>
 80004f0:	42a2      	cmp	r2, r4
 80004f2:	d80c      	bhi.n	800050e <__udivmoddi4+0xde>
 80004f4:	1aa4      	subs	r4, r4, r2
 80004f6:	419d      	sbcs	r5, r3
 80004f8:	2001      	movs	r0, #1
 80004fa:	1924      	adds	r4, r4, r4
 80004fc:	416d      	adcs	r5, r5
 80004fe:	2100      	movs	r1, #0
 8000500:	3e01      	subs	r6, #1
 8000502:	1824      	adds	r4, r4, r0
 8000504:	414d      	adcs	r5, r1
 8000506:	2e00      	cmp	r6, #0
 8000508:	d006      	beq.n	8000518 <__udivmoddi4+0xe8>
 800050a:	42ab      	cmp	r3, r5
 800050c:	d9ee      	bls.n	80004ec <__udivmoddi4+0xbc>
 800050e:	3e01      	subs	r6, #1
 8000510:	1924      	adds	r4, r4, r4
 8000512:	416d      	adcs	r5, r5
 8000514:	2e00      	cmp	r6, #0
 8000516:	d1f8      	bne.n	800050a <__udivmoddi4+0xda>
 8000518:	9800      	ldr	r0, [sp, #0]
 800051a:	9901      	ldr	r1, [sp, #4]
 800051c:	4653      	mov	r3, sl
 800051e:	1900      	adds	r0, r0, r4
 8000520:	4169      	adcs	r1, r5
 8000522:	2b00      	cmp	r3, #0
 8000524:	db23      	blt.n	800056e <__udivmoddi4+0x13e>
 8000526:	002b      	movs	r3, r5
 8000528:	4652      	mov	r2, sl
 800052a:	40d3      	lsrs	r3, r2
 800052c:	002a      	movs	r2, r5
 800052e:	4664      	mov	r4, ip
 8000530:	40e2      	lsrs	r2, r4
 8000532:	001c      	movs	r4, r3
 8000534:	4653      	mov	r3, sl
 8000536:	0015      	movs	r5, r2
 8000538:	2b00      	cmp	r3, #0
 800053a:	db2d      	blt.n	8000598 <__udivmoddi4+0x168>
 800053c:	0026      	movs	r6, r4
 800053e:	4657      	mov	r7, sl
 8000540:	40be      	lsls	r6, r7
 8000542:	0033      	movs	r3, r6
 8000544:	0026      	movs	r6, r4
 8000546:	4667      	mov	r7, ip
 8000548:	40be      	lsls	r6, r7
 800054a:	0032      	movs	r2, r6
 800054c:	1a80      	subs	r0, r0, r2
 800054e:	4199      	sbcs	r1, r3
 8000550:	9000      	str	r0, [sp, #0]
 8000552:	9101      	str	r1, [sp, #4]
 8000554:	e7ac      	b.n	80004b0 <__udivmoddi4+0x80>
 8000556:	4662      	mov	r2, ip
 8000558:	2320      	movs	r3, #32
 800055a:	1a9b      	subs	r3, r3, r2
 800055c:	464a      	mov	r2, r9
 800055e:	40da      	lsrs	r2, r3
 8000560:	4661      	mov	r1, ip
 8000562:	0013      	movs	r3, r2
 8000564:	4642      	mov	r2, r8
 8000566:	408a      	lsls	r2, r1
 8000568:	0017      	movs	r7, r2
 800056a:	431f      	orrs	r7, r3
 800056c:	e780      	b.n	8000470 <__udivmoddi4+0x40>
 800056e:	4662      	mov	r2, ip
 8000570:	2320      	movs	r3, #32
 8000572:	1a9b      	subs	r3, r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	4666      	mov	r6, ip
 8000578:	409a      	lsls	r2, r3
 800057a:	0023      	movs	r3, r4
 800057c:	40f3      	lsrs	r3, r6
 800057e:	4313      	orrs	r3, r2
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0xfc>
 8000582:	4662      	mov	r2, ip
 8000584:	2320      	movs	r3, #32
 8000586:	2100      	movs	r1, #0
 8000588:	1a9b      	subs	r3, r3, r2
 800058a:	2200      	movs	r2, #0
 800058c:	9100      	str	r1, [sp, #0]
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	2201      	movs	r2, #1
 8000592:	40da      	lsrs	r2, r3
 8000594:	9201      	str	r2, [sp, #4]
 8000596:	e780      	b.n	800049a <__udivmoddi4+0x6a>
 8000598:	2320      	movs	r3, #32
 800059a:	4662      	mov	r2, ip
 800059c:	0026      	movs	r6, r4
 800059e:	1a9b      	subs	r3, r3, r2
 80005a0:	40de      	lsrs	r6, r3
 80005a2:	002f      	movs	r7, r5
 80005a4:	46b0      	mov	r8, r6
 80005a6:	4666      	mov	r6, ip
 80005a8:	40b7      	lsls	r7, r6
 80005aa:	4646      	mov	r6, r8
 80005ac:	003b      	movs	r3, r7
 80005ae:	4333      	orrs	r3, r6
 80005b0:	e7c8      	b.n	8000544 <__udivmoddi4+0x114>
 80005b2:	46c0      	nop			; (mov r8, r8)

080005b4 <__clzdi2>:
 80005b4:	b510      	push	{r4, lr}
 80005b6:	2900      	cmp	r1, #0
 80005b8:	d103      	bne.n	80005c2 <__clzdi2+0xe>
 80005ba:	f000 f807 	bl	80005cc <__clzsi2>
 80005be:	3020      	adds	r0, #32
 80005c0:	e002      	b.n	80005c8 <__clzdi2+0x14>
 80005c2:	1c08      	adds	r0, r1, #0
 80005c4:	f000 f802 	bl	80005cc <__clzsi2>
 80005c8:	bd10      	pop	{r4, pc}
 80005ca:	46c0      	nop			; (mov r8, r8)

080005cc <__clzsi2>:
 80005cc:	211c      	movs	r1, #28
 80005ce:	2301      	movs	r3, #1
 80005d0:	041b      	lsls	r3, r3, #16
 80005d2:	4298      	cmp	r0, r3
 80005d4:	d301      	bcc.n	80005da <__clzsi2+0xe>
 80005d6:	0c00      	lsrs	r0, r0, #16
 80005d8:	3910      	subs	r1, #16
 80005da:	0a1b      	lsrs	r3, r3, #8
 80005dc:	4298      	cmp	r0, r3
 80005de:	d301      	bcc.n	80005e4 <__clzsi2+0x18>
 80005e0:	0a00      	lsrs	r0, r0, #8
 80005e2:	3908      	subs	r1, #8
 80005e4:	091b      	lsrs	r3, r3, #4
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0x22>
 80005ea:	0900      	lsrs	r0, r0, #4
 80005ec:	3904      	subs	r1, #4
 80005ee:	a202      	add	r2, pc, #8	; (adr r2, 80005f8 <__clzsi2+0x2c>)
 80005f0:	5c10      	ldrb	r0, [r2, r0]
 80005f2:	1840      	adds	r0, r0, r1
 80005f4:	4770      	bx	lr
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	02020304 	.word	0x02020304
 80005fc:	01010101 	.word	0x01010101
	...

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f000 fae4 	bl	8000bd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f820 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f000 f94c 	bl	80008b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000618:	f000 f8fc 	bl	8000814 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800061c:	f000 f87a 	bl	8000714 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //PWM starten
 8000620:	4b0a      	ldr	r3, [pc, #40]	; (800064c <main+0x44>)
 8000622:	2100      	movs	r1, #0
 8000624:	0018      	movs	r0, r3
 8000626:	f001 fd0b 	bl	8002040 <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WH++ILE */

    /* USER CODE BEGIN 3 */

	htim2.Instance-> CCR1 = 25;
 800062a:	4b08      	ldr	r3, [pc, #32]	; (800064c <main+0x44>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	2219      	movs	r2, #25
 8000630:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(1500);
 8000632:	4b07      	ldr	r3, [pc, #28]	; (8000650 <main+0x48>)
 8000634:	0018      	movs	r0, r3
 8000636:	f000 fb53 	bl	8000ce0 <HAL_Delay>

	htim2.Instance-> CCR1 = 125;
 800063a:	4b04      	ldr	r3, [pc, #16]	; (800064c <main+0x44>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	227d      	movs	r2, #125	; 0x7d
 8000640:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(1500);
 8000642:	4b03      	ldr	r3, [pc, #12]	; (8000650 <main+0x48>)
 8000644:	0018      	movs	r0, r3
 8000646:	f000 fb4b 	bl	8000ce0 <HAL_Delay>
	htim2.Instance-> CCR1 = 25;
 800064a:	e7ee      	b.n	800062a <main+0x22>
 800064c:	20000028 	.word	0x20000028
 8000650:	000005dc 	.word	0x000005dc

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b590      	push	{r4, r7, lr}
 8000656:	b0a1      	sub	sp, #132	; 0x84
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	2448      	movs	r4, #72	; 0x48
 800065c:	193b      	adds	r3, r7, r4
 800065e:	0018      	movs	r0, r3
 8000660:	2338      	movs	r3, #56	; 0x38
 8000662:	001a      	movs	r2, r3
 8000664:	2100      	movs	r1, #0
 8000666:	f004 f8a7 	bl	80047b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066a:	2338      	movs	r3, #56	; 0x38
 800066c:	18fb      	adds	r3, r7, r3
 800066e:	0018      	movs	r0, r3
 8000670:	2310      	movs	r3, #16
 8000672:	001a      	movs	r2, r3
 8000674:	2100      	movs	r1, #0
 8000676:	f004 f89f 	bl	80047b8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	0018      	movs	r0, r3
 800067e:	2334      	movs	r3, #52	; 0x34
 8000680:	001a      	movs	r2, r3
 8000682:	2100      	movs	r1, #0
 8000684:	f004 f898 	bl	80047b8 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000688:	2380      	movs	r3, #128	; 0x80
 800068a:	009b      	lsls	r3, r3, #2
 800068c:	0018      	movs	r0, r3
 800068e:	f000 fda9 	bl	80011e4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000692:	193b      	adds	r3, r7, r4
 8000694:	2202      	movs	r2, #2
 8000696:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000698:	193b      	adds	r3, r7, r4
 800069a:	2280      	movs	r2, #128	; 0x80
 800069c:	0052      	lsls	r2, r2, #1
 800069e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006a0:	193b      	adds	r3, r7, r4
 80006a2:	2200      	movs	r2, #0
 80006a4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a6:	193b      	adds	r3, r7, r4
 80006a8:	2240      	movs	r2, #64	; 0x40
 80006aa:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006ac:	193b      	adds	r3, r7, r4
 80006ae:	2200      	movs	r2, #0
 80006b0:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b2:	193b      	adds	r3, r7, r4
 80006b4:	0018      	movs	r0, r3
 80006b6:	f000 fde1 	bl	800127c <HAL_RCC_OscConfig>
 80006ba:	1e03      	subs	r3, r0, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80006be:	f000 f947 	bl	8000950 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c2:	2138      	movs	r1, #56	; 0x38
 80006c4:	187b      	adds	r3, r7, r1
 80006c6:	2207      	movs	r2, #7
 80006c8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	2200      	movs	r2, #0
 80006ce:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d0:	187b      	adds	r3, r7, r1
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d6:	187b      	adds	r3, r7, r1
 80006d8:	2200      	movs	r2, #0
 80006da:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006dc:	187b      	adds	r3, r7, r1
 80006de:	2100      	movs	r1, #0
 80006e0:	0018      	movs	r0, r3
 80006e2:	f001 f8eb 	bl	80018bc <HAL_RCC_ClockConfig>
 80006e6:	1e03      	subs	r3, r0, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006ea:	f000 f931 	bl	8000950 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	2202      	movs	r2, #2
 80006f2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	0018      	movs	r0, r3
 80006fe:	f001 fa87 	bl	8001c10 <HAL_RCCEx_PeriphCLKConfig>
 8000702:	1e03      	subs	r3, r0, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000706:	f000 f923 	bl	8000950 <Error_Handler>
  }
}
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	46bd      	mov	sp, r7
 800070e:	b021      	add	sp, #132	; 0x84
 8000710:	bd90      	pop	{r4, r7, pc}
	...

08000714 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08e      	sub	sp, #56	; 0x38
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800071a:	2328      	movs	r3, #40	; 0x28
 800071c:	18fb      	adds	r3, r7, r3
 800071e:	0018      	movs	r0, r3
 8000720:	2310      	movs	r3, #16
 8000722:	001a      	movs	r2, r3
 8000724:	2100      	movs	r1, #0
 8000726:	f004 f847 	bl	80047b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800072a:	231c      	movs	r3, #28
 800072c:	18fb      	adds	r3, r7, r3
 800072e:	0018      	movs	r0, r3
 8000730:	230c      	movs	r3, #12
 8000732:	001a      	movs	r2, r3
 8000734:	2100      	movs	r1, #0
 8000736:	f004 f83f 	bl	80047b8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800073a:	003b      	movs	r3, r7
 800073c:	0018      	movs	r0, r3
 800073e:	231c      	movs	r3, #28
 8000740:	001a      	movs	r2, r3
 8000742:	2100      	movs	r1, #0
 8000744:	f004 f838 	bl	80047b8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000748:	4b31      	ldr	r3, [pc, #196]	; (8000810 <MX_TIM2_Init+0xfc>)
 800074a:	2280      	movs	r2, #128	; 0x80
 800074c:	05d2      	lsls	r2, r2, #23
 800074e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 320;
 8000750:	4b2f      	ldr	r3, [pc, #188]	; (8000810 <MX_TIM2_Init+0xfc>)
 8000752:	22a0      	movs	r2, #160	; 0xa0
 8000754:	0052      	lsls	r2, r2, #1
 8000756:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000758:	4b2d      	ldr	r3, [pc, #180]	; (8000810 <MX_TIM2_Init+0xfc>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800075e:	4b2c      	ldr	r3, [pc, #176]	; (8000810 <MX_TIM2_Init+0xfc>)
 8000760:	22fa      	movs	r2, #250	; 0xfa
 8000762:	0092      	lsls	r2, r2, #2
 8000764:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000766:	4b2a      	ldr	r3, [pc, #168]	; (8000810 <MX_TIM2_Init+0xfc>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800076c:	4b28      	ldr	r3, [pc, #160]	; (8000810 <MX_TIM2_Init+0xfc>)
 800076e:	2200      	movs	r2, #0
 8000770:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000772:	4b27      	ldr	r3, [pc, #156]	; (8000810 <MX_TIM2_Init+0xfc>)
 8000774:	0018      	movs	r0, r3
 8000776:	f001 fc03 	bl	8001f80 <HAL_TIM_Base_Init>
 800077a:	1e03      	subs	r3, r0, #0
 800077c:	d001      	beq.n	8000782 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800077e:	f000 f8e7 	bl	8000950 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000782:	2128      	movs	r1, #40	; 0x28
 8000784:	187b      	adds	r3, r7, r1
 8000786:	2280      	movs	r2, #128	; 0x80
 8000788:	0152      	lsls	r2, r2, #5
 800078a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800078c:	187a      	adds	r2, r7, r1
 800078e:	4b20      	ldr	r3, [pc, #128]	; (8000810 <MX_TIM2_Init+0xfc>)
 8000790:	0011      	movs	r1, r2
 8000792:	0018      	movs	r0, r3
 8000794:	f001 fed8 	bl	8002548 <HAL_TIM_ConfigClockSource>
 8000798:	1e03      	subs	r3, r0, #0
 800079a:	d001      	beq.n	80007a0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800079c:	f000 f8d8 	bl	8000950 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007a0:	4b1b      	ldr	r3, [pc, #108]	; (8000810 <MX_TIM2_Init+0xfc>)
 80007a2:	0018      	movs	r0, r3
 80007a4:	f001 fc18 	bl	8001fd8 <HAL_TIM_PWM_Init>
 80007a8:	1e03      	subs	r3, r0, #0
 80007aa:	d001      	beq.n	80007b0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80007ac:	f000 f8d0 	bl	8000950 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b0:	211c      	movs	r1, #28
 80007b2:	187b      	adds	r3, r7, r1
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b8:	187b      	adds	r3, r7, r1
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007be:	187a      	adds	r2, r7, r1
 80007c0:	4b13      	ldr	r3, [pc, #76]	; (8000810 <MX_TIM2_Init+0xfc>)
 80007c2:	0011      	movs	r1, r2
 80007c4:	0018      	movs	r0, r3
 80007c6:	f002 fbab 	bl	8002f20 <HAL_TIMEx_MasterConfigSynchronization>
 80007ca:	1e03      	subs	r3, r0, #0
 80007cc:	d001      	beq.n	80007d2 <MX_TIM2_Init+0xbe>
  {
    Error_Handler();
 80007ce:	f000 f8bf 	bl	8000950 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007d2:	003b      	movs	r3, r7
 80007d4:	2260      	movs	r2, #96	; 0x60
 80007d6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80007d8:	003b      	movs	r3, r7
 80007da:	2200      	movs	r2, #0
 80007dc:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007de:	003b      	movs	r3, r7
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007e4:	003b      	movs	r3, r7
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007ea:	0039      	movs	r1, r7
 80007ec:	4b08      	ldr	r3, [pc, #32]	; (8000810 <MX_TIM2_Init+0xfc>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	0018      	movs	r0, r3
 80007f2:	f001 fdab 	bl	800234c <HAL_TIM_PWM_ConfigChannel>
 80007f6:	1e03      	subs	r3, r0, #0
 80007f8:	d001      	beq.n	80007fe <MX_TIM2_Init+0xea>
  {
    Error_Handler();
 80007fa:	f000 f8a9 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007fe:	4b04      	ldr	r3, [pc, #16]	; (8000810 <MX_TIM2_Init+0xfc>)
 8000800:	0018      	movs	r0, r3
 8000802:	f000 f907 	bl	8000a14 <HAL_TIM_MspPostInit>

}
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	46bd      	mov	sp, r7
 800080a:	b00e      	add	sp, #56	; 0x38
 800080c:	bd80      	pop	{r7, pc}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	20000028 	.word	0x20000028

08000814 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000818:	4b23      	ldr	r3, [pc, #140]	; (80008a8 <MX_USART2_UART_Init+0x94>)
 800081a:	4a24      	ldr	r2, [pc, #144]	; (80008ac <MX_USART2_UART_Init+0x98>)
 800081c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800081e:	4b22      	ldr	r3, [pc, #136]	; (80008a8 <MX_USART2_UART_Init+0x94>)
 8000820:	22e1      	movs	r2, #225	; 0xe1
 8000822:	0252      	lsls	r2, r2, #9
 8000824:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000826:	4b20      	ldr	r3, [pc, #128]	; (80008a8 <MX_USART2_UART_Init+0x94>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800082c:	4b1e      	ldr	r3, [pc, #120]	; (80008a8 <MX_USART2_UART_Init+0x94>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000832:	4b1d      	ldr	r3, [pc, #116]	; (80008a8 <MX_USART2_UART_Init+0x94>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000838:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <MX_USART2_UART_Init+0x94>)
 800083a:	220c      	movs	r2, #12
 800083c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083e:	4b1a      	ldr	r3, [pc, #104]	; (80008a8 <MX_USART2_UART_Init+0x94>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000844:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <MX_USART2_UART_Init+0x94>)
 8000846:	2200      	movs	r2, #0
 8000848:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800084a:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <MX_USART2_UART_Init+0x94>)
 800084c:	2200      	movs	r2, #0
 800084e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000850:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <MX_USART2_UART_Init+0x94>)
 8000852:	2200      	movs	r2, #0
 8000854:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000856:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <MX_USART2_UART_Init+0x94>)
 8000858:	2200      	movs	r2, #0
 800085a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800085c:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <MX_USART2_UART_Init+0x94>)
 800085e:	0018      	movs	r0, r3
 8000860:	f002 fbcc 	bl	8002ffc <HAL_UART_Init>
 8000864:	1e03      	subs	r3, r0, #0
 8000866:	d001      	beq.n	800086c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000868:	f000 f872 	bl	8000950 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800086c:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <MX_USART2_UART_Init+0x94>)
 800086e:	2100      	movs	r1, #0
 8000870:	0018      	movs	r0, r3
 8000872:	f003 fe91 	bl	8004598 <HAL_UARTEx_SetTxFifoThreshold>
 8000876:	1e03      	subs	r3, r0, #0
 8000878:	d001      	beq.n	800087e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800087a:	f000 f869 	bl	8000950 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800087e:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <MX_USART2_UART_Init+0x94>)
 8000880:	2100      	movs	r1, #0
 8000882:	0018      	movs	r0, r3
 8000884:	f003 fec8 	bl	8004618 <HAL_UARTEx_SetRxFifoThreshold>
 8000888:	1e03      	subs	r3, r0, #0
 800088a:	d001      	beq.n	8000890 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800088c:	f000 f860 	bl	8000950 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000890:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <MX_USART2_UART_Init+0x94>)
 8000892:	0018      	movs	r0, r3
 8000894:	f003 fe46 	bl	8004524 <HAL_UARTEx_DisableFifoMode>
 8000898:	1e03      	subs	r3, r0, #0
 800089a:	d001      	beq.n	80008a0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800089c:	f000 f858 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008a0:	46c0      	nop			; (mov r8, r8)
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	20000068 	.word	0x20000068
 80008ac:	40004400 	.word	0x40004400

080008b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b0:	b590      	push	{r4, r7, lr}
 80008b2:	b089      	sub	sp, #36	; 0x24
 80008b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b6:	240c      	movs	r4, #12
 80008b8:	193b      	adds	r3, r7, r4
 80008ba:	0018      	movs	r0, r3
 80008bc:	2314      	movs	r3, #20
 80008be:	001a      	movs	r2, r3
 80008c0:	2100      	movs	r1, #0
 80008c2:	f003 ff79 	bl	80047b8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c6:	4b21      	ldr	r3, [pc, #132]	; (800094c <MX_GPIO_Init+0x9c>)
 80008c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008ca:	4b20      	ldr	r3, [pc, #128]	; (800094c <MX_GPIO_Init+0x9c>)
 80008cc:	2104      	movs	r1, #4
 80008ce:	430a      	orrs	r2, r1
 80008d0:	635a      	str	r2, [r3, #52]	; 0x34
 80008d2:	4b1e      	ldr	r3, [pc, #120]	; (800094c <MX_GPIO_Init+0x9c>)
 80008d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008d6:	2204      	movs	r2, #4
 80008d8:	4013      	ands	r3, r2
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008de:	4b1b      	ldr	r3, [pc, #108]	; (800094c <MX_GPIO_Init+0x9c>)
 80008e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008e2:	4b1a      	ldr	r3, [pc, #104]	; (800094c <MX_GPIO_Init+0x9c>)
 80008e4:	2120      	movs	r1, #32
 80008e6:	430a      	orrs	r2, r1
 80008e8:	635a      	str	r2, [r3, #52]	; 0x34
 80008ea:	4b18      	ldr	r3, [pc, #96]	; (800094c <MX_GPIO_Init+0x9c>)
 80008ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008ee:	2220      	movs	r2, #32
 80008f0:	4013      	ands	r3, r2
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	4b15      	ldr	r3, [pc, #84]	; (800094c <MX_GPIO_Init+0x9c>)
 80008f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008fa:	4b14      	ldr	r3, [pc, #80]	; (800094c <MX_GPIO_Init+0x9c>)
 80008fc:	2101      	movs	r1, #1
 80008fe:	430a      	orrs	r2, r1
 8000900:	635a      	str	r2, [r3, #52]	; 0x34
 8000902:	4b12      	ldr	r3, [pc, #72]	; (800094c <MX_GPIO_Init+0x9c>)
 8000904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000906:	2201      	movs	r2, #1
 8000908:	4013      	ands	r3, r2
 800090a:	603b      	str	r3, [r7, #0]
 800090c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800090e:	23a0      	movs	r3, #160	; 0xa0
 8000910:	05db      	lsls	r3, r3, #23
 8000912:	2200      	movs	r2, #0
 8000914:	2120      	movs	r1, #32
 8000916:	0018      	movs	r0, r3
 8000918:	f000 fc46 	bl	80011a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800091c:	0021      	movs	r1, r4
 800091e:	187b      	adds	r3, r7, r1
 8000920:	2220      	movs	r2, #32
 8000922:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000924:	187b      	adds	r3, r7, r1
 8000926:	2201      	movs	r2, #1
 8000928:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	187b      	adds	r3, r7, r1
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000930:	187b      	adds	r3, r7, r1
 8000932:	2202      	movs	r2, #2
 8000934:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000936:	187a      	adds	r2, r7, r1
 8000938:	23a0      	movs	r3, #160	; 0xa0
 800093a:	05db      	lsls	r3, r3, #23
 800093c:	0011      	movs	r1, r2
 800093e:	0018      	movs	r0, r3
 8000940:	f000 face 	bl	8000ee0 <HAL_GPIO_Init>

}
 8000944:	46c0      	nop			; (mov r8, r8)
 8000946:	46bd      	mov	sp, r7
 8000948:	b009      	add	sp, #36	; 0x24
 800094a:	bd90      	pop	{r4, r7, pc}
 800094c:	40021000 	.word	0x40021000

08000950 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000954:	46c0      	nop			; (mov r8, r8)
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
	...

0800095c <LL_SYSCFG_DisableDBATT>:
  *         @arg @ref LL_SYSCFG_UCPD2_STROBE
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_DisableDBATT(uint32_t ConfigDeadBattery)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigDeadBattery);
 8000964:	4b04      	ldr	r3, [pc, #16]	; (8000978 <LL_SYSCFG_DisableDBATT+0x1c>)
 8000966:	6819      	ldr	r1, [r3, #0]
 8000968:	4b03      	ldr	r3, [pc, #12]	; (8000978 <LL_SYSCFG_DisableDBATT+0x1c>)
 800096a:	687a      	ldr	r2, [r7, #4]
 800096c:	430a      	orrs	r2, r1
 800096e:	601a      	str	r2, [r3, #0]
}
 8000970:	46c0      	nop			; (mov r8, r8)
 8000972:	46bd      	mov	sp, r7
 8000974:	b002      	add	sp, #8
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40010000 	.word	0x40010000

0800097c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000982:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <HAL_MspInit+0x4c>)
 8000984:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000986:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <HAL_MspInit+0x4c>)
 8000988:	2101      	movs	r1, #1
 800098a:	430a      	orrs	r2, r1
 800098c:	641a      	str	r2, [r3, #64]	; 0x40
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <HAL_MspInit+0x4c>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000992:	2201      	movs	r2, #1
 8000994:	4013      	ands	r3, r2
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <HAL_MspInit+0x4c>)
 800099c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800099e:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <HAL_MspInit+0x4c>)
 80009a0:	2180      	movs	r1, #128	; 0x80
 80009a2:	0549      	lsls	r1, r1, #21
 80009a4:	430a      	orrs	r2, r1
 80009a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80009a8:	4b07      	ldr	r3, [pc, #28]	; (80009c8 <HAL_MspInit+0x4c>)
 80009aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009ac:	2380      	movs	r3, #128	; 0x80
 80009ae:	055b      	lsls	r3, r3, #21
 80009b0:	4013      	ands	r3, r2
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_SYSCFG_DisableDBATT(LL_SYSCFG_UCPD1_STROBE | LL_SYSCFG_UCPD2_STROBE);
 80009b6:	23c0      	movs	r3, #192	; 0xc0
 80009b8:	00db      	lsls	r3, r3, #3
 80009ba:	0018      	movs	r0, r3
 80009bc:	f7ff ffce 	bl	800095c <LL_SYSCFG_DisableDBATT>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c0:	46c0      	nop			; (mov r8, r8)
 80009c2:	46bd      	mov	sp, r7
 80009c4:	b002      	add	sp, #8
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40021000 	.word	0x40021000

080009cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	2380      	movs	r3, #128	; 0x80
 80009da:	05db      	lsls	r3, r3, #23
 80009dc:	429a      	cmp	r2, r3
 80009de:	d113      	bne.n	8000a08 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009e0:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <HAL_TIM_Base_MspInit+0x44>)
 80009e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009e4:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <HAL_TIM_Base_MspInit+0x44>)
 80009e6:	2101      	movs	r1, #1
 80009e8:	430a      	orrs	r2, r1
 80009ea:	63da      	str	r2, [r3, #60]	; 0x3c
 80009ec:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <HAL_TIM_Base_MspInit+0x44>)
 80009ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009f0:	2201      	movs	r2, #1
 80009f2:	4013      	ands	r3, r2
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80009f8:	2200      	movs	r2, #0
 80009fa:	2100      	movs	r1, #0
 80009fc:	200f      	movs	r0, #15
 80009fe:	f000 fa3d 	bl	8000e7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a02:	200f      	movs	r0, #15
 8000a04:	f000 fa4f 	bl	8000ea6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a08:	46c0      	nop			; (mov r8, r8)
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	b004      	add	sp, #16
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40021000 	.word	0x40021000

08000a14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b088      	sub	sp, #32
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	230c      	movs	r3, #12
 8000a1e:	18fb      	adds	r3, r7, r3
 8000a20:	0018      	movs	r0, r3
 8000a22:	2314      	movs	r3, #20
 8000a24:	001a      	movs	r2, r3
 8000a26:	2100      	movs	r1, #0
 8000a28:	f003 fec6 	bl	80047b8 <memset>
  if(htim->Instance==TIM2)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	2380      	movs	r3, #128	; 0x80
 8000a32:	05db      	lsls	r3, r3, #23
 8000a34:	429a      	cmp	r2, r3
 8000a36:	d122      	bne.n	8000a7e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a38:	4b13      	ldr	r3, [pc, #76]	; (8000a88 <HAL_TIM_MspPostInit+0x74>)
 8000a3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <HAL_TIM_MspPostInit+0x74>)
 8000a3e:	2101      	movs	r1, #1
 8000a40:	430a      	orrs	r2, r1
 8000a42:	635a      	str	r2, [r3, #52]	; 0x34
 8000a44:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <HAL_TIM_MspPostInit+0x74>)
 8000a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a48:	2201      	movs	r2, #1
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a50:	210c      	movs	r1, #12
 8000a52:	187b      	adds	r3, r7, r1
 8000a54:	2201      	movs	r2, #1
 8000a56:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a58:	187b      	adds	r3, r7, r1
 8000a5a:	2202      	movs	r2, #2
 8000a5c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	187b      	adds	r3, r7, r1
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a64:	187b      	adds	r3, r7, r1
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000a6a:	187b      	adds	r3, r7, r1
 8000a6c:	2202      	movs	r2, #2
 8000a6e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a70:	187a      	adds	r2, r7, r1
 8000a72:	23a0      	movs	r3, #160	; 0xa0
 8000a74:	05db      	lsls	r3, r3, #23
 8000a76:	0011      	movs	r1, r2
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f000 fa31 	bl	8000ee0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	46bd      	mov	sp, r7
 8000a82:	b008      	add	sp, #32
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	40021000 	.word	0x40021000

08000a8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08a      	sub	sp, #40	; 0x28
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a94:	2314      	movs	r3, #20
 8000a96:	18fb      	adds	r3, r7, r3
 8000a98:	0018      	movs	r0, r3
 8000a9a:	2314      	movs	r3, #20
 8000a9c:	001a      	movs	r2, r3
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	f003 fe8a 	bl	80047b8 <memset>
  if(huart->Instance==USART2)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a1b      	ldr	r2, [pc, #108]	; (8000b18 <HAL_UART_MspInit+0x8c>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d130      	bne.n	8000b10 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aae:	4b1b      	ldr	r3, [pc, #108]	; (8000b1c <HAL_UART_MspInit+0x90>)
 8000ab0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ab2:	4b1a      	ldr	r3, [pc, #104]	; (8000b1c <HAL_UART_MspInit+0x90>)
 8000ab4:	2180      	movs	r1, #128	; 0x80
 8000ab6:	0289      	lsls	r1, r1, #10
 8000ab8:	430a      	orrs	r2, r1
 8000aba:	63da      	str	r2, [r3, #60]	; 0x3c
 8000abc:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <HAL_UART_MspInit+0x90>)
 8000abe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ac0:	2380      	movs	r3, #128	; 0x80
 8000ac2:	029b      	lsls	r3, r3, #10
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aca:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <HAL_UART_MspInit+0x90>)
 8000acc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ace:	4b13      	ldr	r3, [pc, #76]	; (8000b1c <HAL_UART_MspInit+0x90>)
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	430a      	orrs	r2, r1
 8000ad4:	635a      	str	r2, [r3, #52]	; 0x34
 8000ad6:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <HAL_UART_MspInit+0x90>)
 8000ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ada:	2201      	movs	r2, #1
 8000adc:	4013      	ands	r3, r2
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000ae2:	2114      	movs	r1, #20
 8000ae4:	187b      	adds	r3, r7, r1
 8000ae6:	220c      	movs	r2, #12
 8000ae8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aea:	187b      	adds	r3, r7, r1
 8000aec:	2202      	movs	r2, #2
 8000aee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000af0:	187b      	adds	r3, r7, r1
 8000af2:	2201      	movs	r2, #1
 8000af4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	187b      	adds	r3, r7, r1
 8000af8:	2200      	movs	r2, #0
 8000afa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000afc:	187b      	adds	r3, r7, r1
 8000afe:	2201      	movs	r2, #1
 8000b00:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b02:	187a      	adds	r2, r7, r1
 8000b04:	23a0      	movs	r3, #160	; 0xa0
 8000b06:	05db      	lsls	r3, r3, #23
 8000b08:	0011      	movs	r1, r2
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f000 f9e8 	bl	8000ee0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b10:	46c0      	nop			; (mov r8, r8)
 8000b12:	46bd      	mov	sp, r7
 8000b14:	b00a      	add	sp, #40	; 0x28
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40004400 	.word	0x40004400
 8000b1c:	40021000 	.word	0x40021000

08000b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b24:	46c0      	nop			; (mov r8, r8)
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b2e:	e7fe      	b.n	8000b2e <HardFault_Handler+0x4>

08000b30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b34:	46c0      	nop			; (mov r8, r8)
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b48:	f000 f8b0 	bl	8000cac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b4c:	46c0      	nop			; (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
	...

08000b54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b58:	4b03      	ldr	r3, [pc, #12]	; (8000b68 <TIM2_IRQHandler+0x14>)
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f001 fac4 	bl	80020e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b60:	46c0      	nop			; (mov r8, r8)
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	46c0      	nop			; (mov r8, r8)
 8000b68:	20000028 	.word	0x20000028

08000b6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b70:	4b03      	ldr	r3, [pc, #12]	; (8000b80 <SystemInit+0x14>)
 8000b72:	2280      	movs	r2, #128	; 0x80
 8000b74:	0512      	lsls	r2, r2, #20
 8000b76:	609a      	str	r2, [r3, #8]
#endif
}
 8000b78:	46c0      	nop			; (mov r8, r8)
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b84:	480d      	ldr	r0, [pc, #52]	; (8000bbc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b86:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000b88:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000b8a:	e003      	b.n	8000b94 <LoopCopyDataInit>

08000b8c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000b8e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000b90:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000b92:	3104      	adds	r1, #4

08000b94 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000b94:	480b      	ldr	r0, [pc, #44]	; (8000bc4 <LoopForever+0xa>)
  ldr r3, =_edata
 8000b96:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <LoopForever+0xe>)
  adds r2, r0, r1
 8000b98:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000b9a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000b9c:	d3f6      	bcc.n	8000b8c <CopyDataInit>
  ldr r2, =_sbss
 8000b9e:	4a0b      	ldr	r2, [pc, #44]	; (8000bcc <LoopForever+0x12>)
  b LoopFillZerobss
 8000ba0:	e002      	b.n	8000ba8 <LoopFillZerobss>

08000ba2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000ba2:	2300      	movs	r3, #0
  str  r3, [r2]
 8000ba4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba6:	3204      	adds	r2, #4

08000ba8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000ba8:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <LoopForever+0x16>)
  cmp r2, r3
 8000baa:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000bac:	d3f9      	bcc.n	8000ba2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000bae:	f7ff ffdd 	bl	8000b6c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000bb2:	f003 fddd 	bl	8004770 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bb6:	f7ff fd27 	bl	8000608 <main>

08000bba <LoopForever>:

LoopForever:
    b LoopForever
 8000bba:	e7fe      	b.n	8000bba <LoopForever>
  ldr   r0, =_estack
 8000bbc:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 8000bc0:	080048b4 	.word	0x080048b4
  ldr r0, =_sdata
 8000bc4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000bc8:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000bcc:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000bd0:	200000f8 	.word	0x200000f8

08000bd4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bd4:	e7fe      	b.n	8000bd4 <ADC1_COMP_IRQHandler>
	...

08000bd8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bde:	1dfb      	adds	r3, r7, #7
 8000be0:	2200      	movs	r2, #0
 8000be2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be4:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <HAL_Init+0x3c>)
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <HAL_Init+0x3c>)
 8000bea:	2180      	movs	r1, #128	; 0x80
 8000bec:	0049      	lsls	r1, r1, #1
 8000bee:	430a      	orrs	r2, r1
 8000bf0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	f000 f810 	bl	8000c18 <HAL_InitTick>
 8000bf8:	1e03      	subs	r3, r0, #0
 8000bfa:	d003      	beq.n	8000c04 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000bfc:	1dfb      	adds	r3, r7, #7
 8000bfe:	2201      	movs	r2, #1
 8000c00:	701a      	strb	r2, [r3, #0]
 8000c02:	e001      	b.n	8000c08 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000c04:	f7ff feba 	bl	800097c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c08:	1dfb      	adds	r3, r7, #7
 8000c0a:	781b      	ldrb	r3, [r3, #0]
}
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	b002      	add	sp, #8
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40022000 	.word	0x40022000

08000c18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c18:	b590      	push	{r4, r7, lr}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c20:	230f      	movs	r3, #15
 8000c22:	18fb      	adds	r3, r7, r3
 8000c24:	2200      	movs	r2, #0
 8000c26:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8000c28:	4b1d      	ldr	r3, [pc, #116]	; (8000ca0 <HAL_InitTick+0x88>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d02b      	beq.n	8000c88 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 8000c30:	4b1c      	ldr	r3, [pc, #112]	; (8000ca4 <HAL_InitTick+0x8c>)
 8000c32:	681c      	ldr	r4, [r3, #0]
 8000c34:	4b1a      	ldr	r3, [pc, #104]	; (8000ca0 <HAL_InitTick+0x88>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	0019      	movs	r1, r3
 8000c3a:	23fa      	movs	r3, #250	; 0xfa
 8000c3c:	0098      	lsls	r0, r3, #2
 8000c3e:	f7ff fa61 	bl	8000104 <__udivsi3>
 8000c42:	0003      	movs	r3, r0
 8000c44:	0019      	movs	r1, r3
 8000c46:	0020      	movs	r0, r4
 8000c48:	f7ff fa5c 	bl	8000104 <__udivsi3>
 8000c4c:	0003      	movs	r3, r0
 8000c4e:	0018      	movs	r0, r3
 8000c50:	f000 f939 	bl	8000ec6 <HAL_SYSTICK_Config>
 8000c54:	1e03      	subs	r3, r0, #0
 8000c56:	d112      	bne.n	8000c7e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2b03      	cmp	r3, #3
 8000c5c:	d80a      	bhi.n	8000c74 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c5e:	6879      	ldr	r1, [r7, #4]
 8000c60:	2301      	movs	r3, #1
 8000c62:	425b      	negs	r3, r3
 8000c64:	2200      	movs	r2, #0
 8000c66:	0018      	movs	r0, r3
 8000c68:	f000 f908 	bl	8000e7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <HAL_InitTick+0x90>)
 8000c6e:	687a      	ldr	r2, [r7, #4]
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	e00d      	b.n	8000c90 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000c74:	230f      	movs	r3, #15
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	2201      	movs	r2, #1
 8000c7a:	701a      	strb	r2, [r3, #0]
 8000c7c:	e008      	b.n	8000c90 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c7e:	230f      	movs	r3, #15
 8000c80:	18fb      	adds	r3, r7, r3
 8000c82:	2201      	movs	r2, #1
 8000c84:	701a      	strb	r2, [r3, #0]
 8000c86:	e003      	b.n	8000c90 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c88:	230f      	movs	r3, #15
 8000c8a:	18fb      	adds	r3, r7, r3
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000c90:	230f      	movs	r3, #15
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	781b      	ldrb	r3, [r3, #0]
}
 8000c96:	0018      	movs	r0, r3
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	b005      	add	sp, #20
 8000c9c:	bd90      	pop	{r4, r7, pc}
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	20000008 	.word	0x20000008
 8000ca4:	20000000 	.word	0x20000000
 8000ca8:	20000004 	.word	0x20000004

08000cac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cb0:	4b04      	ldr	r3, [pc, #16]	; (8000cc4 <HAL_IncTick+0x18>)
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <HAL_IncTick+0x1c>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	18d2      	adds	r2, r2, r3
 8000cba:	4b02      	ldr	r3, [pc, #8]	; (8000cc4 <HAL_IncTick+0x18>)
 8000cbc:	601a      	str	r2, [r3, #0]
}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	200000f4 	.word	0x200000f4
 8000cc8:	20000008 	.word	0x20000008

08000ccc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd0:	4b02      	ldr	r3, [pc, #8]	; (8000cdc <HAL_GetTick+0x10>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
}
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	200000f4 	.word	0x200000f4

08000ce0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ce8:	f7ff fff0 	bl	8000ccc <HAL_GetTick>
 8000cec:	0003      	movs	r3, r0
 8000cee:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	d004      	beq.n	8000d04 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cfa:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <HAL_Delay+0x40>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	18d3      	adds	r3, r2, r3
 8000d02:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d04:	46c0      	nop			; (mov r8, r8)
 8000d06:	f7ff ffe1 	bl	8000ccc <HAL_GetTick>
 8000d0a:	0002      	movs	r2, r0
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	1ad3      	subs	r3, r2, r3
 8000d10:	68fa      	ldr	r2, [r7, #12]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d8f7      	bhi.n	8000d06 <HAL_Delay+0x26>
  {
  }
}
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	b004      	add	sp, #16
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	20000008 	.word	0x20000008

08000d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	0002      	movs	r2, r0
 8000d2c:	1dfb      	adds	r3, r7, #7
 8000d2e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d30:	1dfb      	adds	r3, r7, #7
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b7f      	cmp	r3, #127	; 0x7f
 8000d36:	d809      	bhi.n	8000d4c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d38:	1dfb      	adds	r3, r7, #7
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	001a      	movs	r2, r3
 8000d3e:	231f      	movs	r3, #31
 8000d40:	401a      	ands	r2, r3
 8000d42:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <__NVIC_EnableIRQ+0x30>)
 8000d44:	2101      	movs	r1, #1
 8000d46:	4091      	lsls	r1, r2
 8000d48:	000a      	movs	r2, r1
 8000d4a:	601a      	str	r2, [r3, #0]
  }
}
 8000d4c:	46c0      	nop			; (mov r8, r8)
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	b002      	add	sp, #8
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	e000e100 	.word	0xe000e100

08000d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d58:	b590      	push	{r4, r7, lr}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	0002      	movs	r2, r0
 8000d60:	6039      	str	r1, [r7, #0]
 8000d62:	1dfb      	adds	r3, r7, #7
 8000d64:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d66:	1dfb      	adds	r3, r7, #7
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b7f      	cmp	r3, #127	; 0x7f
 8000d6c:	d828      	bhi.n	8000dc0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d6e:	4a2f      	ldr	r2, [pc, #188]	; (8000e2c <__NVIC_SetPriority+0xd4>)
 8000d70:	1dfb      	adds	r3, r7, #7
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	b25b      	sxtb	r3, r3
 8000d76:	089b      	lsrs	r3, r3, #2
 8000d78:	33c0      	adds	r3, #192	; 0xc0
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	589b      	ldr	r3, [r3, r2]
 8000d7e:	1dfa      	adds	r2, r7, #7
 8000d80:	7812      	ldrb	r2, [r2, #0]
 8000d82:	0011      	movs	r1, r2
 8000d84:	2203      	movs	r2, #3
 8000d86:	400a      	ands	r2, r1
 8000d88:	00d2      	lsls	r2, r2, #3
 8000d8a:	21ff      	movs	r1, #255	; 0xff
 8000d8c:	4091      	lsls	r1, r2
 8000d8e:	000a      	movs	r2, r1
 8000d90:	43d2      	mvns	r2, r2
 8000d92:	401a      	ands	r2, r3
 8000d94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	019b      	lsls	r3, r3, #6
 8000d9a:	22ff      	movs	r2, #255	; 0xff
 8000d9c:	401a      	ands	r2, r3
 8000d9e:	1dfb      	adds	r3, r7, #7
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	0018      	movs	r0, r3
 8000da4:	2303      	movs	r3, #3
 8000da6:	4003      	ands	r3, r0
 8000da8:	00db      	lsls	r3, r3, #3
 8000daa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dac:	481f      	ldr	r0, [pc, #124]	; (8000e2c <__NVIC_SetPriority+0xd4>)
 8000dae:	1dfb      	adds	r3, r7, #7
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	b25b      	sxtb	r3, r3
 8000db4:	089b      	lsrs	r3, r3, #2
 8000db6:	430a      	orrs	r2, r1
 8000db8:	33c0      	adds	r3, #192	; 0xc0
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000dbe:	e031      	b.n	8000e24 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dc0:	4a1b      	ldr	r2, [pc, #108]	; (8000e30 <__NVIC_SetPriority+0xd8>)
 8000dc2:	1dfb      	adds	r3, r7, #7
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	0019      	movs	r1, r3
 8000dc8:	230f      	movs	r3, #15
 8000dca:	400b      	ands	r3, r1
 8000dcc:	3b08      	subs	r3, #8
 8000dce:	089b      	lsrs	r3, r3, #2
 8000dd0:	3306      	adds	r3, #6
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	18d3      	adds	r3, r2, r3
 8000dd6:	3304      	adds	r3, #4
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	1dfa      	adds	r2, r7, #7
 8000ddc:	7812      	ldrb	r2, [r2, #0]
 8000dde:	0011      	movs	r1, r2
 8000de0:	2203      	movs	r2, #3
 8000de2:	400a      	ands	r2, r1
 8000de4:	00d2      	lsls	r2, r2, #3
 8000de6:	21ff      	movs	r1, #255	; 0xff
 8000de8:	4091      	lsls	r1, r2
 8000dea:	000a      	movs	r2, r1
 8000dec:	43d2      	mvns	r2, r2
 8000dee:	401a      	ands	r2, r3
 8000df0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	019b      	lsls	r3, r3, #6
 8000df6:	22ff      	movs	r2, #255	; 0xff
 8000df8:	401a      	ands	r2, r3
 8000dfa:	1dfb      	adds	r3, r7, #7
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	0018      	movs	r0, r3
 8000e00:	2303      	movs	r3, #3
 8000e02:	4003      	ands	r3, r0
 8000e04:	00db      	lsls	r3, r3, #3
 8000e06:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e08:	4809      	ldr	r0, [pc, #36]	; (8000e30 <__NVIC_SetPriority+0xd8>)
 8000e0a:	1dfb      	adds	r3, r7, #7
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	001c      	movs	r4, r3
 8000e10:	230f      	movs	r3, #15
 8000e12:	4023      	ands	r3, r4
 8000e14:	3b08      	subs	r3, #8
 8000e16:	089b      	lsrs	r3, r3, #2
 8000e18:	430a      	orrs	r2, r1
 8000e1a:	3306      	adds	r3, #6
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	18c3      	adds	r3, r0, r3
 8000e20:	3304      	adds	r3, #4
 8000e22:	601a      	str	r2, [r3, #0]
}
 8000e24:	46c0      	nop			; (mov r8, r8)
 8000e26:	46bd      	mov	sp, r7
 8000e28:	b003      	add	sp, #12
 8000e2a:	bd90      	pop	{r4, r7, pc}
 8000e2c:	e000e100 	.word	0xe000e100
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	4a0c      	ldr	r2, [pc, #48]	; (8000e74 <SysTick_Config+0x40>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d901      	bls.n	8000e4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e46:	2301      	movs	r3, #1
 8000e48:	e010      	b.n	8000e6c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <SysTick_Config+0x44>)
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	3a01      	subs	r2, #1
 8000e50:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e52:	2301      	movs	r3, #1
 8000e54:	425b      	negs	r3, r3
 8000e56:	2103      	movs	r1, #3
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f7ff ff7d 	bl	8000d58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e5e:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <SysTick_Config+0x44>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e64:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <SysTick_Config+0x44>)
 8000e66:	2207      	movs	r2, #7
 8000e68:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e6a:	2300      	movs	r3, #0
}
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	b002      	add	sp, #8
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	00ffffff 	.word	0x00ffffff
 8000e78:	e000e010 	.word	0xe000e010

08000e7c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60b9      	str	r1, [r7, #8]
 8000e84:	607a      	str	r2, [r7, #4]
 8000e86:	210f      	movs	r1, #15
 8000e88:	187b      	adds	r3, r7, r1
 8000e8a:	1c02      	adds	r2, r0, #0
 8000e8c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e8e:	68ba      	ldr	r2, [r7, #8]
 8000e90:	187b      	adds	r3, r7, r1
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	b25b      	sxtb	r3, r3
 8000e96:	0011      	movs	r1, r2
 8000e98:	0018      	movs	r0, r3
 8000e9a:	f7ff ff5d 	bl	8000d58 <__NVIC_SetPriority>
}
 8000e9e:	46c0      	nop			; (mov r8, r8)
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	b004      	add	sp, #16
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	0002      	movs	r2, r0
 8000eae:	1dfb      	adds	r3, r7, #7
 8000eb0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eb2:	1dfb      	adds	r3, r7, #7
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	b25b      	sxtb	r3, r3
 8000eb8:	0018      	movs	r0, r3
 8000eba:	f7ff ff33 	bl	8000d24 <__NVIC_EnableIRQ>
}
 8000ebe:	46c0      	nop			; (mov r8, r8)
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	b002      	add	sp, #8
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b082      	sub	sp, #8
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f7ff ffaf 	bl	8000e34 <SysTick_Config>
 8000ed6:	0003      	movs	r3, r0
}
 8000ed8:	0018      	movs	r0, r3
 8000eda:	46bd      	mov	sp, r7
 8000edc:	b002      	add	sp, #8
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eee:	e147      	b.n	8001180 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	697a      	ldr	r2, [r7, #20]
 8000ef8:	4091      	lsls	r1, r2
 8000efa:	000a      	movs	r2, r1
 8000efc:	4013      	ands	r3, r2
 8000efe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d100      	bne.n	8000f08 <HAL_GPIO_Init+0x28>
 8000f06:	e138      	b.n	800117a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d003      	beq.n	8000f18 <HAL_GPIO_Init+0x38>
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	2b12      	cmp	r3, #18
 8000f16:	d123      	bne.n	8000f60 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	08da      	lsrs	r2, r3, #3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3208      	adds	r2, #8
 8000f20:	0092      	lsls	r2, r2, #2
 8000f22:	58d3      	ldr	r3, [r2, r3]
 8000f24:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	2207      	movs	r2, #7
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	220f      	movs	r2, #15
 8000f30:	409a      	lsls	r2, r3
 8000f32:	0013      	movs	r3, r2
 8000f34:	43da      	mvns	r2, r3
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	691a      	ldr	r2, [r3, #16]
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	2107      	movs	r1, #7
 8000f44:	400b      	ands	r3, r1
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	409a      	lsls	r2, r3
 8000f4a:	0013      	movs	r3, r2
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	08da      	lsrs	r2, r3, #3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	3208      	adds	r2, #8
 8000f5a:	0092      	lsls	r2, r2, #2
 8000f5c:	6939      	ldr	r1, [r7, #16]
 8000f5e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	2203      	movs	r2, #3
 8000f6c:	409a      	lsls	r2, r3
 8000f6e:	0013      	movs	r3, r2
 8000f70:	43da      	mvns	r2, r3
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	4013      	ands	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	2203      	movs	r2, #3
 8000f7e:	401a      	ands	r2, r3
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	409a      	lsls	r2, r3
 8000f86:	0013      	movs	r3, r2
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d00b      	beq.n	8000fb4 <HAL_GPIO_Init+0xd4>
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	d007      	beq.n	8000fb4 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fa8:	2b11      	cmp	r3, #17
 8000faa:	d003      	beq.n	8000fb4 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	2b12      	cmp	r3, #18
 8000fb2:	d130      	bne.n	8001016 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	2203      	movs	r2, #3
 8000fc0:	409a      	lsls	r2, r3
 8000fc2:	0013      	movs	r3, r2
 8000fc4:	43da      	mvns	r2, r3
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	68da      	ldr	r2, [r3, #12]
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	409a      	lsls	r2, r3
 8000fd6:	0013      	movs	r3, r2
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fea:	2201      	movs	r2, #1
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	409a      	lsls	r2, r3
 8000ff0:	0013      	movs	r3, r2
 8000ff2:	43da      	mvns	r2, r3
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	091b      	lsrs	r3, r3, #4
 8001000:	2201      	movs	r2, #1
 8001002:	401a      	ands	r2, r3
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	409a      	lsls	r2, r3
 8001008:	0013      	movs	r3, r2
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	4313      	orrs	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	68db      	ldr	r3, [r3, #12]
 800101a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	2203      	movs	r2, #3
 8001022:	409a      	lsls	r2, r3
 8001024:	0013      	movs	r3, r2
 8001026:	43da      	mvns	r2, r3
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	4013      	ands	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	689a      	ldr	r2, [r3, #8]
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	409a      	lsls	r2, r3
 8001038:	0013      	movs	r3, r2
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4313      	orrs	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685a      	ldr	r2, [r3, #4]
 800104a:	2380      	movs	r3, #128	; 0x80
 800104c:	055b      	lsls	r3, r3, #21
 800104e:	4013      	ands	r3, r2
 8001050:	d100      	bne.n	8001054 <HAL_GPIO_Init+0x174>
 8001052:	e092      	b.n	800117a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001054:	4a50      	ldr	r2, [pc, #320]	; (8001198 <HAL_GPIO_Init+0x2b8>)
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	089b      	lsrs	r3, r3, #2
 800105a:	3318      	adds	r3, #24
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	589b      	ldr	r3, [r3, r2]
 8001060:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	2203      	movs	r2, #3
 8001066:	4013      	ands	r3, r2
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	220f      	movs	r2, #15
 800106c:	409a      	lsls	r2, r3
 800106e:	0013      	movs	r3, r2
 8001070:	43da      	mvns	r2, r3
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	23a0      	movs	r3, #160	; 0xa0
 800107c:	05db      	lsls	r3, r3, #23
 800107e:	429a      	cmp	r2, r3
 8001080:	d013      	beq.n	80010aa <HAL_GPIO_Init+0x1ca>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a45      	ldr	r2, [pc, #276]	; (800119c <HAL_GPIO_Init+0x2bc>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d00d      	beq.n	80010a6 <HAL_GPIO_Init+0x1c6>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a44      	ldr	r2, [pc, #272]	; (80011a0 <HAL_GPIO_Init+0x2c0>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d007      	beq.n	80010a2 <HAL_GPIO_Init+0x1c2>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a43      	ldr	r2, [pc, #268]	; (80011a4 <HAL_GPIO_Init+0x2c4>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d101      	bne.n	800109e <HAL_GPIO_Init+0x1be>
 800109a:	2303      	movs	r3, #3
 800109c:	e006      	b.n	80010ac <HAL_GPIO_Init+0x1cc>
 800109e:	2305      	movs	r3, #5
 80010a0:	e004      	b.n	80010ac <HAL_GPIO_Init+0x1cc>
 80010a2:	2302      	movs	r3, #2
 80010a4:	e002      	b.n	80010ac <HAL_GPIO_Init+0x1cc>
 80010a6:	2301      	movs	r3, #1
 80010a8:	e000      	b.n	80010ac <HAL_GPIO_Init+0x1cc>
 80010aa:	2300      	movs	r3, #0
 80010ac:	697a      	ldr	r2, [r7, #20]
 80010ae:	2103      	movs	r1, #3
 80010b0:	400a      	ands	r2, r1
 80010b2:	00d2      	lsls	r2, r2, #3
 80010b4:	4093      	lsls	r3, r2
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80010bc:	4936      	ldr	r1, [pc, #216]	; (8001198 <HAL_GPIO_Init+0x2b8>)
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	089b      	lsrs	r3, r3, #2
 80010c2:	3318      	adds	r3, #24
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80010ca:	4a33      	ldr	r2, [pc, #204]	; (8001198 <HAL_GPIO_Init+0x2b8>)
 80010cc:	2380      	movs	r3, #128	; 0x80
 80010ce:	58d3      	ldr	r3, [r2, r3]
 80010d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	43da      	mvns	r2, r3
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	4013      	ands	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685a      	ldr	r2, [r3, #4]
 80010e0:	2380      	movs	r3, #128	; 0x80
 80010e2:	025b      	lsls	r3, r3, #9
 80010e4:	4013      	ands	r3, r2
 80010e6:	d003      	beq.n	80010f0 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010f0:	4929      	ldr	r1, [pc, #164]	; (8001198 <HAL_GPIO_Init+0x2b8>)
 80010f2:	2280      	movs	r2, #128	; 0x80
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 80010f8:	4a27      	ldr	r2, [pc, #156]	; (8001198 <HAL_GPIO_Init+0x2b8>)
 80010fa:	2384      	movs	r3, #132	; 0x84
 80010fc:	58d3      	ldr	r3, [r2, r3]
 80010fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	43da      	mvns	r2, r3
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	4013      	ands	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685a      	ldr	r2, [r3, #4]
 800110e:	2380      	movs	r3, #128	; 0x80
 8001110:	029b      	lsls	r3, r3, #10
 8001112:	4013      	ands	r3, r2
 8001114:	d003      	beq.n	800111e <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	4313      	orrs	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800111e:	491e      	ldr	r1, [pc, #120]	; (8001198 <HAL_GPIO_Init+0x2b8>)
 8001120:	2284      	movs	r2, #132	; 0x84
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001126:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <HAL_GPIO_Init+0x2b8>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	43da      	mvns	r2, r3
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	4013      	ands	r3, r2
 8001134:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685a      	ldr	r2, [r3, #4]
 800113a:	2380      	movs	r3, #128	; 0x80
 800113c:	035b      	lsls	r3, r3, #13
 800113e:	4013      	ands	r3, r2
 8001140:	d003      	beq.n	800114a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4313      	orrs	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800114a:	4b13      	ldr	r3, [pc, #76]	; (8001198 <HAL_GPIO_Init+0x2b8>)
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001150:	4b11      	ldr	r3, [pc, #68]	; (8001198 <HAL_GPIO_Init+0x2b8>)
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	43da      	mvns	r2, r3
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	4013      	ands	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685a      	ldr	r2, [r3, #4]
 8001164:	2380      	movs	r3, #128	; 0x80
 8001166:	039b      	lsls	r3, r3, #14
 8001168:	4013      	ands	r3, r2
 800116a:	d003      	beq.n	8001174 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	4313      	orrs	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001174:	4b08      	ldr	r3, [pc, #32]	; (8001198 <HAL_GPIO_Init+0x2b8>)
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	3301      	adds	r3, #1
 800117e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	40da      	lsrs	r2, r3
 8001188:	1e13      	subs	r3, r2, #0
 800118a:	d000      	beq.n	800118e <HAL_GPIO_Init+0x2ae>
 800118c:	e6b0      	b.n	8000ef0 <HAL_GPIO_Init+0x10>
  }
}
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	46bd      	mov	sp, r7
 8001192:	b006      	add	sp, #24
 8001194:	bd80      	pop	{r7, pc}
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	40021800 	.word	0x40021800
 800119c:	50000400 	.word	0x50000400
 80011a0:	50000800 	.word	0x50000800
 80011a4:	50000c00 	.word	0x50000c00

080011a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	0008      	movs	r0, r1
 80011b2:	0011      	movs	r1, r2
 80011b4:	1cbb      	adds	r3, r7, #2
 80011b6:	1c02      	adds	r2, r0, #0
 80011b8:	801a      	strh	r2, [r3, #0]
 80011ba:	1c7b      	adds	r3, r7, #1
 80011bc:	1c0a      	adds	r2, r1, #0
 80011be:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011c0:	1c7b      	adds	r3, r7, #1
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d004      	beq.n	80011d2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011c8:	1cbb      	adds	r3, r7, #2
 80011ca:	881a      	ldrh	r2, [r3, #0]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011d0:	e003      	b.n	80011da <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011d2:	1cbb      	adds	r3, r7, #2
 80011d4:	881a      	ldrh	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011da:	46c0      	nop			; (mov r8, r8)
 80011dc:	46bd      	mov	sp, r7
 80011de:	b002      	add	sp, #8
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80011ec:	4b19      	ldr	r3, [pc, #100]	; (8001254 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a19      	ldr	r2, [pc, #100]	; (8001258 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80011f2:	4013      	ands	r3, r2
 80011f4:	0019      	movs	r1, r3
 80011f6:	4b17      	ldr	r3, [pc, #92]	; (8001254 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	430a      	orrs	r2, r1
 80011fc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	2380      	movs	r3, #128	; 0x80
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	429a      	cmp	r2, r3
 8001206:	d11f      	bne.n	8001248 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8001208:	4b14      	ldr	r3, [pc, #80]	; (800125c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	0013      	movs	r3, r2
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	189b      	adds	r3, r3, r2
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	4912      	ldr	r1, [pc, #72]	; (8001260 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001216:	0018      	movs	r0, r3
 8001218:	f7fe ff74 	bl	8000104 <__udivsi3>
 800121c:	0003      	movs	r3, r0
 800121e:	3301      	adds	r3, #1
 8001220:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001222:	e008      	b.n	8001236 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d003      	beq.n	8001232 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	3b01      	subs	r3, #1
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	e001      	b.n	8001236 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001232:	2303      	movs	r3, #3
 8001234:	e009      	b.n	800124a <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001236:	4b07      	ldr	r3, [pc, #28]	; (8001254 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001238:	695a      	ldr	r2, [r3, #20]
 800123a:	2380      	movs	r3, #128	; 0x80
 800123c:	00db      	lsls	r3, r3, #3
 800123e:	401a      	ands	r2, r3
 8001240:	2380      	movs	r3, #128	; 0x80
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	429a      	cmp	r2, r3
 8001246:	d0ed      	beq.n	8001224 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001248:	2300      	movs	r3, #0
}
 800124a:	0018      	movs	r0, r3
 800124c:	46bd      	mov	sp, r7
 800124e:	b004      	add	sp, #16
 8001250:	bd80      	pop	{r7, pc}
 8001252:	46c0      	nop			; (mov r8, r8)
 8001254:	40007000 	.word	0x40007000
 8001258:	fffff9ff 	.word	0xfffff9ff
 800125c:	20000000 	.word	0x20000000
 8001260:	000f4240 	.word	0x000f4240

08001264 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001268:	4b03      	ldr	r3, [pc, #12]	; (8001278 <LL_RCC_GetAPB1Prescaler+0x14>)
 800126a:	689a      	ldr	r2, [r3, #8]
 800126c:	23e0      	movs	r3, #224	; 0xe0
 800126e:	01db      	lsls	r3, r3, #7
 8001270:	4013      	ands	r3, r2
}
 8001272:	0018      	movs	r0, r3
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40021000 	.word	0x40021000

0800127c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b088      	sub	sp, #32
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d101      	bne.n	800128e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e304      	b.n	8001898 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2201      	movs	r2, #1
 8001294:	4013      	ands	r3, r2
 8001296:	d100      	bne.n	800129a <HAL_RCC_OscConfig+0x1e>
 8001298:	e07c      	b.n	8001394 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800129a:	4bc3      	ldr	r3, [pc, #780]	; (80015a8 <HAL_RCC_OscConfig+0x32c>)
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	2238      	movs	r2, #56	; 0x38
 80012a0:	4013      	ands	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012a4:	4bc0      	ldr	r3, [pc, #768]	; (80015a8 <HAL_RCC_OscConfig+0x32c>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	2203      	movs	r2, #3
 80012aa:	4013      	ands	r3, r2
 80012ac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	2b10      	cmp	r3, #16
 80012b2:	d102      	bne.n	80012ba <HAL_RCC_OscConfig+0x3e>
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	2b03      	cmp	r3, #3
 80012b8:	d002      	beq.n	80012c0 <HAL_RCC_OscConfig+0x44>
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	2b08      	cmp	r3, #8
 80012be:	d10b      	bne.n	80012d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012c0:	4bb9      	ldr	r3, [pc, #740]	; (80015a8 <HAL_RCC_OscConfig+0x32c>)
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	2380      	movs	r3, #128	; 0x80
 80012c6:	029b      	lsls	r3, r3, #10
 80012c8:	4013      	ands	r3, r2
 80012ca:	d062      	beq.n	8001392 <HAL_RCC_OscConfig+0x116>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d15e      	bne.n	8001392 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e2df      	b.n	8001898 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685a      	ldr	r2, [r3, #4]
 80012dc:	2380      	movs	r3, #128	; 0x80
 80012de:	025b      	lsls	r3, r3, #9
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d107      	bne.n	80012f4 <HAL_RCC_OscConfig+0x78>
 80012e4:	4bb0      	ldr	r3, [pc, #704]	; (80015a8 <HAL_RCC_OscConfig+0x32c>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	4baf      	ldr	r3, [pc, #700]	; (80015a8 <HAL_RCC_OscConfig+0x32c>)
 80012ea:	2180      	movs	r1, #128	; 0x80
 80012ec:	0249      	lsls	r1, r1, #9
 80012ee:	430a      	orrs	r2, r1
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	e020      	b.n	8001336 <HAL_RCC_OscConfig+0xba>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685a      	ldr	r2, [r3, #4]
 80012f8:	23a0      	movs	r3, #160	; 0xa0
 80012fa:	02db      	lsls	r3, r3, #11
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d10e      	bne.n	800131e <HAL_RCC_OscConfig+0xa2>
 8001300:	4ba9      	ldr	r3, [pc, #676]	; (80015a8 <HAL_RCC_OscConfig+0x32c>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	4ba8      	ldr	r3, [pc, #672]	; (80015a8 <HAL_RCC_OscConfig+0x32c>)
 8001306:	2180      	movs	r1, #128	; 0x80
 8001308:	02c9      	lsls	r1, r1, #11
 800130a:	430a      	orrs	r2, r1
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	4ba6      	ldr	r3, [pc, #664]	; (80015a8 <HAL_RCC_OscConfig+0x32c>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	4ba5      	ldr	r3, [pc, #660]	; (80015a8 <HAL_RCC_OscConfig+0x32c>)
 8001314:	2180      	movs	r1, #128	; 0x80
 8001316:	0249      	lsls	r1, r1, #9
 8001318:	430a      	orrs	r2, r1
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	e00b      	b.n	8001336 <HAL_RCC_OscConfig+0xba>
 800131e:	4ba2      	ldr	r3, [pc, #648]	; (80015a8 <HAL_RCC_OscConfig+0x32c>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	4ba1      	ldr	r3, [pc, #644]	; (80015a8 <HAL_RCC_OscConfig+0x32c>)
 8001324:	49a1      	ldr	r1, [pc, #644]	; (80015ac <HAL_RCC_OscConfig+0x330>)
 8001326:	400a      	ands	r2, r1
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	4b9f      	ldr	r3, [pc, #636]	; (80015a8 <HAL_RCC_OscConfig+0x32c>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	4b9e      	ldr	r3, [pc, #632]	; (80015a8 <HAL_RCC_OscConfig+0x32c>)
 8001330:	499f      	ldr	r1, [pc, #636]	; (80015b0 <HAL_RCC_OscConfig+0x334>)
 8001332:	400a      	ands	r2, r1
 8001334:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d014      	beq.n	8001368 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800133e:	f7ff fcc5 	bl	8000ccc <HAL_GetTick>
 8001342:	0003      	movs	r3, r0
 8001344:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001348:	f7ff fcc0 	bl	8000ccc <HAL_GetTick>
 800134c:	0002      	movs	r2, r0
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b64      	cmp	r3, #100	; 0x64
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e29e      	b.n	8001898 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800135a:	4b93      	ldr	r3, [pc, #588]	; (80015a8 <HAL_RCC_OscConfig+0x32c>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	2380      	movs	r3, #128	; 0x80
 8001360:	029b      	lsls	r3, r3, #10
 8001362:	4013      	ands	r3, r2
 8001364:	d0f0      	beq.n	8001348 <HAL_RCC_OscConfig+0xcc>
 8001366:	e015      	b.n	8001394 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001368:	f7ff fcb0 	bl	8000ccc <HAL_GetTick>
 800136c:	0003      	movs	r3, r0
 800136e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001370:	e008      	b.n	8001384 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001372:	f7ff fcab 	bl	8000ccc <HAL_GetTick>
 8001376:	0002      	movs	r2, r0
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	2b64      	cmp	r3, #100	; 0x64
 800137e:	d901      	bls.n	8001384 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001380:	2303      	movs	r3, #3
 8001382:	e289      	b.n	8001898 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001384:	4b88      	ldr	r3, [pc, #544]	; (80015a8 <HAL_RCC_OscConfig+0x32c>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	2380      	movs	r3, #128	; 0x80
 800138a:	029b      	lsls	r3, r3, #10
 800138c:	4013      	ands	r3, r2
 800138e:	d1f0      	bne.n	8001372 <HAL_RCC_OscConfig+0xf6>
 8001390:	e000      	b.n	8001394 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001392:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2202      	movs	r2, #2
 800139a:	4013      	ands	r3, r2
 800139c:	d100      	bne.n	80013a0 <HAL_RCC_OscConfig+0x124>
 800139e:	e099      	b.n	80014d4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013a0:	4b81      	ldr	r3, [pc, #516]	; (80015a8 <HAL_RCC_OscConfig+0x32c>)
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	2238      	movs	r2, #56	; 0x38
 80013a6:	4013      	ands	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013aa:	4b7f      	ldr	r3, [pc, #508]	; (80015a8 <HAL_RCC_OscConfig+0x32c>)
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	2203      	movs	r2, #3
 80013b0:	4013      	ands	r3, r2
 80013b2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	2b10      	cmp	r3, #16
 80013b8:	d102      	bne.n	80013c0 <HAL_RCC_OscConfig+0x144>
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d002      	beq.n	80013c6 <HAL_RCC_OscConfig+0x14a>
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d135      	bne.n	8001432 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013c6:	4b78      	ldr	r3, [pc, #480]	; (80015a8 <HAL_RCC_OscConfig+0x32c>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	2380      	movs	r3, #128	; 0x80
 80013cc:	00db      	lsls	r3, r3, #3
 80013ce:	4013      	ands	r3, r2
 80013d0:	d005      	beq.n	80013de <HAL_RCC_OscConfig+0x162>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d101      	bne.n	80013de <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e25c      	b.n	8001898 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013de:	4b72      	ldr	r3, [pc, #456]	; (80015a8 <HAL_RCC_OscConfig+0x32c>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	4a74      	ldr	r2, [pc, #464]	; (80015b4 <HAL_RCC_OscConfig+0x338>)
 80013e4:	4013      	ands	r3, r2
 80013e6:	0019      	movs	r1, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	695b      	ldr	r3, [r3, #20]
 80013ec:	021a      	lsls	r2, r3, #8
 80013ee:	4b6e      	ldr	r3, [pc, #440]	; (80015a8 <HAL_RCC_OscConfig+0x32c>)
 80013f0:	430a      	orrs	r2, r1
 80013f2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d112      	bne.n	8001420 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80013fa:	4b6b      	ldr	r3, [pc, #428]	; (80015a8 <HAL_RCC_OscConfig+0x32c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a6e      	ldr	r2, [pc, #440]	; (80015b8 <HAL_RCC_OscConfig+0x33c>)
 8001400:	4013      	ands	r3, r2
 8001402:	0019      	movs	r1, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	691a      	ldr	r2, [r3, #16]
 8001408:	4b67      	ldr	r3, [pc, #412]	; (80015a8 <HAL_RCC_OscConfig+0x32c>)
 800140a:	430a      	orrs	r2, r1
 800140c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800140e:	4b66      	ldr	r3, [pc, #408]	; (80015a8 <HAL_RCC_OscConfig+0x32c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	0adb      	lsrs	r3, r3, #11
 8001414:	2207      	movs	r2, #7
 8001416:	4013      	ands	r3, r2
 8001418:	4a68      	ldr	r2, [pc, #416]	; (80015bc <HAL_RCC_OscConfig+0x340>)
 800141a:	40da      	lsrs	r2, r3
 800141c:	4b68      	ldr	r3, [pc, #416]	; (80015c0 <HAL_RCC_OscConfig+0x344>)
 800141e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001420:	4b68      	ldr	r3, [pc, #416]	; (80015c4 <HAL_RCC_OscConfig+0x348>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	0018      	movs	r0, r3
 8001426:	f7ff fbf7 	bl	8000c18 <HAL_InitTick>
 800142a:	1e03      	subs	r3, r0, #0
 800142c:	d051      	beq.n	80014d2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e232      	b.n	8001898 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d030      	beq.n	800149c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800143a:	4b5b      	ldr	r3, [pc, #364]	; (80015a8 <HAL_RCC_OscConfig+0x32c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a5e      	ldr	r2, [pc, #376]	; (80015b8 <HAL_RCC_OscConfig+0x33c>)
 8001440:	4013      	ands	r3, r2
 8001442:	0019      	movs	r1, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	691a      	ldr	r2, [r3, #16]
 8001448:	4b57      	ldr	r3, [pc, #348]	; (80015a8 <HAL_RCC_OscConfig+0x32c>)
 800144a:	430a      	orrs	r2, r1
 800144c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800144e:	4b56      	ldr	r3, [pc, #344]	; (80015a8 <HAL_RCC_OscConfig+0x32c>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	4b55      	ldr	r3, [pc, #340]	; (80015a8 <HAL_RCC_OscConfig+0x32c>)
 8001454:	2180      	movs	r1, #128	; 0x80
 8001456:	0049      	lsls	r1, r1, #1
 8001458:	430a      	orrs	r2, r1
 800145a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800145c:	f7ff fc36 	bl	8000ccc <HAL_GetTick>
 8001460:	0003      	movs	r3, r0
 8001462:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001464:	e008      	b.n	8001478 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001466:	f7ff fc31 	bl	8000ccc <HAL_GetTick>
 800146a:	0002      	movs	r2, r0
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d901      	bls.n	8001478 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e20f      	b.n	8001898 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001478:	4b4b      	ldr	r3, [pc, #300]	; (80015a8 <HAL_RCC_OscConfig+0x32c>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	2380      	movs	r3, #128	; 0x80
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	4013      	ands	r3, r2
 8001482:	d0f0      	beq.n	8001466 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001484:	4b48      	ldr	r3, [pc, #288]	; (80015a8 <HAL_RCC_OscConfig+0x32c>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	4a4a      	ldr	r2, [pc, #296]	; (80015b4 <HAL_RCC_OscConfig+0x338>)
 800148a:	4013      	ands	r3, r2
 800148c:	0019      	movs	r1, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	695b      	ldr	r3, [r3, #20]
 8001492:	021a      	lsls	r2, r3, #8
 8001494:	4b44      	ldr	r3, [pc, #272]	; (80015a8 <HAL_RCC_OscConfig+0x32c>)
 8001496:	430a      	orrs	r2, r1
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	e01b      	b.n	80014d4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800149c:	4b42      	ldr	r3, [pc, #264]	; (80015a8 <HAL_RCC_OscConfig+0x32c>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	4b41      	ldr	r3, [pc, #260]	; (80015a8 <HAL_RCC_OscConfig+0x32c>)
 80014a2:	4949      	ldr	r1, [pc, #292]	; (80015c8 <HAL_RCC_OscConfig+0x34c>)
 80014a4:	400a      	ands	r2, r1
 80014a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a8:	f7ff fc10 	bl	8000ccc <HAL_GetTick>
 80014ac:	0003      	movs	r3, r0
 80014ae:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014b0:	e008      	b.n	80014c4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014b2:	f7ff fc0b 	bl	8000ccc <HAL_GetTick>
 80014b6:	0002      	movs	r2, r0
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d901      	bls.n	80014c4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e1e9      	b.n	8001898 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014c4:	4b38      	ldr	r3, [pc, #224]	; (80015a8 <HAL_RCC_OscConfig+0x32c>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	2380      	movs	r3, #128	; 0x80
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	4013      	ands	r3, r2
 80014ce:	d1f0      	bne.n	80014b2 <HAL_RCC_OscConfig+0x236>
 80014d0:	e000      	b.n	80014d4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014d2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2208      	movs	r2, #8
 80014da:	4013      	ands	r3, r2
 80014dc:	d047      	beq.n	800156e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80014de:	4b32      	ldr	r3, [pc, #200]	; (80015a8 <HAL_RCC_OscConfig+0x32c>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	2238      	movs	r2, #56	; 0x38
 80014e4:	4013      	ands	r3, r2
 80014e6:	2b18      	cmp	r3, #24
 80014e8:	d10a      	bne.n	8001500 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80014ea:	4b2f      	ldr	r3, [pc, #188]	; (80015a8 <HAL_RCC_OscConfig+0x32c>)
 80014ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ee:	2202      	movs	r2, #2
 80014f0:	4013      	ands	r3, r2
 80014f2:	d03c      	beq.n	800156e <HAL_RCC_OscConfig+0x2f2>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d138      	bne.n	800156e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e1cb      	b.n	8001898 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d019      	beq.n	800153c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001508:	4b27      	ldr	r3, [pc, #156]	; (80015a8 <HAL_RCC_OscConfig+0x32c>)
 800150a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800150c:	4b26      	ldr	r3, [pc, #152]	; (80015a8 <HAL_RCC_OscConfig+0x32c>)
 800150e:	2101      	movs	r1, #1
 8001510:	430a      	orrs	r2, r1
 8001512:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001514:	f7ff fbda 	bl	8000ccc <HAL_GetTick>
 8001518:	0003      	movs	r3, r0
 800151a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800151c:	e008      	b.n	8001530 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800151e:	f7ff fbd5 	bl	8000ccc <HAL_GetTick>
 8001522:	0002      	movs	r2, r0
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e1b3      	b.n	8001898 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001530:	4b1d      	ldr	r3, [pc, #116]	; (80015a8 <HAL_RCC_OscConfig+0x32c>)
 8001532:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001534:	2202      	movs	r2, #2
 8001536:	4013      	ands	r3, r2
 8001538:	d0f1      	beq.n	800151e <HAL_RCC_OscConfig+0x2a2>
 800153a:	e018      	b.n	800156e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800153c:	4b1a      	ldr	r3, [pc, #104]	; (80015a8 <HAL_RCC_OscConfig+0x32c>)
 800153e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001540:	4b19      	ldr	r3, [pc, #100]	; (80015a8 <HAL_RCC_OscConfig+0x32c>)
 8001542:	2101      	movs	r1, #1
 8001544:	438a      	bics	r2, r1
 8001546:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001548:	f7ff fbc0 	bl	8000ccc <HAL_GetTick>
 800154c:	0003      	movs	r3, r0
 800154e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001550:	e008      	b.n	8001564 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001552:	f7ff fbbb 	bl	8000ccc <HAL_GetTick>
 8001556:	0002      	movs	r2, r0
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b02      	cmp	r3, #2
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e199      	b.n	8001898 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001564:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <HAL_RCC_OscConfig+0x32c>)
 8001566:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001568:	2202      	movs	r2, #2
 800156a:	4013      	ands	r3, r2
 800156c:	d1f1      	bne.n	8001552 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2204      	movs	r2, #4
 8001574:	4013      	ands	r3, r2
 8001576:	d100      	bne.n	800157a <HAL_RCC_OscConfig+0x2fe>
 8001578:	e0c6      	b.n	8001708 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800157a:	231f      	movs	r3, #31
 800157c:	18fb      	adds	r3, r7, r3
 800157e:	2200      	movs	r2, #0
 8001580:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001582:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <HAL_RCC_OscConfig+0x32c>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	2238      	movs	r2, #56	; 0x38
 8001588:	4013      	ands	r3, r2
 800158a:	2b20      	cmp	r3, #32
 800158c:	d11e      	bne.n	80015cc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <HAL_RCC_OscConfig+0x32c>)
 8001590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001592:	2202      	movs	r2, #2
 8001594:	4013      	ands	r3, r2
 8001596:	d100      	bne.n	800159a <HAL_RCC_OscConfig+0x31e>
 8001598:	e0b6      	b.n	8001708 <HAL_RCC_OscConfig+0x48c>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d000      	beq.n	80015a4 <HAL_RCC_OscConfig+0x328>
 80015a2:	e0b1      	b.n	8001708 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e177      	b.n	8001898 <HAL_RCC_OscConfig+0x61c>
 80015a8:	40021000 	.word	0x40021000
 80015ac:	fffeffff 	.word	0xfffeffff
 80015b0:	fffbffff 	.word	0xfffbffff
 80015b4:	ffff80ff 	.word	0xffff80ff
 80015b8:	ffffc7ff 	.word	0xffffc7ff
 80015bc:	00f42400 	.word	0x00f42400
 80015c0:	20000000 	.word	0x20000000
 80015c4:	20000004 	.word	0x20000004
 80015c8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80015cc:	4bb4      	ldr	r3, [pc, #720]	; (80018a0 <HAL_RCC_OscConfig+0x624>)
 80015ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015d0:	2380      	movs	r3, #128	; 0x80
 80015d2:	055b      	lsls	r3, r3, #21
 80015d4:	4013      	ands	r3, r2
 80015d6:	d101      	bne.n	80015dc <HAL_RCC_OscConfig+0x360>
 80015d8:	2301      	movs	r3, #1
 80015da:	e000      	b.n	80015de <HAL_RCC_OscConfig+0x362>
 80015dc:	2300      	movs	r3, #0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d011      	beq.n	8001606 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80015e2:	4baf      	ldr	r3, [pc, #700]	; (80018a0 <HAL_RCC_OscConfig+0x624>)
 80015e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015e6:	4bae      	ldr	r3, [pc, #696]	; (80018a0 <HAL_RCC_OscConfig+0x624>)
 80015e8:	2180      	movs	r1, #128	; 0x80
 80015ea:	0549      	lsls	r1, r1, #21
 80015ec:	430a      	orrs	r2, r1
 80015ee:	63da      	str	r2, [r3, #60]	; 0x3c
 80015f0:	4bab      	ldr	r3, [pc, #684]	; (80018a0 <HAL_RCC_OscConfig+0x624>)
 80015f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015f4:	2380      	movs	r3, #128	; 0x80
 80015f6:	055b      	lsls	r3, r3, #21
 80015f8:	4013      	ands	r3, r2
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80015fe:	231f      	movs	r3, #31
 8001600:	18fb      	adds	r3, r7, r3
 8001602:	2201      	movs	r2, #1
 8001604:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001606:	4ba7      	ldr	r3, [pc, #668]	; (80018a4 <HAL_RCC_OscConfig+0x628>)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	2380      	movs	r3, #128	; 0x80
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	4013      	ands	r3, r2
 8001610:	d11a      	bne.n	8001648 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001612:	4ba4      	ldr	r3, [pc, #656]	; (80018a4 <HAL_RCC_OscConfig+0x628>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	4ba3      	ldr	r3, [pc, #652]	; (80018a4 <HAL_RCC_OscConfig+0x628>)
 8001618:	2180      	movs	r1, #128	; 0x80
 800161a:	0049      	lsls	r1, r1, #1
 800161c:	430a      	orrs	r2, r1
 800161e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001620:	f7ff fb54 	bl	8000ccc <HAL_GetTick>
 8001624:	0003      	movs	r3, r0
 8001626:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001628:	e008      	b.n	800163c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800162a:	f7ff fb4f 	bl	8000ccc <HAL_GetTick>
 800162e:	0002      	movs	r2, r0
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e12d      	b.n	8001898 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800163c:	4b99      	ldr	r3, [pc, #612]	; (80018a4 <HAL_RCC_OscConfig+0x628>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	2380      	movs	r3, #128	; 0x80
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	4013      	ands	r3, r2
 8001646:	d0f0      	beq.n	800162a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d106      	bne.n	800165e <HAL_RCC_OscConfig+0x3e2>
 8001650:	4b93      	ldr	r3, [pc, #588]	; (80018a0 <HAL_RCC_OscConfig+0x624>)
 8001652:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001654:	4b92      	ldr	r3, [pc, #584]	; (80018a0 <HAL_RCC_OscConfig+0x624>)
 8001656:	2101      	movs	r1, #1
 8001658:	430a      	orrs	r2, r1
 800165a:	65da      	str	r2, [r3, #92]	; 0x5c
 800165c:	e01c      	b.n	8001698 <HAL_RCC_OscConfig+0x41c>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	2b05      	cmp	r3, #5
 8001664:	d10c      	bne.n	8001680 <HAL_RCC_OscConfig+0x404>
 8001666:	4b8e      	ldr	r3, [pc, #568]	; (80018a0 <HAL_RCC_OscConfig+0x624>)
 8001668:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800166a:	4b8d      	ldr	r3, [pc, #564]	; (80018a0 <HAL_RCC_OscConfig+0x624>)
 800166c:	2104      	movs	r1, #4
 800166e:	430a      	orrs	r2, r1
 8001670:	65da      	str	r2, [r3, #92]	; 0x5c
 8001672:	4b8b      	ldr	r3, [pc, #556]	; (80018a0 <HAL_RCC_OscConfig+0x624>)
 8001674:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001676:	4b8a      	ldr	r3, [pc, #552]	; (80018a0 <HAL_RCC_OscConfig+0x624>)
 8001678:	2101      	movs	r1, #1
 800167a:	430a      	orrs	r2, r1
 800167c:	65da      	str	r2, [r3, #92]	; 0x5c
 800167e:	e00b      	b.n	8001698 <HAL_RCC_OscConfig+0x41c>
 8001680:	4b87      	ldr	r3, [pc, #540]	; (80018a0 <HAL_RCC_OscConfig+0x624>)
 8001682:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001684:	4b86      	ldr	r3, [pc, #536]	; (80018a0 <HAL_RCC_OscConfig+0x624>)
 8001686:	2101      	movs	r1, #1
 8001688:	438a      	bics	r2, r1
 800168a:	65da      	str	r2, [r3, #92]	; 0x5c
 800168c:	4b84      	ldr	r3, [pc, #528]	; (80018a0 <HAL_RCC_OscConfig+0x624>)
 800168e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001690:	4b83      	ldr	r3, [pc, #524]	; (80018a0 <HAL_RCC_OscConfig+0x624>)
 8001692:	2104      	movs	r1, #4
 8001694:	438a      	bics	r2, r1
 8001696:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d014      	beq.n	80016ca <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a0:	f7ff fb14 	bl	8000ccc <HAL_GetTick>
 80016a4:	0003      	movs	r3, r0
 80016a6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016a8:	e009      	b.n	80016be <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016aa:	f7ff fb0f 	bl	8000ccc <HAL_GetTick>
 80016ae:	0002      	movs	r2, r0
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	4a7c      	ldr	r2, [pc, #496]	; (80018a8 <HAL_RCC_OscConfig+0x62c>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e0ec      	b.n	8001898 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016be:	4b78      	ldr	r3, [pc, #480]	; (80018a0 <HAL_RCC_OscConfig+0x624>)
 80016c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c2:	2202      	movs	r2, #2
 80016c4:	4013      	ands	r3, r2
 80016c6:	d0f0      	beq.n	80016aa <HAL_RCC_OscConfig+0x42e>
 80016c8:	e013      	b.n	80016f2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ca:	f7ff faff 	bl	8000ccc <HAL_GetTick>
 80016ce:	0003      	movs	r3, r0
 80016d0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016d2:	e009      	b.n	80016e8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016d4:	f7ff fafa 	bl	8000ccc <HAL_GetTick>
 80016d8:	0002      	movs	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	4a72      	ldr	r2, [pc, #456]	; (80018a8 <HAL_RCC_OscConfig+0x62c>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d901      	bls.n	80016e8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e0d7      	b.n	8001898 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016e8:	4b6d      	ldr	r3, [pc, #436]	; (80018a0 <HAL_RCC_OscConfig+0x624>)
 80016ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ec:	2202      	movs	r2, #2
 80016ee:	4013      	ands	r3, r2
 80016f0:	d1f0      	bne.n	80016d4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80016f2:	231f      	movs	r3, #31
 80016f4:	18fb      	adds	r3, r7, r3
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d105      	bne.n	8001708 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80016fc:	4b68      	ldr	r3, [pc, #416]	; (80018a0 <HAL_RCC_OscConfig+0x624>)
 80016fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001700:	4b67      	ldr	r3, [pc, #412]	; (80018a0 <HAL_RCC_OscConfig+0x624>)
 8001702:	496a      	ldr	r1, [pc, #424]	; (80018ac <HAL_RCC_OscConfig+0x630>)
 8001704:	400a      	ands	r2, r1
 8001706:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	69db      	ldr	r3, [r3, #28]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d100      	bne.n	8001712 <HAL_RCC_OscConfig+0x496>
 8001710:	e0c1      	b.n	8001896 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001712:	4b63      	ldr	r3, [pc, #396]	; (80018a0 <HAL_RCC_OscConfig+0x624>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	2238      	movs	r2, #56	; 0x38
 8001718:	4013      	ands	r3, r2
 800171a:	2b10      	cmp	r3, #16
 800171c:	d100      	bne.n	8001720 <HAL_RCC_OscConfig+0x4a4>
 800171e:	e081      	b.n	8001824 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	69db      	ldr	r3, [r3, #28]
 8001724:	2b02      	cmp	r3, #2
 8001726:	d156      	bne.n	80017d6 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001728:	4b5d      	ldr	r3, [pc, #372]	; (80018a0 <HAL_RCC_OscConfig+0x624>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	4b5c      	ldr	r3, [pc, #368]	; (80018a0 <HAL_RCC_OscConfig+0x624>)
 800172e:	4960      	ldr	r1, [pc, #384]	; (80018b0 <HAL_RCC_OscConfig+0x634>)
 8001730:	400a      	ands	r2, r1
 8001732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001734:	f7ff faca 	bl	8000ccc <HAL_GetTick>
 8001738:	0003      	movs	r3, r0
 800173a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800173c:	e008      	b.n	8001750 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800173e:	f7ff fac5 	bl	8000ccc <HAL_GetTick>
 8001742:	0002      	movs	r2, r0
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	2b02      	cmp	r3, #2
 800174a:	d901      	bls.n	8001750 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e0a3      	b.n	8001898 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001750:	4b53      	ldr	r3, [pc, #332]	; (80018a0 <HAL_RCC_OscConfig+0x624>)
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	2380      	movs	r3, #128	; 0x80
 8001756:	049b      	lsls	r3, r3, #18
 8001758:	4013      	ands	r3, r2
 800175a:	d1f0      	bne.n	800173e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800175c:	4b50      	ldr	r3, [pc, #320]	; (80018a0 <HAL_RCC_OscConfig+0x624>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	4a54      	ldr	r2, [pc, #336]	; (80018b4 <HAL_RCC_OscConfig+0x638>)
 8001762:	4013      	ands	r3, r2
 8001764:	0019      	movs	r1, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a1a      	ldr	r2, [r3, #32]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176e:	431a      	orrs	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001774:	021b      	lsls	r3, r3, #8
 8001776:	431a      	orrs	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177c:	431a      	orrs	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	431a      	orrs	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001788:	431a      	orrs	r2, r3
 800178a:	4b45      	ldr	r3, [pc, #276]	; (80018a0 <HAL_RCC_OscConfig+0x624>)
 800178c:	430a      	orrs	r2, r1
 800178e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001790:	4b43      	ldr	r3, [pc, #268]	; (80018a0 <HAL_RCC_OscConfig+0x624>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	4b42      	ldr	r3, [pc, #264]	; (80018a0 <HAL_RCC_OscConfig+0x624>)
 8001796:	2180      	movs	r1, #128	; 0x80
 8001798:	0449      	lsls	r1, r1, #17
 800179a:	430a      	orrs	r2, r1
 800179c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800179e:	4b40      	ldr	r3, [pc, #256]	; (80018a0 <HAL_RCC_OscConfig+0x624>)
 80017a0:	68da      	ldr	r2, [r3, #12]
 80017a2:	4b3f      	ldr	r3, [pc, #252]	; (80018a0 <HAL_RCC_OscConfig+0x624>)
 80017a4:	2180      	movs	r1, #128	; 0x80
 80017a6:	0549      	lsls	r1, r1, #21
 80017a8:	430a      	orrs	r2, r1
 80017aa:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ac:	f7ff fa8e 	bl	8000ccc <HAL_GetTick>
 80017b0:	0003      	movs	r3, r0
 80017b2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017b4:	e008      	b.n	80017c8 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017b6:	f7ff fa89 	bl	8000ccc <HAL_GetTick>
 80017ba:	0002      	movs	r2, r0
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e067      	b.n	8001898 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017c8:	4b35      	ldr	r3, [pc, #212]	; (80018a0 <HAL_RCC_OscConfig+0x624>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	2380      	movs	r3, #128	; 0x80
 80017ce:	049b      	lsls	r3, r3, #18
 80017d0:	4013      	ands	r3, r2
 80017d2:	d0f0      	beq.n	80017b6 <HAL_RCC_OscConfig+0x53a>
 80017d4:	e05f      	b.n	8001896 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017d6:	4b32      	ldr	r3, [pc, #200]	; (80018a0 <HAL_RCC_OscConfig+0x624>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	4b31      	ldr	r3, [pc, #196]	; (80018a0 <HAL_RCC_OscConfig+0x624>)
 80017dc:	4934      	ldr	r1, [pc, #208]	; (80018b0 <HAL_RCC_OscConfig+0x634>)
 80017de:	400a      	ands	r2, r1
 80017e0:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80017e2:	4b2f      	ldr	r3, [pc, #188]	; (80018a0 <HAL_RCC_OscConfig+0x624>)
 80017e4:	68da      	ldr	r2, [r3, #12]
 80017e6:	4b2e      	ldr	r3, [pc, #184]	; (80018a0 <HAL_RCC_OscConfig+0x624>)
 80017e8:	2103      	movs	r1, #3
 80017ea:	438a      	bics	r2, r1
 80017ec:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80017ee:	4b2c      	ldr	r3, [pc, #176]	; (80018a0 <HAL_RCC_OscConfig+0x624>)
 80017f0:	68da      	ldr	r2, [r3, #12]
 80017f2:	4b2b      	ldr	r3, [pc, #172]	; (80018a0 <HAL_RCC_OscConfig+0x624>)
 80017f4:	4930      	ldr	r1, [pc, #192]	; (80018b8 <HAL_RCC_OscConfig+0x63c>)
 80017f6:	400a      	ands	r2, r1
 80017f8:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017fa:	f7ff fa67 	bl	8000ccc <HAL_GetTick>
 80017fe:	0003      	movs	r3, r0
 8001800:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001804:	f7ff fa62 	bl	8000ccc <HAL_GetTick>
 8001808:	0002      	movs	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e040      	b.n	8001898 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001816:	4b22      	ldr	r3, [pc, #136]	; (80018a0 <HAL_RCC_OscConfig+0x624>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	049b      	lsls	r3, r3, #18
 800181e:	4013      	ands	r3, r2
 8001820:	d1f0      	bne.n	8001804 <HAL_RCC_OscConfig+0x588>
 8001822:	e038      	b.n	8001896 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	69db      	ldr	r3, [r3, #28]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d101      	bne.n	8001830 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e033      	b.n	8001898 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001830:	4b1b      	ldr	r3, [pc, #108]	; (80018a0 <HAL_RCC_OscConfig+0x624>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	2203      	movs	r2, #3
 800183a:	401a      	ands	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a1b      	ldr	r3, [r3, #32]
 8001840:	429a      	cmp	r2, r3
 8001842:	d126      	bne.n	8001892 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	2270      	movs	r2, #112	; 0x70
 8001848:	401a      	ands	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800184e:	429a      	cmp	r2, r3
 8001850:	d11f      	bne.n	8001892 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001852:	697a      	ldr	r2, [r7, #20]
 8001854:	23fe      	movs	r3, #254	; 0xfe
 8001856:	01db      	lsls	r3, r3, #7
 8001858:	401a      	ands	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185e:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001860:	429a      	cmp	r2, r3
 8001862:	d116      	bne.n	8001892 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001864:	697a      	ldr	r2, [r7, #20]
 8001866:	23f8      	movs	r3, #248	; 0xf8
 8001868:	039b      	lsls	r3, r3, #14
 800186a:	401a      	ands	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001870:	429a      	cmp	r2, r3
 8001872:	d10e      	bne.n	8001892 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001874:	697a      	ldr	r2, [r7, #20]
 8001876:	23e0      	movs	r3, #224	; 0xe0
 8001878:	051b      	lsls	r3, r3, #20
 800187a:	401a      	ands	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001880:	429a      	cmp	r2, r3
 8001882:	d106      	bne.n	8001892 <HAL_RCC_OscConfig+0x616>
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	0f5b      	lsrs	r3, r3, #29
 8001888:	075a      	lsls	r2, r3, #29
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800188e:	429a      	cmp	r2, r3
 8001890:	d001      	beq.n	8001896 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e000      	b.n	8001898 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8001896:	2300      	movs	r3, #0
}
 8001898:	0018      	movs	r0, r3
 800189a:	46bd      	mov	sp, r7
 800189c:	b008      	add	sp, #32
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40021000 	.word	0x40021000
 80018a4:	40007000 	.word	0x40007000
 80018a8:	00001388 	.word	0x00001388
 80018ac:	efffffff 	.word	0xefffffff
 80018b0:	feffffff 	.word	0xfeffffff
 80018b4:	11c1808c 	.word	0x11c1808c
 80018b8:	eefeffff 	.word	0xeefeffff

080018bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d101      	bne.n	80018d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e0e9      	b.n	8001aa4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018d0:	4b76      	ldr	r3, [pc, #472]	; (8001aac <HAL_RCC_ClockConfig+0x1f0>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2207      	movs	r2, #7
 80018d6:	4013      	ands	r3, r2
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d91e      	bls.n	800191c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018de:	4b73      	ldr	r3, [pc, #460]	; (8001aac <HAL_RCC_ClockConfig+0x1f0>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2207      	movs	r2, #7
 80018e4:	4393      	bics	r3, r2
 80018e6:	0019      	movs	r1, r3
 80018e8:	4b70      	ldr	r3, [pc, #448]	; (8001aac <HAL_RCC_ClockConfig+0x1f0>)
 80018ea:	683a      	ldr	r2, [r7, #0]
 80018ec:	430a      	orrs	r2, r1
 80018ee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80018f0:	f7ff f9ec 	bl	8000ccc <HAL_GetTick>
 80018f4:	0003      	movs	r3, r0
 80018f6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018f8:	e009      	b.n	800190e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018fa:	f7ff f9e7 	bl	8000ccc <HAL_GetTick>
 80018fe:	0002      	movs	r2, r0
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	4a6a      	ldr	r2, [pc, #424]	; (8001ab0 <HAL_RCC_ClockConfig+0x1f4>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d901      	bls.n	800190e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e0ca      	b.n	8001aa4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800190e:	4b67      	ldr	r3, [pc, #412]	; (8001aac <HAL_RCC_ClockConfig+0x1f0>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2207      	movs	r2, #7
 8001914:	4013      	ands	r3, r2
 8001916:	683a      	ldr	r2, [r7, #0]
 8001918:	429a      	cmp	r2, r3
 800191a:	d1ee      	bne.n	80018fa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2202      	movs	r2, #2
 8001922:	4013      	ands	r3, r2
 8001924:	d015      	beq.n	8001952 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2204      	movs	r2, #4
 800192c:	4013      	ands	r3, r2
 800192e:	d006      	beq.n	800193e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001930:	4b60      	ldr	r3, [pc, #384]	; (8001ab4 <HAL_RCC_ClockConfig+0x1f8>)
 8001932:	689a      	ldr	r2, [r3, #8]
 8001934:	4b5f      	ldr	r3, [pc, #380]	; (8001ab4 <HAL_RCC_ClockConfig+0x1f8>)
 8001936:	21e0      	movs	r1, #224	; 0xe0
 8001938:	01c9      	lsls	r1, r1, #7
 800193a:	430a      	orrs	r2, r1
 800193c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800193e:	4b5d      	ldr	r3, [pc, #372]	; (8001ab4 <HAL_RCC_ClockConfig+0x1f8>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	4a5d      	ldr	r2, [pc, #372]	; (8001ab8 <HAL_RCC_ClockConfig+0x1fc>)
 8001944:	4013      	ands	r3, r2
 8001946:	0019      	movs	r1, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	4b59      	ldr	r3, [pc, #356]	; (8001ab4 <HAL_RCC_ClockConfig+0x1f8>)
 800194e:	430a      	orrs	r2, r1
 8001950:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2201      	movs	r2, #1
 8001958:	4013      	ands	r3, r2
 800195a:	d057      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d107      	bne.n	8001974 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001964:	4b53      	ldr	r3, [pc, #332]	; (8001ab4 <HAL_RCC_ClockConfig+0x1f8>)
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	2380      	movs	r3, #128	; 0x80
 800196a:	029b      	lsls	r3, r3, #10
 800196c:	4013      	ands	r3, r2
 800196e:	d12b      	bne.n	80019c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e097      	b.n	8001aa4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	2b02      	cmp	r3, #2
 800197a:	d107      	bne.n	800198c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800197c:	4b4d      	ldr	r3, [pc, #308]	; (8001ab4 <HAL_RCC_ClockConfig+0x1f8>)
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	2380      	movs	r3, #128	; 0x80
 8001982:	049b      	lsls	r3, r3, #18
 8001984:	4013      	ands	r3, r2
 8001986:	d11f      	bne.n	80019c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e08b      	b.n	8001aa4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d107      	bne.n	80019a4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001994:	4b47      	ldr	r3, [pc, #284]	; (8001ab4 <HAL_RCC_ClockConfig+0x1f8>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	2380      	movs	r3, #128	; 0x80
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	4013      	ands	r3, r2
 800199e:	d113      	bne.n	80019c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e07f      	b.n	8001aa4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	2b03      	cmp	r3, #3
 80019aa:	d106      	bne.n	80019ba <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019ac:	4b41      	ldr	r3, [pc, #260]	; (8001ab4 <HAL_RCC_ClockConfig+0x1f8>)
 80019ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019b0:	2202      	movs	r2, #2
 80019b2:	4013      	ands	r3, r2
 80019b4:	d108      	bne.n	80019c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e074      	b.n	8001aa4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019ba:	4b3e      	ldr	r3, [pc, #248]	; (8001ab4 <HAL_RCC_ClockConfig+0x1f8>)
 80019bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019be:	2202      	movs	r2, #2
 80019c0:	4013      	ands	r3, r2
 80019c2:	d101      	bne.n	80019c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e06d      	b.n	8001aa4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019c8:	4b3a      	ldr	r3, [pc, #232]	; (8001ab4 <HAL_RCC_ClockConfig+0x1f8>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	2207      	movs	r2, #7
 80019ce:	4393      	bics	r3, r2
 80019d0:	0019      	movs	r1, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685a      	ldr	r2, [r3, #4]
 80019d6:	4b37      	ldr	r3, [pc, #220]	; (8001ab4 <HAL_RCC_ClockConfig+0x1f8>)
 80019d8:	430a      	orrs	r2, r1
 80019da:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019dc:	f7ff f976 	bl	8000ccc <HAL_GetTick>
 80019e0:	0003      	movs	r3, r0
 80019e2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019e4:	e009      	b.n	80019fa <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019e6:	f7ff f971 	bl	8000ccc <HAL_GetTick>
 80019ea:	0002      	movs	r2, r0
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	4a2f      	ldr	r2, [pc, #188]	; (8001ab0 <HAL_RCC_ClockConfig+0x1f4>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e054      	b.n	8001aa4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019fa:	4b2e      	ldr	r3, [pc, #184]	; (8001ab4 <HAL_RCC_ClockConfig+0x1f8>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	2238      	movs	r2, #56	; 0x38
 8001a00:	401a      	ands	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d1ec      	bne.n	80019e6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a0c:	4b27      	ldr	r3, [pc, #156]	; (8001aac <HAL_RCC_ClockConfig+0x1f0>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2207      	movs	r2, #7
 8001a12:	4013      	ands	r3, r2
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d21e      	bcs.n	8001a58 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a1a:	4b24      	ldr	r3, [pc, #144]	; (8001aac <HAL_RCC_ClockConfig+0x1f0>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2207      	movs	r2, #7
 8001a20:	4393      	bics	r3, r2
 8001a22:	0019      	movs	r1, r3
 8001a24:	4b21      	ldr	r3, [pc, #132]	; (8001aac <HAL_RCC_ClockConfig+0x1f0>)
 8001a26:	683a      	ldr	r2, [r7, #0]
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a2c:	f7ff f94e 	bl	8000ccc <HAL_GetTick>
 8001a30:	0003      	movs	r3, r0
 8001a32:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a34:	e009      	b.n	8001a4a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a36:	f7ff f949 	bl	8000ccc <HAL_GetTick>
 8001a3a:	0002      	movs	r2, r0
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	4a1b      	ldr	r2, [pc, #108]	; (8001ab0 <HAL_RCC_ClockConfig+0x1f4>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e02c      	b.n	8001aa4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a4a:	4b18      	ldr	r3, [pc, #96]	; (8001aac <HAL_RCC_ClockConfig+0x1f0>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2207      	movs	r2, #7
 8001a50:	4013      	ands	r3, r2
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d1ee      	bne.n	8001a36 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2204      	movs	r2, #4
 8001a5e:	4013      	ands	r3, r2
 8001a60:	d009      	beq.n	8001a76 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001a62:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <HAL_RCC_ClockConfig+0x1f8>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	4a15      	ldr	r2, [pc, #84]	; (8001abc <HAL_RCC_ClockConfig+0x200>)
 8001a68:	4013      	ands	r3, r2
 8001a6a:	0019      	movs	r1, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	68da      	ldr	r2, [r3, #12]
 8001a70:	4b10      	ldr	r3, [pc, #64]	; (8001ab4 <HAL_RCC_ClockConfig+0x1f8>)
 8001a72:	430a      	orrs	r2, r1
 8001a74:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001a76:	f000 f829 	bl	8001acc <HAL_RCC_GetSysClockFreq>
 8001a7a:	0001      	movs	r1, r0
 8001a7c:	4b0d      	ldr	r3, [pc, #52]	; (8001ab4 <HAL_RCC_ClockConfig+0x1f8>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	0a1b      	lsrs	r3, r3, #8
 8001a82:	220f      	movs	r2, #15
 8001a84:	401a      	ands	r2, r3
 8001a86:	4b0e      	ldr	r3, [pc, #56]	; (8001ac0 <HAL_RCC_ClockConfig+0x204>)
 8001a88:	0092      	lsls	r2, r2, #2
 8001a8a:	58d3      	ldr	r3, [r2, r3]
 8001a8c:	221f      	movs	r2, #31
 8001a8e:	4013      	ands	r3, r2
 8001a90:	000a      	movs	r2, r1
 8001a92:	40da      	lsrs	r2, r3
 8001a94:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <HAL_RCC_ClockConfig+0x208>)
 8001a96:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001a98:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <HAL_RCC_ClockConfig+0x20c>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	f7ff f8bb 	bl	8000c18 <HAL_InitTick>
 8001aa2:	0003      	movs	r3, r0
}
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	b004      	add	sp, #16
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40022000 	.word	0x40022000
 8001ab0:	00001388 	.word	0x00001388
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	fffff0ff 	.word	0xfffff0ff
 8001abc:	ffff8fff 	.word	0xffff8fff
 8001ac0:	080047f0 	.word	0x080047f0
 8001ac4:	20000000 	.word	0x20000000
 8001ac8:	20000004 	.word	0x20000004

08001acc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001ad2:	4b3c      	ldr	r3, [pc, #240]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	2238      	movs	r2, #56	; 0x38
 8001ad8:	4013      	ands	r3, r2
 8001ada:	d10f      	bne.n	8001afc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001adc:	4b39      	ldr	r3, [pc, #228]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	0adb      	lsrs	r3, r3, #11
 8001ae2:	2207      	movs	r2, #7
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	409a      	lsls	r2, r3
 8001aea:	0013      	movs	r3, r2
 8001aec:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001aee:	6839      	ldr	r1, [r7, #0]
 8001af0:	4835      	ldr	r0, [pc, #212]	; (8001bc8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001af2:	f7fe fb07 	bl	8000104 <__udivsi3>
 8001af6:	0003      	movs	r3, r0
 8001af8:	613b      	str	r3, [r7, #16]
 8001afa:	e05d      	b.n	8001bb8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001afc:	4b31      	ldr	r3, [pc, #196]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	2238      	movs	r2, #56	; 0x38
 8001b02:	4013      	ands	r3, r2
 8001b04:	2b08      	cmp	r3, #8
 8001b06:	d102      	bne.n	8001b0e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b08:	4b30      	ldr	r3, [pc, #192]	; (8001bcc <HAL_RCC_GetSysClockFreq+0x100>)
 8001b0a:	613b      	str	r3, [r7, #16]
 8001b0c:	e054      	b.n	8001bb8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001b0e:	4b2d      	ldr	r3, [pc, #180]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	2238      	movs	r2, #56	; 0x38
 8001b14:	4013      	ands	r3, r2
 8001b16:	2b10      	cmp	r3, #16
 8001b18:	d138      	bne.n	8001b8c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001b1a:	4b2a      	ldr	r3, [pc, #168]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	2203      	movs	r2, #3
 8001b20:	4013      	ands	r3, r2
 8001b22:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b24:	4b27      	ldr	r3, [pc, #156]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	091b      	lsrs	r3, r3, #4
 8001b2a:	2207      	movs	r2, #7
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	3301      	adds	r3, #1
 8001b30:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2b03      	cmp	r3, #3
 8001b36:	d10d      	bne.n	8001b54 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b38:	68b9      	ldr	r1, [r7, #8]
 8001b3a:	4824      	ldr	r0, [pc, #144]	; (8001bcc <HAL_RCC_GetSysClockFreq+0x100>)
 8001b3c:	f7fe fae2 	bl	8000104 <__udivsi3>
 8001b40:	0003      	movs	r3, r0
 8001b42:	0019      	movs	r1, r3
 8001b44:	4b1f      	ldr	r3, [pc, #124]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	0a1b      	lsrs	r3, r3, #8
 8001b4a:	227f      	movs	r2, #127	; 0x7f
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	434b      	muls	r3, r1
 8001b50:	617b      	str	r3, [r7, #20]
        break;
 8001b52:	e00d      	b.n	8001b70 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001b54:	68b9      	ldr	r1, [r7, #8]
 8001b56:	481c      	ldr	r0, [pc, #112]	; (8001bc8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b58:	f7fe fad4 	bl	8000104 <__udivsi3>
 8001b5c:	0003      	movs	r3, r0
 8001b5e:	0019      	movs	r1, r3
 8001b60:	4b18      	ldr	r3, [pc, #96]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	0a1b      	lsrs	r3, r3, #8
 8001b66:	227f      	movs	r2, #127	; 0x7f
 8001b68:	4013      	ands	r3, r2
 8001b6a:	434b      	muls	r3, r1
 8001b6c:	617b      	str	r3, [r7, #20]
        break;
 8001b6e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001b70:	4b14      	ldr	r3, [pc, #80]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	0f5b      	lsrs	r3, r3, #29
 8001b76:	2207      	movs	r2, #7
 8001b78:	4013      	ands	r3, r2
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001b7e:	6879      	ldr	r1, [r7, #4]
 8001b80:	6978      	ldr	r0, [r7, #20]
 8001b82:	f7fe fabf 	bl	8000104 <__udivsi3>
 8001b86:	0003      	movs	r3, r0
 8001b88:	613b      	str	r3, [r7, #16]
 8001b8a:	e015      	b.n	8001bb8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001b8c:	4b0d      	ldr	r3, [pc, #52]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	2238      	movs	r2, #56	; 0x38
 8001b92:	4013      	ands	r3, r2
 8001b94:	2b20      	cmp	r3, #32
 8001b96:	d103      	bne.n	8001ba0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001b98:	2380      	movs	r3, #128	; 0x80
 8001b9a:	021b      	lsls	r3, r3, #8
 8001b9c:	613b      	str	r3, [r7, #16]
 8001b9e:	e00b      	b.n	8001bb8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001ba0:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	2238      	movs	r2, #56	; 0x38
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	2b18      	cmp	r3, #24
 8001baa:	d103      	bne.n	8001bb4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001bac:	23fa      	movs	r3, #250	; 0xfa
 8001bae:	01db      	lsls	r3, r3, #7
 8001bb0:	613b      	str	r3, [r7, #16]
 8001bb2:	e001      	b.n	8001bb8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001bb8:	693b      	ldr	r3, [r7, #16]
}
 8001bba:	0018      	movs	r0, r3
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	b006      	add	sp, #24
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	46c0      	nop			; (mov r8, r8)
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	00f42400 	.word	0x00f42400
 8001bcc:	007a1200 	.word	0x007a1200

08001bd0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bd4:	4b02      	ldr	r3, [pc, #8]	; (8001be0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
}
 8001bd8:	0018      	movs	r0, r3
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	46c0      	nop			; (mov r8, r8)
 8001be0:	20000000 	.word	0x20000000

08001be4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001be4:	b5b0      	push	{r4, r5, r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001be8:	f7ff fff2 	bl	8001bd0 <HAL_RCC_GetHCLKFreq>
 8001bec:	0004      	movs	r4, r0
 8001bee:	f7ff fb39 	bl	8001264 <LL_RCC_GetAPB1Prescaler>
 8001bf2:	0003      	movs	r3, r0
 8001bf4:	0b1a      	lsrs	r2, r3, #12
 8001bf6:	4b05      	ldr	r3, [pc, #20]	; (8001c0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001bf8:	0092      	lsls	r2, r2, #2
 8001bfa:	58d3      	ldr	r3, [r2, r3]
 8001bfc:	221f      	movs	r2, #31
 8001bfe:	4013      	ands	r3, r2
 8001c00:	40dc      	lsrs	r4, r3
 8001c02:	0023      	movs	r3, r4
}
 8001c04:	0018      	movs	r0, r3
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bdb0      	pop	{r4, r5, r7, pc}
 8001c0a:	46c0      	nop			; (mov r8, r8)
 8001c0c:	08004830 	.word	0x08004830

08001c10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001c18:	2313      	movs	r3, #19
 8001c1a:	18fb      	adds	r3, r7, r3
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c20:	2312      	movs	r3, #18
 8001c22:	18fb      	adds	r3, r7, r3
 8001c24:	2200      	movs	r2, #0
 8001c26:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	2380      	movs	r3, #128	; 0x80
 8001c2e:	029b      	lsls	r3, r3, #10
 8001c30:	4013      	ands	r3, r2
 8001c32:	d100      	bne.n	8001c36 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001c34:	e0a4      	b.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c36:	2311      	movs	r3, #17
 8001c38:	18fb      	adds	r3, r7, r3
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c3e:	4bc3      	ldr	r3, [pc, #780]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c42:	2380      	movs	r3, #128	; 0x80
 8001c44:	055b      	lsls	r3, r3, #21
 8001c46:	4013      	ands	r3, r2
 8001c48:	d111      	bne.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c4a:	4bc0      	ldr	r3, [pc, #768]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c4e:	4bbf      	ldr	r3, [pc, #764]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c50:	2180      	movs	r1, #128	; 0x80
 8001c52:	0549      	lsls	r1, r1, #21
 8001c54:	430a      	orrs	r2, r1
 8001c56:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c58:	4bbc      	ldr	r3, [pc, #752]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c5c:	2380      	movs	r3, #128	; 0x80
 8001c5e:	055b      	lsls	r3, r3, #21
 8001c60:	4013      	ands	r3, r2
 8001c62:	60bb      	str	r3, [r7, #8]
 8001c64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c66:	2311      	movs	r3, #17
 8001c68:	18fb      	adds	r3, r7, r3
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c6e:	4bb8      	ldr	r3, [pc, #736]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	4bb7      	ldr	r3, [pc, #732]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001c74:	2180      	movs	r1, #128	; 0x80
 8001c76:	0049      	lsls	r1, r1, #1
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c7c:	f7ff f826 	bl	8000ccc <HAL_GetTick>
 8001c80:	0003      	movs	r3, r0
 8001c82:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c84:	e00b      	b.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c86:	f7ff f821 	bl	8000ccc <HAL_GetTick>
 8001c8a:	0002      	movs	r2, r0
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d904      	bls.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 8001c94:	2313      	movs	r3, #19
 8001c96:	18fb      	adds	r3, r7, r3
 8001c98:	2203      	movs	r2, #3
 8001c9a:	701a      	strb	r2, [r3, #0]
        break;
 8001c9c:	e005      	b.n	8001caa <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c9e:	4bac      	ldr	r3, [pc, #688]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	2380      	movs	r3, #128	; 0x80
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	d0ed      	beq.n	8001c86 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 8001caa:	2313      	movs	r3, #19
 8001cac:	18fb      	adds	r3, r7, r3
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d154      	bne.n	8001d5e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001cb4:	4ba5      	ldr	r3, [pc, #660]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cb6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cb8:	23c0      	movs	r3, #192	; 0xc0
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d019      	beq.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0xea>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	697a      	ldr	r2, [r7, #20]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d014      	beq.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001cd0:	4b9e      	ldr	r3, [pc, #632]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd4:	4a9f      	ldr	r2, [pc, #636]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001cda:	4b9c      	ldr	r3, [pc, #624]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cdc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cde:	4b9b      	ldr	r3, [pc, #620]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ce0:	2180      	movs	r1, #128	; 0x80
 8001ce2:	0249      	lsls	r1, r1, #9
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001ce8:	4b98      	ldr	r3, [pc, #608]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cec:	4b97      	ldr	r3, [pc, #604]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cee:	499a      	ldr	r1, [pc, #616]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8001cf0:	400a      	ands	r2, r1
 8001cf2:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001cf4:	4b95      	ldr	r3, [pc, #596]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	4013      	ands	r3, r2
 8001d00:	d016      	beq.n	8001d30 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d02:	f7fe ffe3 	bl	8000ccc <HAL_GetTick>
 8001d06:	0003      	movs	r3, r0
 8001d08:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d0a:	e00c      	b.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d0c:	f7fe ffde 	bl	8000ccc <HAL_GetTick>
 8001d10:	0002      	movs	r2, r0
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	4a91      	ldr	r2, [pc, #580]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d904      	bls.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 8001d1c:	2313      	movs	r3, #19
 8001d1e:	18fb      	adds	r3, r7, r3
 8001d20:	2203      	movs	r2, #3
 8001d22:	701a      	strb	r2, [r3, #0]
            break;
 8001d24:	e004      	b.n	8001d30 <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d26:	4b89      	ldr	r3, [pc, #548]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d2a:	2202      	movs	r2, #2
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	d0ed      	beq.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 8001d30:	2313      	movs	r3, #19
 8001d32:	18fb      	adds	r3, r7, r3
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d10a      	bne.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d3a:	4b84      	ldr	r3, [pc, #528]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d3e:	4a85      	ldr	r2, [pc, #532]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001d40:	4013      	ands	r3, r2
 8001d42:	0019      	movs	r1, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d48:	4b80      	ldr	r3, [pc, #512]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d4e:	e00c      	b.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001d50:	2312      	movs	r3, #18
 8001d52:	18fb      	adds	r3, r7, r3
 8001d54:	2213      	movs	r2, #19
 8001d56:	18ba      	adds	r2, r7, r2
 8001d58:	7812      	ldrb	r2, [r2, #0]
 8001d5a:	701a      	strb	r2, [r3, #0]
 8001d5c:	e005      	b.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d5e:	2312      	movs	r3, #18
 8001d60:	18fb      	adds	r3, r7, r3
 8001d62:	2213      	movs	r2, #19
 8001d64:	18ba      	adds	r2, r7, r2
 8001d66:	7812      	ldrb	r2, [r2, #0]
 8001d68:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d6a:	2311      	movs	r3, #17
 8001d6c:	18fb      	adds	r3, r7, r3
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d105      	bne.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d74:	4b75      	ldr	r3, [pc, #468]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d78:	4b74      	ldr	r3, [pc, #464]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d7a:	4979      	ldr	r1, [pc, #484]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8001d7c:	400a      	ands	r2, r1
 8001d7e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2201      	movs	r2, #1
 8001d86:	4013      	ands	r3, r2
 8001d88:	d009      	beq.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d8a:	4b70      	ldr	r3, [pc, #448]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d8e:	2203      	movs	r2, #3
 8001d90:	4393      	bics	r3, r2
 8001d92:	0019      	movs	r1, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685a      	ldr	r2, [r3, #4]
 8001d98:	4b6c      	ldr	r3, [pc, #432]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2202      	movs	r2, #2
 8001da4:	4013      	ands	r3, r2
 8001da6:	d009      	beq.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001da8:	4b68      	ldr	r3, [pc, #416]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dac:	220c      	movs	r2, #12
 8001dae:	4393      	bics	r3, r2
 8001db0:	0019      	movs	r1, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689a      	ldr	r2, [r3, #8]
 8001db6:	4b65      	ldr	r3, [pc, #404]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001db8:	430a      	orrs	r2, r1
 8001dba:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_LPUART1SEL)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2220      	movs	r2, #32
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	d009      	beq.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001dc6:	4b61      	ldr	r3, [pc, #388]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dca:	4a66      	ldr	r2, [pc, #408]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8001dcc:	4013      	ands	r3, r2
 8001dce:	0019      	movs	r1, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	68da      	ldr	r2, [r3, #12]
 8001dd4:	4b5d      	ldr	r3, [pc, #372]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPUART1SEL */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	2380      	movs	r3, #128	; 0x80
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	4013      	ands	r3, r2
 8001de4:	d009      	beq.n	8001dfa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001de6:	4b59      	ldr	r3, [pc, #356]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dea:	4a5f      	ldr	r2, [pc, #380]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8001dec:	4013      	ands	r3, r2
 8001dee:	0019      	movs	r1, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	699a      	ldr	r2, [r3, #24]
 8001df4:	4b55      	ldr	r3, [pc, #340]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001df6:	430a      	orrs	r2, r1
 8001df8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	2380      	movs	r3, #128	; 0x80
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	4013      	ands	r3, r2
 8001e04:	d009      	beq.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001e06:	4b51      	ldr	r3, [pc, #324]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e0a:	4a58      	ldr	r2, [pc, #352]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	0019      	movs	r1, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	69da      	ldr	r2, [r3, #28]
 8001e14:	4b4d      	ldr	r3, [pc, #308]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e16:	430a      	orrs	r2, r1
 8001e18:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2240      	movs	r2, #64	; 0x40
 8001e20:	4013      	ands	r3, r2
 8001e22:	d009      	beq.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e24:	4b49      	ldr	r3, [pc, #292]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e28:	4a51      	ldr	r2, [pc, #324]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	0019      	movs	r1, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	691a      	ldr	r2, [r3, #16]
 8001e32:	4b46      	ldr	r3, [pc, #280]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e34:	430a      	orrs	r2, r1
 8001e36:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	2380      	movs	r3, #128	; 0x80
 8001e3e:	01db      	lsls	r3, r3, #7
 8001e40:	4013      	ands	r3, r2
 8001e42:	d015      	beq.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001e44:	4b41      	ldr	r3, [pc, #260]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	0899      	lsrs	r1, r3, #2
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a1a      	ldr	r2, [r3, #32]
 8001e50:	4b3e      	ldr	r3, [pc, #248]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e52:	430a      	orrs	r2, r1
 8001e54:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a1a      	ldr	r2, [r3, #32]
 8001e5a:	2380      	movs	r3, #128	; 0x80
 8001e5c:	05db      	lsls	r3, r3, #23
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d106      	bne.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001e62:	4b3a      	ldr	r3, [pc, #232]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e64:	68da      	ldr	r2, [r3, #12]
 8001e66:	4b39      	ldr	r3, [pc, #228]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e68:	2180      	movs	r1, #128	; 0x80
 8001e6a:	0249      	lsls	r1, r1, #9
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR_CECSEL)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	2380      	movs	r3, #128	; 0x80
 8001e76:	031b      	lsls	r3, r3, #12
 8001e78:	4013      	ands	r3, r2
 8001e7a:	d009      	beq.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001e7c:	4b33      	ldr	r3, [pc, #204]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e80:	2240      	movs	r2, #64	; 0x40
 8001e82:	4393      	bics	r3, r2
 8001e84:	0019      	movs	r1, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e8a:	4b30      	ldr	r3, [pc, #192]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_CECSEL */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	2380      	movs	r3, #128	; 0x80
 8001e96:	039b      	lsls	r3, r3, #14
 8001e98:	4013      	ands	r3, r2
 8001e9a:	d016      	beq.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001e9c:	4b2b      	ldr	r3, [pc, #172]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea0:	4a34      	ldr	r2, [pc, #208]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	0019      	movs	r1, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001eaa:	4b28      	ldr	r3, [pc, #160]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001eac:	430a      	orrs	r2, r1
 8001eae:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001eb4:	2380      	movs	r3, #128	; 0x80
 8001eb6:	03db      	lsls	r3, r3, #15
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d106      	bne.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001ebc:	4b23      	ldr	r3, [pc, #140]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ebe:	68da      	ldr	r2, [r3, #12]
 8001ec0:	4b22      	ldr	r3, [pc, #136]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ec2:	2180      	movs	r1, #128	; 0x80
 8001ec4:	0449      	lsls	r1, r1, #17
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	2380      	movs	r3, #128	; 0x80
 8001ed0:	03db      	lsls	r3, r3, #15
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d016      	beq.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001ed6:	4b1d      	ldr	r3, [pc, #116]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eda:	4a27      	ldr	r2, [pc, #156]	; (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8001edc:	4013      	ands	r3, r2
 8001ede:	0019      	movs	r1, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ee4:	4b19      	ldr	r3, [pc, #100]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eee:	2380      	movs	r3, #128	; 0x80
 8001ef0:	045b      	lsls	r3, r3, #17
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d106      	bne.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001ef6:	4b15      	ldr	r3, [pc, #84]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ef8:	68da      	ldr	r2, [r3, #12]
 8001efa:	4b14      	ldr	r3, [pc, #80]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001efc:	2180      	movs	r1, #128	; 0x80
 8001efe:	0449      	lsls	r1, r1, #17
 8001f00:	430a      	orrs	r2, r1
 8001f02:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	2380      	movs	r3, #128	; 0x80
 8001f0a:	011b      	lsls	r3, r3, #4
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	d016      	beq.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x32e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001f10:	4b0e      	ldr	r3, [pc, #56]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f14:	4a19      	ldr	r2, [pc, #100]	; (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8001f16:	4013      	ands	r3, r2
 8001f18:	0019      	movs	r1, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	695a      	ldr	r2, [r3, #20]
 8001f1e:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f20:	430a      	orrs	r2, r1
 8001f22:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	695a      	ldr	r2, [r3, #20]
 8001f28:	2380      	movs	r3, #128	; 0x80
 8001f2a:	01db      	lsls	r3, r3, #7
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d106      	bne.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x32e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001f30:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f32:	68da      	ldr	r2, [r3, #12]
 8001f34:	4b05      	ldr	r3, [pc, #20]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f36:	2180      	movs	r1, #128	; 0x80
 8001f38:	0249      	lsls	r1, r1, #9
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	60da      	str	r2, [r3, #12]
    }
  }

  return status;
 8001f3e:	2312      	movs	r3, #18
 8001f40:	18fb      	adds	r3, r7, r3
 8001f42:	781b      	ldrb	r3, [r3, #0]
}
 8001f44:	0018      	movs	r0, r3
 8001f46:	46bd      	mov	sp, r7
 8001f48:	b006      	add	sp, #24
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	40007000 	.word	0x40007000
 8001f54:	fffffcff 	.word	0xfffffcff
 8001f58:	fffeffff 	.word	0xfffeffff
 8001f5c:	00001388 	.word	0x00001388
 8001f60:	efffffff 	.word	0xefffffff
 8001f64:	fffff3ff 	.word	0xfffff3ff
 8001f68:	fff3ffff 	.word	0xfff3ffff
 8001f6c:	ffcfffff 	.word	0xffcfffff
 8001f70:	ffffcfff 	.word	0xffffcfff
 8001f74:	ffbfffff 	.word	0xffbfffff
 8001f78:	feffffff 	.word	0xfeffffff
 8001f7c:	ffff3fff 	.word	0xffff3fff

08001f80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e01e      	b.n	8001fd0 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	223d      	movs	r2, #61	; 0x3d
 8001f96:	5c9b      	ldrb	r3, [r3, r2]
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d107      	bne.n	8001fae <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	223c      	movs	r2, #60	; 0x3c
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	0018      	movs	r0, r3
 8001faa:	f7fe fd0f 	bl	80009cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	223d      	movs	r2, #61	; 0x3d
 8001fb2:	2102      	movs	r1, #2
 8001fb4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	3304      	adds	r3, #4
 8001fbe:	0019      	movs	r1, r3
 8001fc0:	0010      	movs	r0, r2
 8001fc2:	f000 fba9 	bl	8002718 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	223d      	movs	r2, #61	; 0x3d
 8001fca:	2101      	movs	r1, #1
 8001fcc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	0018      	movs	r0, r3
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	b002      	add	sp, #8
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e01e      	b.n	8002028 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	223d      	movs	r2, #61	; 0x3d
 8001fee:	5c9b      	ldrb	r3, [r3, r2]
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d107      	bne.n	8002006 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	223c      	movs	r2, #60	; 0x3c
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	0018      	movs	r0, r3
 8002002:	f000 f815 	bl	8002030 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	223d      	movs	r2, #61	; 0x3d
 800200a:	2102      	movs	r1, #2
 800200c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	3304      	adds	r3, #4
 8002016:	0019      	movs	r1, r3
 8002018:	0010      	movs	r0, r2
 800201a:	f000 fb7d 	bl	8002718 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	223d      	movs	r2, #61	; 0x3d
 8002022:	2101      	movs	r1, #1
 8002024:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	0018      	movs	r0, r3
 800202a:	46bd      	mov	sp, r7
 800202c:	b002      	add	sp, #8
 800202e:	bd80      	pop	{r7, pc}

08002030 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002038:	46c0      	nop			; (mov r8, r8)
 800203a:	46bd      	mov	sp, r7
 800203c:	b002      	add	sp, #8
 800203e:	bd80      	pop	{r7, pc}

08002040 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6839      	ldr	r1, [r7, #0]
 8002050:	2201      	movs	r2, #1
 8002052:	0018      	movs	r0, r3
 8002054:	f000 ff40 	bl	8002ed8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a1d      	ldr	r2, [pc, #116]	; (80020d4 <HAL_TIM_PWM_Start+0x94>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d00e      	beq.n	8002080 <HAL_TIM_PWM_Start+0x40>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a1c      	ldr	r2, [pc, #112]	; (80020d8 <HAL_TIM_PWM_Start+0x98>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d009      	beq.n	8002080 <HAL_TIM_PWM_Start+0x40>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a1a      	ldr	r2, [pc, #104]	; (80020dc <HAL_TIM_PWM_Start+0x9c>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d004      	beq.n	8002080 <HAL_TIM_PWM_Start+0x40>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a19      	ldr	r2, [pc, #100]	; (80020e0 <HAL_TIM_PWM_Start+0xa0>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d101      	bne.n	8002084 <HAL_TIM_PWM_Start+0x44>
 8002080:	2301      	movs	r3, #1
 8002082:	e000      	b.n	8002086 <HAL_TIM_PWM_Start+0x46>
 8002084:	2300      	movs	r3, #0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d008      	beq.n	800209c <HAL_TIM_PWM_Start+0x5c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2180      	movs	r1, #128	; 0x80
 8002096:	0209      	lsls	r1, r1, #8
 8002098:	430a      	orrs	r2, r1
 800209a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	4a10      	ldr	r2, [pc, #64]	; (80020e4 <HAL_TIM_PWM_Start+0xa4>)
 80020a4:	4013      	ands	r3, r2
 80020a6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2b06      	cmp	r3, #6
 80020ac:	d00c      	beq.n	80020c8 <HAL_TIM_PWM_Start+0x88>
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	2380      	movs	r3, #128	; 0x80
 80020b2:	025b      	lsls	r3, r3, #9
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d007      	beq.n	80020c8 <HAL_TIM_PWM_Start+0x88>
  {
    __HAL_TIM_ENABLE(htim);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2101      	movs	r1, #1
 80020c4:	430a      	orrs	r2, r1
 80020c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	0018      	movs	r0, r3
 80020cc:	46bd      	mov	sp, r7
 80020ce:	b004      	add	sp, #16
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	46c0      	nop			; (mov r8, r8)
 80020d4:	40012c00 	.word	0x40012c00
 80020d8:	40014000 	.word	0x40014000
 80020dc:	40014400 	.word	0x40014400
 80020e0:	40014800 	.word	0x40014800
 80020e4:	00010007 	.word	0x00010007

080020e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	2202      	movs	r2, #2
 80020f8:	4013      	ands	r3, r2
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d124      	bne.n	8002148 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	2202      	movs	r2, #2
 8002106:	4013      	ands	r3, r2
 8002108:	2b02      	cmp	r3, #2
 800210a:	d11d      	bne.n	8002148 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2203      	movs	r2, #3
 8002112:	4252      	negs	r2, r2
 8002114:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2201      	movs	r2, #1
 800211a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	2203      	movs	r2, #3
 8002124:	4013      	ands	r3, r2
 8002126:	d004      	beq.n	8002132 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	0018      	movs	r0, r3
 800212c:	f000 fadc 	bl	80026e8 <HAL_TIM_IC_CaptureCallback>
 8002130:	e007      	b.n	8002142 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	0018      	movs	r0, r3
 8002136:	f000 facf 	bl	80026d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	0018      	movs	r0, r3
 800213e:	f000 fadb 	bl	80026f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	2204      	movs	r2, #4
 8002150:	4013      	ands	r3, r2
 8002152:	2b04      	cmp	r3, #4
 8002154:	d125      	bne.n	80021a2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	2204      	movs	r2, #4
 800215e:	4013      	ands	r3, r2
 8002160:	2b04      	cmp	r3, #4
 8002162:	d11e      	bne.n	80021a2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2205      	movs	r2, #5
 800216a:	4252      	negs	r2, r2
 800216c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2202      	movs	r2, #2
 8002172:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	699a      	ldr	r2, [r3, #24]
 800217a:	23c0      	movs	r3, #192	; 0xc0
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4013      	ands	r3, r2
 8002180:	d004      	beq.n	800218c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	0018      	movs	r0, r3
 8002186:	f000 faaf 	bl	80026e8 <HAL_TIM_IC_CaptureCallback>
 800218a:	e007      	b.n	800219c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	0018      	movs	r0, r3
 8002190:	f000 faa2 	bl	80026d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	0018      	movs	r0, r3
 8002198:	f000 faae 	bl	80026f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	2208      	movs	r2, #8
 80021aa:	4013      	ands	r3, r2
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	d124      	bne.n	80021fa <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	2208      	movs	r2, #8
 80021b8:	4013      	ands	r3, r2
 80021ba:	2b08      	cmp	r3, #8
 80021bc:	d11d      	bne.n	80021fa <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2209      	movs	r2, #9
 80021c4:	4252      	negs	r2, r2
 80021c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2204      	movs	r2, #4
 80021cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	69db      	ldr	r3, [r3, #28]
 80021d4:	2203      	movs	r2, #3
 80021d6:	4013      	ands	r3, r2
 80021d8:	d004      	beq.n	80021e4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	0018      	movs	r0, r3
 80021de:	f000 fa83 	bl	80026e8 <HAL_TIM_IC_CaptureCallback>
 80021e2:	e007      	b.n	80021f4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	0018      	movs	r0, r3
 80021e8:	f000 fa76 	bl	80026d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	0018      	movs	r0, r3
 80021f0:	f000 fa82 	bl	80026f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	2210      	movs	r2, #16
 8002202:	4013      	ands	r3, r2
 8002204:	2b10      	cmp	r3, #16
 8002206:	d125      	bne.n	8002254 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	2210      	movs	r2, #16
 8002210:	4013      	ands	r3, r2
 8002212:	2b10      	cmp	r3, #16
 8002214:	d11e      	bne.n	8002254 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2211      	movs	r2, #17
 800221c:	4252      	negs	r2, r2
 800221e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2208      	movs	r2, #8
 8002224:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	69da      	ldr	r2, [r3, #28]
 800222c:	23c0      	movs	r3, #192	; 0xc0
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4013      	ands	r3, r2
 8002232:	d004      	beq.n	800223e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	0018      	movs	r0, r3
 8002238:	f000 fa56 	bl	80026e8 <HAL_TIM_IC_CaptureCallback>
 800223c:	e007      	b.n	800224e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	0018      	movs	r0, r3
 8002242:	f000 fa49 	bl	80026d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	0018      	movs	r0, r3
 800224a:	f000 fa55 	bl	80026f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	2201      	movs	r2, #1
 800225c:	4013      	ands	r3, r2
 800225e:	2b01      	cmp	r3, #1
 8002260:	d10f      	bne.n	8002282 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	2201      	movs	r2, #1
 800226a:	4013      	ands	r3, r2
 800226c:	2b01      	cmp	r3, #1
 800226e:	d108      	bne.n	8002282 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2202      	movs	r2, #2
 8002276:	4252      	negs	r2, r2
 8002278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	0018      	movs	r0, r3
 800227e:	f000 fa23 	bl	80026c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	2280      	movs	r2, #128	; 0x80
 800228a:	4013      	ands	r3, r2
 800228c:	2b80      	cmp	r3, #128	; 0x80
 800228e:	d10f      	bne.n	80022b0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	2280      	movs	r2, #128	; 0x80
 8002298:	4013      	ands	r3, r2
 800229a:	2b80      	cmp	r3, #128	; 0x80
 800229c:	d108      	bne.n	80022b0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2281      	movs	r2, #129	; 0x81
 80022a4:	4252      	negs	r2, r2
 80022a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	0018      	movs	r0, r3
 80022ac:	f000 fe96 	bl	8002fdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	691a      	ldr	r2, [r3, #16]
 80022b6:	2380      	movs	r3, #128	; 0x80
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	401a      	ands	r2, r3
 80022bc:	2380      	movs	r3, #128	; 0x80
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d10e      	bne.n	80022e2 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	2280      	movs	r2, #128	; 0x80
 80022cc:	4013      	ands	r3, r2
 80022ce:	2b80      	cmp	r3, #128	; 0x80
 80022d0:	d107      	bne.n	80022e2 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a1c      	ldr	r2, [pc, #112]	; (8002348 <HAL_TIM_IRQHandler+0x260>)
 80022d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	0018      	movs	r0, r3
 80022de:	f000 fe85 	bl	8002fec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	2240      	movs	r2, #64	; 0x40
 80022ea:	4013      	ands	r3, r2
 80022ec:	2b40      	cmp	r3, #64	; 0x40
 80022ee:	d10f      	bne.n	8002310 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	2240      	movs	r2, #64	; 0x40
 80022f8:	4013      	ands	r3, r2
 80022fa:	2b40      	cmp	r3, #64	; 0x40
 80022fc:	d108      	bne.n	8002310 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2241      	movs	r2, #65	; 0x41
 8002304:	4252      	negs	r2, r2
 8002306:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	0018      	movs	r0, r3
 800230c:	f000 f9fc 	bl	8002708 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	2220      	movs	r2, #32
 8002318:	4013      	ands	r3, r2
 800231a:	2b20      	cmp	r3, #32
 800231c:	d10f      	bne.n	800233e <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	2220      	movs	r2, #32
 8002326:	4013      	ands	r3, r2
 8002328:	2b20      	cmp	r3, #32
 800232a:	d108      	bne.n	800233e <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2221      	movs	r2, #33	; 0x21
 8002332:	4252      	negs	r2, r2
 8002334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	0018      	movs	r0, r3
 800233a:	f000 fe47 	bl	8002fcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800233e:	46c0      	nop			; (mov r8, r8)
 8002340:	46bd      	mov	sp, r7
 8002342:	b002      	add	sp, #8
 8002344:	bd80      	pop	{r7, pc}
 8002346:	46c0      	nop			; (mov r8, r8)
 8002348:	fffffeff 	.word	0xfffffeff

0800234c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	223c      	movs	r2, #60	; 0x3c
 800235c:	5c9b      	ldrb	r3, [r3, r2]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d101      	bne.n	8002366 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002362:	2302      	movs	r3, #2
 8002364:	e0e7      	b.n	8002536 <HAL_TIM_PWM_ConfigChannel+0x1ea>
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	223c      	movs	r2, #60	; 0x3c
 800236a:	2101      	movs	r1, #1
 800236c:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	223d      	movs	r2, #61	; 0x3d
 8002372:	2102      	movs	r1, #2
 8002374:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b14      	cmp	r3, #20
 800237a:	d900      	bls.n	800237e <HAL_TIM_PWM_ConfigChannel+0x32>
 800237c:	e0d1      	b.n	8002522 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	009a      	lsls	r2, r3, #2
 8002382:	4b6f      	ldr	r3, [pc, #444]	; (8002540 <HAL_TIM_PWM_ConfigChannel+0x1f4>)
 8002384:	18d3      	adds	r3, r2, r3
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68ba      	ldr	r2, [r7, #8]
 8002390:	0011      	movs	r1, r2
 8002392:	0018      	movs	r0, r3
 8002394:	f000 fa40 	bl	8002818 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	699a      	ldr	r2, [r3, #24]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2108      	movs	r1, #8
 80023a4:	430a      	orrs	r2, r1
 80023a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	699a      	ldr	r2, [r3, #24]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2104      	movs	r1, #4
 80023b4:	438a      	bics	r2, r1
 80023b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6999      	ldr	r1, [r3, #24]
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	691a      	ldr	r2, [r3, #16]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	430a      	orrs	r2, r1
 80023c8:	619a      	str	r2, [r3, #24]
      break;
 80023ca:	e0ab      	b.n	8002524 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68ba      	ldr	r2, [r7, #8]
 80023d2:	0011      	movs	r1, r2
 80023d4:	0018      	movs	r0, r3
 80023d6:	f000 faa9 	bl	800292c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	699a      	ldr	r2, [r3, #24]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2180      	movs	r1, #128	; 0x80
 80023e6:	0109      	lsls	r1, r1, #4
 80023e8:	430a      	orrs	r2, r1
 80023ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	699a      	ldr	r2, [r3, #24]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4953      	ldr	r1, [pc, #332]	; (8002544 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80023f8:	400a      	ands	r2, r1
 80023fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6999      	ldr	r1, [r3, #24]
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	021a      	lsls	r2, r3, #8
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	430a      	orrs	r2, r1
 800240e:	619a      	str	r2, [r3, #24]
      break;
 8002410:	e088      	b.n	8002524 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	0011      	movs	r1, r2
 800241a:	0018      	movs	r0, r3
 800241c:	f000 fb0a 	bl	8002a34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	69da      	ldr	r2, [r3, #28]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2108      	movs	r1, #8
 800242c:	430a      	orrs	r2, r1
 800242e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	69da      	ldr	r2, [r3, #28]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2104      	movs	r1, #4
 800243c:	438a      	bics	r2, r1
 800243e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	69d9      	ldr	r1, [r3, #28]
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	691a      	ldr	r2, [r3, #16]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	430a      	orrs	r2, r1
 8002450:	61da      	str	r2, [r3, #28]
      break;
 8002452:	e067      	b.n	8002524 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68ba      	ldr	r2, [r7, #8]
 800245a:	0011      	movs	r1, r2
 800245c:	0018      	movs	r0, r3
 800245e:	f000 fb71 	bl	8002b44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	69da      	ldr	r2, [r3, #28]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2180      	movs	r1, #128	; 0x80
 800246e:	0109      	lsls	r1, r1, #4
 8002470:	430a      	orrs	r2, r1
 8002472:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	69da      	ldr	r2, [r3, #28]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4931      	ldr	r1, [pc, #196]	; (8002544 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8002480:	400a      	ands	r2, r1
 8002482:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	69d9      	ldr	r1, [r3, #28]
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	021a      	lsls	r2, r3, #8
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	430a      	orrs	r2, r1
 8002496:	61da      	str	r2, [r3, #28]
      break;
 8002498:	e044      	b.n	8002524 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68ba      	ldr	r2, [r7, #8]
 80024a0:	0011      	movs	r1, r2
 80024a2:	0018      	movs	r0, r3
 80024a4:	f000 fbb8 	bl	8002c18 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2108      	movs	r1, #8
 80024b4:	430a      	orrs	r2, r1
 80024b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2104      	movs	r1, #4
 80024c4:	438a      	bics	r2, r1
 80024c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	691a      	ldr	r2, [r3, #16]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	430a      	orrs	r2, r1
 80024d8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80024da:	e023      	b.n	8002524 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68ba      	ldr	r2, [r7, #8]
 80024e2:	0011      	movs	r1, r2
 80024e4:	0018      	movs	r0, r3
 80024e6:	f000 fbf7 	bl	8002cd8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2180      	movs	r1, #128	; 0x80
 80024f6:	0109      	lsls	r1, r1, #4
 80024f8:	430a      	orrs	r2, r1
 80024fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	490f      	ldr	r1, [pc, #60]	; (8002544 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8002508:	400a      	ands	r2, r1
 800250a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	021a      	lsls	r2, r3, #8
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	430a      	orrs	r2, r1
 800251e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002520:	e000      	b.n	8002524 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    }

    default:
      break;
 8002522:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	223d      	movs	r2, #61	; 0x3d
 8002528:	2101      	movs	r1, #1
 800252a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	223c      	movs	r2, #60	; 0x3c
 8002530:	2100      	movs	r1, #0
 8002532:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	0018      	movs	r0, r3
 8002538:	46bd      	mov	sp, r7
 800253a:	b004      	add	sp, #16
 800253c:	bd80      	pop	{r7, pc}
 800253e:	46c0      	nop			; (mov r8, r8)
 8002540:	08004850 	.word	0x08004850
 8002544:	fffffbff 	.word	0xfffffbff

08002548 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	223c      	movs	r2, #60	; 0x3c
 8002556:	5c9b      	ldrb	r3, [r3, r2]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d101      	bne.n	8002560 <HAL_TIM_ConfigClockSource+0x18>
 800255c:	2302      	movs	r3, #2
 800255e:	e0ab      	b.n	80026b8 <HAL_TIM_ConfigClockSource+0x170>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	223c      	movs	r2, #60	; 0x3c
 8002564:	2101      	movs	r1, #1
 8002566:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	223d      	movs	r2, #61	; 0x3d
 800256c:	2102      	movs	r1, #2
 800256e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	4a51      	ldr	r2, [pc, #324]	; (80026c0 <HAL_TIM_ConfigClockSource+0x178>)
 800257c:	4013      	ands	r3, r2
 800257e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	4a50      	ldr	r2, [pc, #320]	; (80026c4 <HAL_TIM_ConfigClockSource+0x17c>)
 8002584:	4013      	ands	r3, r2
 8002586:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2b40      	cmp	r3, #64	; 0x40
 8002596:	d100      	bne.n	800259a <HAL_TIM_ConfigClockSource+0x52>
 8002598:	e06b      	b.n	8002672 <HAL_TIM_ConfigClockSource+0x12a>
 800259a:	d80e      	bhi.n	80025ba <HAL_TIM_ConfigClockSource+0x72>
 800259c:	2b10      	cmp	r3, #16
 800259e:	d100      	bne.n	80025a2 <HAL_TIM_ConfigClockSource+0x5a>
 80025a0:	e077      	b.n	8002692 <HAL_TIM_ConfigClockSource+0x14a>
 80025a2:	d803      	bhi.n	80025ac <HAL_TIM_ConfigClockSource+0x64>
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d100      	bne.n	80025aa <HAL_TIM_ConfigClockSource+0x62>
 80025a8:	e073      	b.n	8002692 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80025aa:	e07c      	b.n	80026a6 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80025ac:	2b20      	cmp	r3, #32
 80025ae:	d100      	bne.n	80025b2 <HAL_TIM_ConfigClockSource+0x6a>
 80025b0:	e06f      	b.n	8002692 <HAL_TIM_ConfigClockSource+0x14a>
 80025b2:	2b30      	cmp	r3, #48	; 0x30
 80025b4:	d100      	bne.n	80025b8 <HAL_TIM_ConfigClockSource+0x70>
 80025b6:	e06c      	b.n	8002692 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 80025b8:	e075      	b.n	80026a6 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80025ba:	2b70      	cmp	r3, #112	; 0x70
 80025bc:	d00e      	beq.n	80025dc <HAL_TIM_ConfigClockSource+0x94>
 80025be:	d804      	bhi.n	80025ca <HAL_TIM_ConfigClockSource+0x82>
 80025c0:	2b50      	cmp	r3, #80	; 0x50
 80025c2:	d036      	beq.n	8002632 <HAL_TIM_ConfigClockSource+0xea>
 80025c4:	2b60      	cmp	r3, #96	; 0x60
 80025c6:	d044      	beq.n	8002652 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 80025c8:	e06d      	b.n	80026a6 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80025ca:	2280      	movs	r2, #128	; 0x80
 80025cc:	0152      	lsls	r2, r2, #5
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d068      	beq.n	80026a4 <HAL_TIM_ConfigClockSource+0x15c>
 80025d2:	2280      	movs	r2, #128	; 0x80
 80025d4:	0192      	lsls	r2, r2, #6
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d017      	beq.n	800260a <HAL_TIM_ConfigClockSource+0xc2>
      break;
 80025da:	e064      	b.n	80026a6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6818      	ldr	r0, [r3, #0]
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	6899      	ldr	r1, [r3, #8]
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685a      	ldr	r2, [r3, #4]
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	f000 fc54 	bl	8002e98 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2277      	movs	r2, #119	; 0x77
 80025fc:	4313      	orrs	r3, r2
 80025fe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	609a      	str	r2, [r3, #8]
      break;
 8002608:	e04d      	b.n	80026a6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6818      	ldr	r0, [r3, #0]
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	6899      	ldr	r1, [r3, #8]
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	f000 fc3d 	bl	8002e98 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	689a      	ldr	r2, [r3, #8]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2180      	movs	r1, #128	; 0x80
 800262a:	01c9      	lsls	r1, r1, #7
 800262c:	430a      	orrs	r2, r1
 800262e:	609a      	str	r2, [r3, #8]
      break;
 8002630:	e039      	b.n	80026a6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6818      	ldr	r0, [r3, #0]
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	6859      	ldr	r1, [r3, #4]
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	001a      	movs	r2, r3
 8002640:	f000 fbae 	bl	8002da0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2150      	movs	r1, #80	; 0x50
 800264a:	0018      	movs	r0, r3
 800264c:	f000 fc08 	bl	8002e60 <TIM_ITRx_SetConfig>
      break;
 8002650:	e029      	b.n	80026a6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6818      	ldr	r0, [r3, #0]
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	6859      	ldr	r1, [r3, #4]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	001a      	movs	r2, r3
 8002660:	f000 fbcc 	bl	8002dfc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2160      	movs	r1, #96	; 0x60
 800266a:	0018      	movs	r0, r3
 800266c:	f000 fbf8 	bl	8002e60 <TIM_ITRx_SetConfig>
      break;
 8002670:	e019      	b.n	80026a6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6818      	ldr	r0, [r3, #0]
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	6859      	ldr	r1, [r3, #4]
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	001a      	movs	r2, r3
 8002680:	f000 fb8e 	bl	8002da0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2140      	movs	r1, #64	; 0x40
 800268a:	0018      	movs	r0, r3
 800268c:	f000 fbe8 	bl	8002e60 <TIM_ITRx_SetConfig>
      break;
 8002690:	e009      	b.n	80026a6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	0019      	movs	r1, r3
 800269c:	0010      	movs	r0, r2
 800269e:	f000 fbdf 	bl	8002e60 <TIM_ITRx_SetConfig>
      break;
 80026a2:	e000      	b.n	80026a6 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 80026a4:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	223d      	movs	r2, #61	; 0x3d
 80026aa:	2101      	movs	r1, #1
 80026ac:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	223c      	movs	r2, #60	; 0x3c
 80026b2:	2100      	movs	r1, #0
 80026b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	0018      	movs	r0, r3
 80026ba:	46bd      	mov	sp, r7
 80026bc:	b004      	add	sp, #16
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	ffceff88 	.word	0xffceff88
 80026c4:	ffff00ff 	.word	0xffff00ff

080026c8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80026d0:	46c0      	nop			; (mov r8, r8)
 80026d2:	46bd      	mov	sp, r7
 80026d4:	b002      	add	sp, #8
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026e0:	46c0      	nop			; (mov r8, r8)
 80026e2:	46bd      	mov	sp, r7
 80026e4:	b002      	add	sp, #8
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026f0:	46c0      	nop			; (mov r8, r8)
 80026f2:	46bd      	mov	sp, r7
 80026f4:	b002      	add	sp, #8
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002700:	46c0      	nop			; (mov r8, r8)
 8002702:	46bd      	mov	sp, r7
 8002704:	b002      	add	sp, #8
 8002706:	bd80      	pop	{r7, pc}

08002708 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002710:	46c0      	nop			; (mov r8, r8)
 8002712:	46bd      	mov	sp, r7
 8002714:	b002      	add	sp, #8
 8002716:	bd80      	pop	{r7, pc}

08002718 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a34      	ldr	r2, [pc, #208]	; (80027fc <TIM_Base_SetConfig+0xe4>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d008      	beq.n	8002742 <TIM_Base_SetConfig+0x2a>
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	2380      	movs	r3, #128	; 0x80
 8002734:	05db      	lsls	r3, r3, #23
 8002736:	429a      	cmp	r2, r3
 8002738:	d003      	beq.n	8002742 <TIM_Base_SetConfig+0x2a>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a30      	ldr	r2, [pc, #192]	; (8002800 <TIM_Base_SetConfig+0xe8>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d108      	bne.n	8002754 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2270      	movs	r2, #112	; 0x70
 8002746:	4393      	bics	r3, r2
 8002748:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	4313      	orrs	r3, r2
 8002752:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a29      	ldr	r2, [pc, #164]	; (80027fc <TIM_Base_SetConfig+0xe4>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d018      	beq.n	800278e <TIM_Base_SetConfig+0x76>
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	2380      	movs	r3, #128	; 0x80
 8002760:	05db      	lsls	r3, r3, #23
 8002762:	429a      	cmp	r2, r3
 8002764:	d013      	beq.n	800278e <TIM_Base_SetConfig+0x76>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a25      	ldr	r2, [pc, #148]	; (8002800 <TIM_Base_SetConfig+0xe8>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d00f      	beq.n	800278e <TIM_Base_SetConfig+0x76>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a24      	ldr	r2, [pc, #144]	; (8002804 <TIM_Base_SetConfig+0xec>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d00b      	beq.n	800278e <TIM_Base_SetConfig+0x76>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a23      	ldr	r2, [pc, #140]	; (8002808 <TIM_Base_SetConfig+0xf0>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d007      	beq.n	800278e <TIM_Base_SetConfig+0x76>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a22      	ldr	r2, [pc, #136]	; (800280c <TIM_Base_SetConfig+0xf4>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d003      	beq.n	800278e <TIM_Base_SetConfig+0x76>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a21      	ldr	r2, [pc, #132]	; (8002810 <TIM_Base_SetConfig+0xf8>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d108      	bne.n	80027a0 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	4a20      	ldr	r2, [pc, #128]	; (8002814 <TIM_Base_SetConfig+0xfc>)
 8002792:	4013      	ands	r3, r2
 8002794:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	4313      	orrs	r3, r2
 800279e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2280      	movs	r2, #128	; 0x80
 80027a4:	4393      	bics	r3, r2
 80027a6:	001a      	movs	r2, r3
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	689a      	ldr	r2, [r3, #8]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a0c      	ldr	r2, [pc, #48]	; (80027fc <TIM_Base_SetConfig+0xe4>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d00b      	beq.n	80027e6 <TIM_Base_SetConfig+0xce>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a0d      	ldr	r2, [pc, #52]	; (8002808 <TIM_Base_SetConfig+0xf0>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d007      	beq.n	80027e6 <TIM_Base_SetConfig+0xce>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a0c      	ldr	r2, [pc, #48]	; (800280c <TIM_Base_SetConfig+0xf4>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d003      	beq.n	80027e6 <TIM_Base_SetConfig+0xce>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a0b      	ldr	r2, [pc, #44]	; (8002810 <TIM_Base_SetConfig+0xf8>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d103      	bne.n	80027ee <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	691a      	ldr	r2, [r3, #16]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2201      	movs	r2, #1
 80027f2:	615a      	str	r2, [r3, #20]
}
 80027f4:	46c0      	nop			; (mov r8, r8)
 80027f6:	46bd      	mov	sp, r7
 80027f8:	b004      	add	sp, #16
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40012c00 	.word	0x40012c00
 8002800:	40000400 	.word	0x40000400
 8002804:	40002000 	.word	0x40002000
 8002808:	40014000 	.word	0x40014000
 800280c:	40014400 	.word	0x40014400
 8002810:	40014800 	.word	0x40014800
 8002814:	fffffcff 	.word	0xfffffcff

08002818 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	2201      	movs	r2, #1
 8002828:	4393      	bics	r3, r2
 800282a:	001a      	movs	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	4a32      	ldr	r2, [pc, #200]	; (8002910 <TIM_OC1_SetConfig+0xf8>)
 8002846:	4013      	ands	r3, r2
 8002848:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2203      	movs	r2, #3
 800284e:	4393      	bics	r3, r2
 8002850:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	4313      	orrs	r3, r2
 800285a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	2202      	movs	r2, #2
 8002860:	4393      	bics	r3, r2
 8002862:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	4313      	orrs	r3, r2
 800286c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a28      	ldr	r2, [pc, #160]	; (8002914 <TIM_OC1_SetConfig+0xfc>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d00b      	beq.n	800288e <TIM_OC1_SetConfig+0x76>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a27      	ldr	r2, [pc, #156]	; (8002918 <TIM_OC1_SetConfig+0x100>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d007      	beq.n	800288e <TIM_OC1_SetConfig+0x76>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a26      	ldr	r2, [pc, #152]	; (800291c <TIM_OC1_SetConfig+0x104>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d003      	beq.n	800288e <TIM_OC1_SetConfig+0x76>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a25      	ldr	r2, [pc, #148]	; (8002920 <TIM_OC1_SetConfig+0x108>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d10c      	bne.n	80028a8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	2208      	movs	r2, #8
 8002892:	4393      	bics	r3, r2
 8002894:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	4313      	orrs	r3, r2
 800289e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	2204      	movs	r2, #4
 80028a4:	4393      	bics	r3, r2
 80028a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a1a      	ldr	r2, [pc, #104]	; (8002914 <TIM_OC1_SetConfig+0xfc>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d00b      	beq.n	80028c8 <TIM_OC1_SetConfig+0xb0>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a19      	ldr	r2, [pc, #100]	; (8002918 <TIM_OC1_SetConfig+0x100>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d007      	beq.n	80028c8 <TIM_OC1_SetConfig+0xb0>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a18      	ldr	r2, [pc, #96]	; (800291c <TIM_OC1_SetConfig+0x104>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d003      	beq.n	80028c8 <TIM_OC1_SetConfig+0xb0>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a17      	ldr	r2, [pc, #92]	; (8002920 <TIM_OC1_SetConfig+0x108>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d111      	bne.n	80028ec <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	4a16      	ldr	r2, [pc, #88]	; (8002924 <TIM_OC1_SetConfig+0x10c>)
 80028cc:	4013      	ands	r3, r2
 80028ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	4a15      	ldr	r2, [pc, #84]	; (8002928 <TIM_OC1_SetConfig+0x110>)
 80028d4:	4013      	ands	r3, r2
 80028d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	695b      	ldr	r3, [r3, #20]
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	4313      	orrs	r3, r2
 80028e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	621a      	str	r2, [r3, #32]
}
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	46bd      	mov	sp, r7
 800290a:	b006      	add	sp, #24
 800290c:	bd80      	pop	{r7, pc}
 800290e:	46c0      	nop			; (mov r8, r8)
 8002910:	fffeff8f 	.word	0xfffeff8f
 8002914:	40012c00 	.word	0x40012c00
 8002918:	40014000 	.word	0x40014000
 800291c:	40014400 	.word	0x40014400
 8002920:	40014800 	.word	0x40014800
 8002924:	fffffeff 	.word	0xfffffeff
 8002928:	fffffdff 	.word	0xfffffdff

0800292c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	2210      	movs	r2, #16
 800293c:	4393      	bics	r3, r2
 800293e:	001a      	movs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	4a2e      	ldr	r2, [pc, #184]	; (8002a14 <TIM_OC2_SetConfig+0xe8>)
 800295a:	4013      	ands	r3, r2
 800295c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	4a2d      	ldr	r2, [pc, #180]	; (8002a18 <TIM_OC2_SetConfig+0xec>)
 8002962:	4013      	ands	r3, r2
 8002964:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	021b      	lsls	r3, r3, #8
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	4313      	orrs	r3, r2
 8002970:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	2220      	movs	r2, #32
 8002976:	4393      	bics	r3, r2
 8002978:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	011b      	lsls	r3, r3, #4
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	4313      	orrs	r3, r2
 8002984:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a24      	ldr	r2, [pc, #144]	; (8002a1c <TIM_OC2_SetConfig+0xf0>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d10d      	bne.n	80029aa <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	2280      	movs	r2, #128	; 0x80
 8002992:	4393      	bics	r3, r2
 8002994:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	011b      	lsls	r3, r3, #4
 800299c:	697a      	ldr	r2, [r7, #20]
 800299e:	4313      	orrs	r3, r2
 80029a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	2240      	movs	r2, #64	; 0x40
 80029a6:	4393      	bics	r3, r2
 80029a8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a1b      	ldr	r2, [pc, #108]	; (8002a1c <TIM_OC2_SetConfig+0xf0>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d00b      	beq.n	80029ca <TIM_OC2_SetConfig+0x9e>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a1a      	ldr	r2, [pc, #104]	; (8002a20 <TIM_OC2_SetConfig+0xf4>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d007      	beq.n	80029ca <TIM_OC2_SetConfig+0x9e>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a19      	ldr	r2, [pc, #100]	; (8002a24 <TIM_OC2_SetConfig+0xf8>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d003      	beq.n	80029ca <TIM_OC2_SetConfig+0x9e>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a18      	ldr	r2, [pc, #96]	; (8002a28 <TIM_OC2_SetConfig+0xfc>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d113      	bne.n	80029f2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	4a17      	ldr	r2, [pc, #92]	; (8002a2c <TIM_OC2_SetConfig+0x100>)
 80029ce:	4013      	ands	r3, r2
 80029d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	4a16      	ldr	r2, [pc, #88]	; (8002a30 <TIM_OC2_SetConfig+0x104>)
 80029d6:	4013      	ands	r3, r2
 80029d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685a      	ldr	r2, [r3, #4]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	621a      	str	r2, [r3, #32]
}
 8002a0c:	46c0      	nop			; (mov r8, r8)
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	b006      	add	sp, #24
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	feff8fff 	.word	0xfeff8fff
 8002a18:	fffffcff 	.word	0xfffffcff
 8002a1c:	40012c00 	.word	0x40012c00
 8002a20:	40014000 	.word	0x40014000
 8002a24:	40014400 	.word	0x40014400
 8002a28:	40014800 	.word	0x40014800
 8002a2c:	fffffbff 	.word	0xfffffbff
 8002a30:	fffff7ff 	.word	0xfffff7ff

08002a34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	4a35      	ldr	r2, [pc, #212]	; (8002b18 <TIM_OC3_SetConfig+0xe4>)
 8002a44:	401a      	ands	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a1b      	ldr	r3, [r3, #32]
 8002a4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	4a2f      	ldr	r2, [pc, #188]	; (8002b1c <TIM_OC3_SetConfig+0xe8>)
 8002a60:	4013      	ands	r3, r2
 8002a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2203      	movs	r2, #3
 8002a68:	4393      	bics	r3, r2
 8002a6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	4a29      	ldr	r2, [pc, #164]	; (8002b20 <TIM_OC3_SetConfig+0xec>)
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	021b      	lsls	r3, r3, #8
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a25      	ldr	r2, [pc, #148]	; (8002b24 <TIM_OC3_SetConfig+0xf0>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d10d      	bne.n	8002aae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	4a24      	ldr	r2, [pc, #144]	; (8002b28 <TIM_OC3_SetConfig+0xf4>)
 8002a96:	4013      	ands	r3, r2
 8002a98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	021b      	lsls	r3, r3, #8
 8002aa0:	697a      	ldr	r2, [r7, #20]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	4a20      	ldr	r2, [pc, #128]	; (8002b2c <TIM_OC3_SetConfig+0xf8>)
 8002aaa:	4013      	ands	r3, r2
 8002aac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a1c      	ldr	r2, [pc, #112]	; (8002b24 <TIM_OC3_SetConfig+0xf0>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d00b      	beq.n	8002ace <TIM_OC3_SetConfig+0x9a>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a1d      	ldr	r2, [pc, #116]	; (8002b30 <TIM_OC3_SetConfig+0xfc>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d007      	beq.n	8002ace <TIM_OC3_SetConfig+0x9a>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a1c      	ldr	r2, [pc, #112]	; (8002b34 <TIM_OC3_SetConfig+0x100>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d003      	beq.n	8002ace <TIM_OC3_SetConfig+0x9a>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a1b      	ldr	r2, [pc, #108]	; (8002b38 <TIM_OC3_SetConfig+0x104>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d113      	bne.n	8002af6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	4a1a      	ldr	r2, [pc, #104]	; (8002b3c <TIM_OC3_SetConfig+0x108>)
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	4a19      	ldr	r2, [pc, #100]	; (8002b40 <TIM_OC3_SetConfig+0x10c>)
 8002ada:	4013      	ands	r3, r2
 8002adc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	011b      	lsls	r3, r3, #4
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	011b      	lsls	r3, r3, #4
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685a      	ldr	r2, [r3, #4]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	621a      	str	r2, [r3, #32]
}
 8002b10:	46c0      	nop			; (mov r8, r8)
 8002b12:	46bd      	mov	sp, r7
 8002b14:	b006      	add	sp, #24
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	fffffeff 	.word	0xfffffeff
 8002b1c:	fffeff8f 	.word	0xfffeff8f
 8002b20:	fffffdff 	.word	0xfffffdff
 8002b24:	40012c00 	.word	0x40012c00
 8002b28:	fffff7ff 	.word	0xfffff7ff
 8002b2c:	fffffbff 	.word	0xfffffbff
 8002b30:	40014000 	.word	0x40014000
 8002b34:	40014400 	.word	0x40014400
 8002b38:	40014800 	.word	0x40014800
 8002b3c:	ffffefff 	.word	0xffffefff
 8002b40:	ffffdfff 	.word	0xffffdfff

08002b44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	4a28      	ldr	r2, [pc, #160]	; (8002bf4 <TIM_OC4_SetConfig+0xb0>)
 8002b54:	401a      	ands	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	4a22      	ldr	r2, [pc, #136]	; (8002bf8 <TIM_OC4_SetConfig+0xb4>)
 8002b70:	4013      	ands	r3, r2
 8002b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	4a21      	ldr	r2, [pc, #132]	; (8002bfc <TIM_OC4_SetConfig+0xb8>)
 8002b78:	4013      	ands	r3, r2
 8002b7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	021b      	lsls	r3, r3, #8
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	4a1d      	ldr	r2, [pc, #116]	; (8002c00 <TIM_OC4_SetConfig+0xbc>)
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	031b      	lsls	r3, r3, #12
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4a19      	ldr	r2, [pc, #100]	; (8002c04 <TIM_OC4_SetConfig+0xc0>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d00b      	beq.n	8002bbc <TIM_OC4_SetConfig+0x78>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a18      	ldr	r2, [pc, #96]	; (8002c08 <TIM_OC4_SetConfig+0xc4>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d007      	beq.n	8002bbc <TIM_OC4_SetConfig+0x78>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a17      	ldr	r2, [pc, #92]	; (8002c0c <TIM_OC4_SetConfig+0xc8>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d003      	beq.n	8002bbc <TIM_OC4_SetConfig+0x78>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a16      	ldr	r2, [pc, #88]	; (8002c10 <TIM_OC4_SetConfig+0xcc>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d109      	bne.n	8002bd0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	4a15      	ldr	r2, [pc, #84]	; (8002c14 <TIM_OC4_SetConfig+0xd0>)
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	019b      	lsls	r3, r3, #6
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	621a      	str	r2, [r3, #32]
}
 8002bea:	46c0      	nop			; (mov r8, r8)
 8002bec:	46bd      	mov	sp, r7
 8002bee:	b006      	add	sp, #24
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	46c0      	nop			; (mov r8, r8)
 8002bf4:	ffffefff 	.word	0xffffefff
 8002bf8:	feff8fff 	.word	0xfeff8fff
 8002bfc:	fffffcff 	.word	0xfffffcff
 8002c00:	ffffdfff 	.word	0xffffdfff
 8002c04:	40012c00 	.word	0x40012c00
 8002c08:	40014000 	.word	0x40014000
 8002c0c:	40014400 	.word	0x40014400
 8002c10:	40014800 	.word	0x40014800
 8002c14:	ffffbfff 	.word	0xffffbfff

08002c18 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	4a25      	ldr	r2, [pc, #148]	; (8002cbc <TIM_OC5_SetConfig+0xa4>)
 8002c28:	401a      	ands	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	4a1f      	ldr	r2, [pc, #124]	; (8002cc0 <TIM_OC5_SetConfig+0xa8>)
 8002c44:	4013      	ands	r3, r2
 8002c46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	4a1b      	ldr	r2, [pc, #108]	; (8002cc4 <TIM_OC5_SetConfig+0xac>)
 8002c56:	4013      	ands	r3, r2
 8002c58:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	041b      	lsls	r3, r3, #16
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a17      	ldr	r2, [pc, #92]	; (8002cc8 <TIM_OC5_SetConfig+0xb0>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d00b      	beq.n	8002c86 <TIM_OC5_SetConfig+0x6e>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a16      	ldr	r2, [pc, #88]	; (8002ccc <TIM_OC5_SetConfig+0xb4>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d007      	beq.n	8002c86 <TIM_OC5_SetConfig+0x6e>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a15      	ldr	r2, [pc, #84]	; (8002cd0 <TIM_OC5_SetConfig+0xb8>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d003      	beq.n	8002c86 <TIM_OC5_SetConfig+0x6e>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a14      	ldr	r2, [pc, #80]	; (8002cd4 <TIM_OC5_SetConfig+0xbc>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d109      	bne.n	8002c9a <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	4a0c      	ldr	r2, [pc, #48]	; (8002cbc <TIM_OC5_SetConfig+0xa4>)
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	021b      	lsls	r3, r3, #8
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685a      	ldr	r2, [r3, #4]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	621a      	str	r2, [r3, #32]
}
 8002cb4:	46c0      	nop			; (mov r8, r8)
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	b006      	add	sp, #24
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	fffeffff 	.word	0xfffeffff
 8002cc0:	fffeff8f 	.word	0xfffeff8f
 8002cc4:	fffdffff 	.word	0xfffdffff
 8002cc8:	40012c00 	.word	0x40012c00
 8002ccc:	40014000 	.word	0x40014000
 8002cd0:	40014400 	.word	0x40014400
 8002cd4:	40014800 	.word	0x40014800

08002cd8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	4a26      	ldr	r2, [pc, #152]	; (8002d80 <TIM_OC6_SetConfig+0xa8>)
 8002ce8:	401a      	ands	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	4a20      	ldr	r2, [pc, #128]	; (8002d84 <TIM_OC6_SetConfig+0xac>)
 8002d04:	4013      	ands	r3, r2
 8002d06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	021b      	lsls	r3, r3, #8
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	4a1c      	ldr	r2, [pc, #112]	; (8002d88 <TIM_OC6_SetConfig+0xb0>)
 8002d18:	4013      	ands	r3, r2
 8002d1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	051b      	lsls	r3, r3, #20
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a18      	ldr	r2, [pc, #96]	; (8002d8c <TIM_OC6_SetConfig+0xb4>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d00b      	beq.n	8002d48 <TIM_OC6_SetConfig+0x70>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a17      	ldr	r2, [pc, #92]	; (8002d90 <TIM_OC6_SetConfig+0xb8>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d007      	beq.n	8002d48 <TIM_OC6_SetConfig+0x70>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a16      	ldr	r2, [pc, #88]	; (8002d94 <TIM_OC6_SetConfig+0xbc>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d003      	beq.n	8002d48 <TIM_OC6_SetConfig+0x70>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a15      	ldr	r2, [pc, #84]	; (8002d98 <TIM_OC6_SetConfig+0xc0>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d109      	bne.n	8002d5c <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	4a14      	ldr	r2, [pc, #80]	; (8002d9c <TIM_OC6_SetConfig+0xc4>)
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	029b      	lsls	r3, r3, #10
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685a      	ldr	r2, [r3, #4]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	621a      	str	r2, [r3, #32]
}
 8002d76:	46c0      	nop			; (mov r8, r8)
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	b006      	add	sp, #24
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	46c0      	nop			; (mov r8, r8)
 8002d80:	ffefffff 	.word	0xffefffff
 8002d84:	feff8fff 	.word	0xfeff8fff
 8002d88:	ffdfffff 	.word	0xffdfffff
 8002d8c:	40012c00 	.word	0x40012c00
 8002d90:	40014000 	.word	0x40014000
 8002d94:	40014400 	.word	0x40014400
 8002d98:	40014800 	.word	0x40014800
 8002d9c:	fffbffff 	.word	0xfffbffff

08002da0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	2201      	movs	r2, #1
 8002db8:	4393      	bics	r3, r2
 8002dba:	001a      	movs	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	22f0      	movs	r2, #240	; 0xf0
 8002dca:	4393      	bics	r3, r2
 8002dcc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	011b      	lsls	r3, r3, #4
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	220a      	movs	r2, #10
 8002ddc:	4393      	bics	r3, r2
 8002dde:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	621a      	str	r2, [r3, #32]
}
 8002df4:	46c0      	nop			; (mov r8, r8)
 8002df6:	46bd      	mov	sp, r7
 8002df8:	b006      	add	sp, #24
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	2210      	movs	r2, #16
 8002e0e:	4393      	bics	r3, r2
 8002e10:	001a      	movs	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
 8002e20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	4a0d      	ldr	r2, [pc, #52]	; (8002e5c <TIM_TI2_ConfigInputStage+0x60>)
 8002e26:	4013      	ands	r3, r2
 8002e28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	031b      	lsls	r3, r3, #12
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	22a0      	movs	r2, #160	; 0xa0
 8002e38:	4393      	bics	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	011b      	lsls	r3, r3, #4
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	697a      	ldr	r2, [r7, #20]
 8002e4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	621a      	str	r2, [r3, #32]
}
 8002e52:	46c0      	nop			; (mov r8, r8)
 8002e54:	46bd      	mov	sp, r7
 8002e56:	b006      	add	sp, #24
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	46c0      	nop			; (mov r8, r8)
 8002e5c:	ffff0fff 	.word	0xffff0fff

08002e60 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	4a08      	ldr	r2, [pc, #32]	; (8002e94 <TIM_ITRx_SetConfig+0x34>)
 8002e74:	4013      	ands	r3, r2
 8002e76:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	2207      	movs	r2, #7
 8002e80:	4313      	orrs	r3, r2
 8002e82:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	609a      	str	r2, [r3, #8]
}
 8002e8a:	46c0      	nop			; (mov r8, r8)
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	b004      	add	sp, #16
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	46c0      	nop			; (mov r8, r8)
 8002e94:	ffcfff8f 	.word	0xffcfff8f

08002e98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
 8002ea4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	4a09      	ldr	r2, [pc, #36]	; (8002ed4 <TIM_ETR_SetConfig+0x3c>)
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	021a      	lsls	r2, r3, #8
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	697a      	ldr	r2, [r7, #20]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	697a      	ldr	r2, [r7, #20]
 8002eca:	609a      	str	r2, [r3, #8]
}
 8002ecc:	46c0      	nop			; (mov r8, r8)
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	b006      	add	sp, #24
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	ffff00ff 	.word	0xffff00ff

08002ed8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	221f      	movs	r2, #31
 8002ee8:	4013      	ands	r3, r2
 8002eea:	2201      	movs	r2, #1
 8002eec:	409a      	lsls	r2, r3
 8002eee:	0013      	movs	r3, r2
 8002ef0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	43d2      	mvns	r2, r2
 8002efa:	401a      	ands	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6a1a      	ldr	r2, [r3, #32]
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	211f      	movs	r1, #31
 8002f08:	400b      	ands	r3, r1
 8002f0a:	6879      	ldr	r1, [r7, #4]
 8002f0c:	4099      	lsls	r1, r3
 8002f0e:	000b      	movs	r3, r1
 8002f10:	431a      	orrs	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	621a      	str	r2, [r3, #32]
}
 8002f16:	46c0      	nop			; (mov r8, r8)
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	b006      	add	sp, #24
 8002f1c:	bd80      	pop	{r7, pc}
	...

08002f20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	223c      	movs	r2, #60	; 0x3c
 8002f2e:	5c9b      	ldrb	r3, [r3, r2]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d101      	bne.n	8002f38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f34:	2302      	movs	r3, #2
 8002f36:	e040      	b.n	8002fba <HAL_TIMEx_MasterConfigSynchronization+0x9a>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	223c      	movs	r2, #60	; 0x3c
 8002f3c:	2101      	movs	r1, #1
 8002f3e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	223d      	movs	r2, #61	; 0x3d
 8002f44:	2102      	movs	r1, #2
 8002f46:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a19      	ldr	r2, [pc, #100]	; (8002fc4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d108      	bne.n	8002f74 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	4a18      	ldr	r2, [pc, #96]	; (8002fc8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002f66:	4013      	ands	r3, r2
 8002f68:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2270      	movs	r2, #112	; 0x70
 8002f78:	4393      	bics	r3, r2
 8002f7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	2280      	movs	r2, #128	; 0x80
 8002f8a:	4393      	bics	r3, r2
 8002f8c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	68ba      	ldr	r2, [r7, #8]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68ba      	ldr	r2, [r7, #8]
 8002fa6:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	223d      	movs	r2, #61	; 0x3d
 8002fac:	2101      	movs	r1, #1
 8002fae:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	223c      	movs	r2, #60	; 0x3c
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	0018      	movs	r0, r3
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	b004      	add	sp, #16
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	40012c00 	.word	0x40012c00
 8002fc8:	ff0fffff 	.word	0xff0fffff

08002fcc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fd4:	46c0      	nop			; (mov r8, r8)
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	b002      	add	sp, #8
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fe4:	46c0      	nop			; (mov r8, r8)
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	b002      	add	sp, #8
 8002fea:	bd80      	pop	{r7, pc}

08002fec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002ff4:	46c0      	nop			; (mov r8, r8)
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	b002      	add	sp, #8
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e046      	b.n	800309c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2280      	movs	r2, #128	; 0x80
 8003012:	589b      	ldr	r3, [r3, r2]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d107      	bne.n	8003028 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	227c      	movs	r2, #124	; 0x7c
 800301c:	2100      	movs	r1, #0
 800301e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	0018      	movs	r0, r3
 8003024:	f7fd fd32 	bl	8000a8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2280      	movs	r2, #128	; 0x80
 800302c:	2124      	movs	r1, #36	; 0x24
 800302e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2101      	movs	r1, #1
 800303c:	438a      	bics	r2, r1
 800303e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	0018      	movs	r0, r3
 8003044:	f000 f830 	bl	80030a8 <UART_SetConfig>
 8003048:	0003      	movs	r3, r0
 800304a:	2b01      	cmp	r3, #1
 800304c:	d101      	bne.n	8003052 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e024      	b.n	800309c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	0018      	movs	r0, r3
 800305e:	f001 f917 	bl	8004290 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	490d      	ldr	r1, [pc, #52]	; (80030a4 <HAL_UART_Init+0xa8>)
 800306e:	400a      	ands	r2, r1
 8003070:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	689a      	ldr	r2, [r3, #8]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	212a      	movs	r1, #42	; 0x2a
 800307e:	438a      	bics	r2, r1
 8003080:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2101      	movs	r1, #1
 800308e:	430a      	orrs	r2, r1
 8003090:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	0018      	movs	r0, r3
 8003096:	f001 f9af 	bl	80043f8 <UART_CheckIdleState>
 800309a:	0003      	movs	r3, r0
}
 800309c:	0018      	movs	r0, r3
 800309e:	46bd      	mov	sp, r7
 80030a0:	b002      	add	sp, #8
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	ffffb7ff 	.word	0xffffb7ff

080030a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030aa:	b0a1      	sub	sp, #132	; 0x84
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	65f8      	str	r0, [r7, #92]	; 0x5c
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	677b      	str	r3, [r7, #116]	; 0x74
  HAL_StatusTypeDef ret               = HAL_OK;
 80030b4:	231b      	movs	r3, #27
 80030b6:	2258      	movs	r2, #88	; 0x58
 80030b8:	18ba      	adds	r2, r7, r2
 80030ba:	18d2      	adds	r2, r2, r3
 80030bc:	2300      	movs	r3, #0
 80030be:	7013      	strb	r3, [r2, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80030c0:	2300      	movs	r3, #0
 80030c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	431a      	orrs	r2, r3
 80030ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	431a      	orrs	r2, r3
 80030d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030d6:	69db      	ldr	r3, [r3, #28]
 80030d8:	4313      	orrs	r3, r2
 80030da:	67fb      	str	r3, [r7, #124]	; 0x7c
  tmpreg |= (uint32_t)huart->FifoMode;
 80030dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030de:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80030e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030e2:	4313      	orrs	r3, r2
 80030e4:	67fb      	str	r3, [r7, #124]	; 0x7c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	4bba      	ldr	r3, [pc, #744]	; (80033d8 <UART_SetConfig+0x330>)
 80030ee:	401a      	ands	r2, r3
 80030f0:	0011      	movs	r1, r2
 80030f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030f8:	430b      	orrs	r3, r1
 80030fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	4bb6      	ldr	r3, [pc, #728]	; (80033dc <UART_SetConfig+0x334>)
 8003104:	401a      	ands	r2, r3
 8003106:	0010      	movs	r0, r2
 8003108:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800310a:	68d9      	ldr	r1, [r3, #12]
 800310c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	0003      	movs	r3, r0
 8003112:	430b      	orrs	r3, r1
 8003114:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003116:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	67fb      	str	r3, [r7, #124]	; 0x7c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800311c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	4baf      	ldr	r3, [pc, #700]	; (80033e0 <UART_SetConfig+0x338>)
 8003122:	429a      	cmp	r2, r3
 8003124:	d004      	beq.n	8003130 <UART_SetConfig+0x88>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003126:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003128:	6a1a      	ldr	r2, [r3, #32]
 800312a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800312c:	4313      	orrs	r3, r2
 800312e:	67fb      	str	r3, [r7, #124]	; 0x7c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003130:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689a      	ldr	r2, [r3, #8]
 8003136:	4bab      	ldr	r3, [pc, #684]	; (80033e4 <UART_SetConfig+0x33c>)
 8003138:	401a      	ands	r2, r3
 800313a:	0011      	movs	r1, r2
 800313c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003142:	430b      	orrs	r3, r1
 8003144:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003146:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800314c:	230f      	movs	r3, #15
 800314e:	439a      	bics	r2, r3
 8003150:	0010      	movs	r0, r2
 8003152:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003154:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003156:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	0003      	movs	r3, r0
 800315c:	430b      	orrs	r3, r1
 800315e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003160:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	4ba0      	ldr	r3, [pc, #640]	; (80033e8 <UART_SetConfig+0x340>)
 8003166:	429a      	cmp	r2, r3
 8003168:	d12f      	bne.n	80031ca <UART_SetConfig+0x122>
 800316a:	4ba0      	ldr	r3, [pc, #640]	; (80033ec <UART_SetConfig+0x344>)
 800316c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800316e:	2303      	movs	r3, #3
 8003170:	4013      	ands	r3, r2
 8003172:	2b01      	cmp	r3, #1
 8003174:	d013      	beq.n	800319e <UART_SetConfig+0xf6>
 8003176:	d304      	bcc.n	8003182 <UART_SetConfig+0xda>
 8003178:	2b02      	cmp	r3, #2
 800317a:	d009      	beq.n	8003190 <UART_SetConfig+0xe8>
 800317c:	2b03      	cmp	r3, #3
 800317e:	d015      	beq.n	80031ac <UART_SetConfig+0x104>
 8003180:	e01b      	b.n	80031ba <UART_SetConfig+0x112>
 8003182:	2323      	movs	r3, #35	; 0x23
 8003184:	2258      	movs	r2, #88	; 0x58
 8003186:	18ba      	adds	r2, r7, r2
 8003188:	18d2      	adds	r2, r2, r3
 800318a:	2300      	movs	r3, #0
 800318c:	7013      	strb	r3, [r2, #0]
 800318e:	e0b4      	b.n	80032fa <UART_SetConfig+0x252>
 8003190:	2323      	movs	r3, #35	; 0x23
 8003192:	2258      	movs	r2, #88	; 0x58
 8003194:	18ba      	adds	r2, r7, r2
 8003196:	18d2      	adds	r2, r2, r3
 8003198:	2302      	movs	r3, #2
 800319a:	7013      	strb	r3, [r2, #0]
 800319c:	e0ad      	b.n	80032fa <UART_SetConfig+0x252>
 800319e:	2323      	movs	r3, #35	; 0x23
 80031a0:	2258      	movs	r2, #88	; 0x58
 80031a2:	18ba      	adds	r2, r7, r2
 80031a4:	18d2      	adds	r2, r2, r3
 80031a6:	2304      	movs	r3, #4
 80031a8:	7013      	strb	r3, [r2, #0]
 80031aa:	e0a6      	b.n	80032fa <UART_SetConfig+0x252>
 80031ac:	2323      	movs	r3, #35	; 0x23
 80031ae:	2258      	movs	r2, #88	; 0x58
 80031b0:	18ba      	adds	r2, r7, r2
 80031b2:	18d2      	adds	r2, r2, r3
 80031b4:	2308      	movs	r3, #8
 80031b6:	7013      	strb	r3, [r2, #0]
 80031b8:	e09f      	b.n	80032fa <UART_SetConfig+0x252>
 80031ba:	2323      	movs	r3, #35	; 0x23
 80031bc:	2258      	movs	r2, #88	; 0x58
 80031be:	18ba      	adds	r2, r7, r2
 80031c0:	18d2      	adds	r2, r2, r3
 80031c2:	2310      	movs	r3, #16
 80031c4:	7013      	strb	r3, [r2, #0]
 80031c6:	46c0      	nop			; (mov r8, r8)
 80031c8:	e097      	b.n	80032fa <UART_SetConfig+0x252>
 80031ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	4b88      	ldr	r3, [pc, #544]	; (80033f0 <UART_SetConfig+0x348>)
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d132      	bne.n	800323a <UART_SetConfig+0x192>
 80031d4:	4b85      	ldr	r3, [pc, #532]	; (80033ec <UART_SetConfig+0x344>)
 80031d6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80031d8:	230c      	movs	r3, #12
 80031da:	4013      	ands	r3, r2
 80031dc:	2b04      	cmp	r3, #4
 80031de:	d016      	beq.n	800320e <UART_SetConfig+0x166>
 80031e0:	d802      	bhi.n	80031e8 <UART_SetConfig+0x140>
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d005      	beq.n	80031f2 <UART_SetConfig+0x14a>
 80031e6:	e020      	b.n	800322a <UART_SetConfig+0x182>
 80031e8:	2b08      	cmp	r3, #8
 80031ea:	d009      	beq.n	8003200 <UART_SetConfig+0x158>
 80031ec:	2b0c      	cmp	r3, #12
 80031ee:	d015      	beq.n	800321c <UART_SetConfig+0x174>
 80031f0:	e01b      	b.n	800322a <UART_SetConfig+0x182>
 80031f2:	2323      	movs	r3, #35	; 0x23
 80031f4:	2258      	movs	r2, #88	; 0x58
 80031f6:	18ba      	adds	r2, r7, r2
 80031f8:	18d2      	adds	r2, r2, r3
 80031fa:	2300      	movs	r3, #0
 80031fc:	7013      	strb	r3, [r2, #0]
 80031fe:	e07c      	b.n	80032fa <UART_SetConfig+0x252>
 8003200:	2323      	movs	r3, #35	; 0x23
 8003202:	2258      	movs	r2, #88	; 0x58
 8003204:	18ba      	adds	r2, r7, r2
 8003206:	18d2      	adds	r2, r2, r3
 8003208:	2302      	movs	r3, #2
 800320a:	7013      	strb	r3, [r2, #0]
 800320c:	e075      	b.n	80032fa <UART_SetConfig+0x252>
 800320e:	2323      	movs	r3, #35	; 0x23
 8003210:	2258      	movs	r2, #88	; 0x58
 8003212:	18ba      	adds	r2, r7, r2
 8003214:	18d2      	adds	r2, r2, r3
 8003216:	2304      	movs	r3, #4
 8003218:	7013      	strb	r3, [r2, #0]
 800321a:	e06e      	b.n	80032fa <UART_SetConfig+0x252>
 800321c:	2323      	movs	r3, #35	; 0x23
 800321e:	2258      	movs	r2, #88	; 0x58
 8003220:	18ba      	adds	r2, r7, r2
 8003222:	18d2      	adds	r2, r2, r3
 8003224:	2308      	movs	r3, #8
 8003226:	7013      	strb	r3, [r2, #0]
 8003228:	e067      	b.n	80032fa <UART_SetConfig+0x252>
 800322a:	2323      	movs	r3, #35	; 0x23
 800322c:	2258      	movs	r2, #88	; 0x58
 800322e:	18ba      	adds	r2, r7, r2
 8003230:	18d2      	adds	r2, r2, r3
 8003232:	2310      	movs	r3, #16
 8003234:	7013      	strb	r3, [r2, #0]
 8003236:	46c0      	nop			; (mov r8, r8)
 8003238:	e05f      	b.n	80032fa <UART_SetConfig+0x252>
 800323a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	4b6d      	ldr	r3, [pc, #436]	; (80033f4 <UART_SetConfig+0x34c>)
 8003240:	429a      	cmp	r2, r3
 8003242:	d106      	bne.n	8003252 <UART_SetConfig+0x1aa>
 8003244:	2323      	movs	r3, #35	; 0x23
 8003246:	2258      	movs	r2, #88	; 0x58
 8003248:	18ba      	adds	r2, r7, r2
 800324a:	18d2      	adds	r2, r2, r3
 800324c:	2300      	movs	r3, #0
 800324e:	7013      	strb	r3, [r2, #0]
 8003250:	e053      	b.n	80032fa <UART_SetConfig+0x252>
 8003252:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	4b68      	ldr	r3, [pc, #416]	; (80033f8 <UART_SetConfig+0x350>)
 8003258:	429a      	cmp	r2, r3
 800325a:	d106      	bne.n	800326a <UART_SetConfig+0x1c2>
 800325c:	2323      	movs	r3, #35	; 0x23
 800325e:	2258      	movs	r2, #88	; 0x58
 8003260:	18ba      	adds	r2, r7, r2
 8003262:	18d2      	adds	r2, r2, r3
 8003264:	2300      	movs	r3, #0
 8003266:	7013      	strb	r3, [r2, #0]
 8003268:	e047      	b.n	80032fa <UART_SetConfig+0x252>
 800326a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	4b5c      	ldr	r3, [pc, #368]	; (80033e0 <UART_SetConfig+0x338>)
 8003270:	429a      	cmp	r2, r3
 8003272:	d13c      	bne.n	80032ee <UART_SetConfig+0x246>
 8003274:	4b5d      	ldr	r3, [pc, #372]	; (80033ec <UART_SetConfig+0x344>)
 8003276:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003278:	23c0      	movs	r3, #192	; 0xc0
 800327a:	011b      	lsls	r3, r3, #4
 800327c:	401a      	ands	r2, r3
 800327e:	2380      	movs	r3, #128	; 0x80
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	429a      	cmp	r2, r3
 8003284:	d01d      	beq.n	80032c2 <UART_SetConfig+0x21a>
 8003286:	2380      	movs	r3, #128	; 0x80
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	429a      	cmp	r2, r3
 800328c:	d802      	bhi.n	8003294 <UART_SetConfig+0x1ec>
 800328e:	2a00      	cmp	r2, #0
 8003290:	d009      	beq.n	80032a6 <UART_SetConfig+0x1fe>
 8003292:	e024      	b.n	80032de <UART_SetConfig+0x236>
 8003294:	2380      	movs	r3, #128	; 0x80
 8003296:	011b      	lsls	r3, r3, #4
 8003298:	429a      	cmp	r2, r3
 800329a:	d00b      	beq.n	80032b4 <UART_SetConfig+0x20c>
 800329c:	23c0      	movs	r3, #192	; 0xc0
 800329e:	011b      	lsls	r3, r3, #4
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d015      	beq.n	80032d0 <UART_SetConfig+0x228>
 80032a4:	e01b      	b.n	80032de <UART_SetConfig+0x236>
 80032a6:	2323      	movs	r3, #35	; 0x23
 80032a8:	2258      	movs	r2, #88	; 0x58
 80032aa:	18ba      	adds	r2, r7, r2
 80032ac:	18d2      	adds	r2, r2, r3
 80032ae:	2300      	movs	r3, #0
 80032b0:	7013      	strb	r3, [r2, #0]
 80032b2:	e022      	b.n	80032fa <UART_SetConfig+0x252>
 80032b4:	2323      	movs	r3, #35	; 0x23
 80032b6:	2258      	movs	r2, #88	; 0x58
 80032b8:	18ba      	adds	r2, r7, r2
 80032ba:	18d2      	adds	r2, r2, r3
 80032bc:	2302      	movs	r3, #2
 80032be:	7013      	strb	r3, [r2, #0]
 80032c0:	e01b      	b.n	80032fa <UART_SetConfig+0x252>
 80032c2:	2323      	movs	r3, #35	; 0x23
 80032c4:	2258      	movs	r2, #88	; 0x58
 80032c6:	18ba      	adds	r2, r7, r2
 80032c8:	18d2      	adds	r2, r2, r3
 80032ca:	2304      	movs	r3, #4
 80032cc:	7013      	strb	r3, [r2, #0]
 80032ce:	e014      	b.n	80032fa <UART_SetConfig+0x252>
 80032d0:	2323      	movs	r3, #35	; 0x23
 80032d2:	2258      	movs	r2, #88	; 0x58
 80032d4:	18ba      	adds	r2, r7, r2
 80032d6:	18d2      	adds	r2, r2, r3
 80032d8:	2308      	movs	r3, #8
 80032da:	7013      	strb	r3, [r2, #0]
 80032dc:	e00d      	b.n	80032fa <UART_SetConfig+0x252>
 80032de:	2323      	movs	r3, #35	; 0x23
 80032e0:	2258      	movs	r2, #88	; 0x58
 80032e2:	18ba      	adds	r2, r7, r2
 80032e4:	18d2      	adds	r2, r2, r3
 80032e6:	2310      	movs	r3, #16
 80032e8:	7013      	strb	r3, [r2, #0]
 80032ea:	46c0      	nop			; (mov r8, r8)
 80032ec:	e005      	b.n	80032fa <UART_SetConfig+0x252>
 80032ee:	2323      	movs	r3, #35	; 0x23
 80032f0:	2258      	movs	r2, #88	; 0x58
 80032f2:	18ba      	adds	r2, r7, r2
 80032f4:	18d2      	adds	r2, r2, r3
 80032f6:	2310      	movs	r3, #16
 80032f8:	7013      	strb	r3, [r2, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80032fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	4b38      	ldr	r3, [pc, #224]	; (80033e0 <UART_SetConfig+0x338>)
 8003300:	429a      	cmp	r2, r3
 8003302:	d001      	beq.n	8003308 <UART_SetConfig+0x260>
 8003304:	f000 fbd0 	bl	8003aa8 <UART_SetConfig+0xa00>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003308:	2323      	movs	r3, #35	; 0x23
 800330a:	2258      	movs	r2, #88	; 0x58
 800330c:	4694      	mov	ip, r2
 800330e:	44bc      	add	ip, r7
 8003310:	4463      	add	r3, ip
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	2b02      	cmp	r3, #2
 8003316:	d100      	bne.n	800331a <UART_SetConfig+0x272>
 8003318:	e070      	b.n	80033fc <UART_SetConfig+0x354>
 800331a:	dc02      	bgt.n	8003322 <UART_SetConfig+0x27a>
 800331c:	2b00      	cmp	r3, #0
 800331e:	d007      	beq.n	8003330 <UART_SetConfig+0x288>
 8003320:	e15f      	b.n	80035e2 <UART_SetConfig+0x53a>
 8003322:	2b04      	cmp	r3, #4
 8003324:	d100      	bne.n	8003328 <UART_SetConfig+0x280>
 8003326:	e0b4      	b.n	8003492 <UART_SetConfig+0x3ea>
 8003328:	2b08      	cmp	r3, #8
 800332a:	d100      	bne.n	800332e <UART_SetConfig+0x286>
 800332c:	e105      	b.n	800353a <UART_SetConfig+0x492>
 800332e:	e158      	b.n	80035e2 <UART_SetConfig+0x53a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003330:	f7fe fc58 	bl	8001be4 <HAL_RCC_GetPCLK1Freq>
 8003334:	0002      	movs	r2, r0
 8003336:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333a:	2b00      	cmp	r3, #0
 800333c:	d044      	beq.n	80033c8 <UART_SetConfig+0x320>
 800333e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003342:	2b01      	cmp	r3, #1
 8003344:	d03e      	beq.n	80033c4 <UART_SetConfig+0x31c>
 8003346:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334a:	2b02      	cmp	r3, #2
 800334c:	d038      	beq.n	80033c0 <UART_SetConfig+0x318>
 800334e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003352:	2b03      	cmp	r3, #3
 8003354:	d032      	beq.n	80033bc <UART_SetConfig+0x314>
 8003356:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335a:	2b04      	cmp	r3, #4
 800335c:	d02c      	beq.n	80033b8 <UART_SetConfig+0x310>
 800335e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003362:	2b05      	cmp	r3, #5
 8003364:	d026      	beq.n	80033b4 <UART_SetConfig+0x30c>
 8003366:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336a:	2b06      	cmp	r3, #6
 800336c:	d020      	beq.n	80033b0 <UART_SetConfig+0x308>
 800336e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003372:	2b07      	cmp	r3, #7
 8003374:	d01a      	beq.n	80033ac <UART_SetConfig+0x304>
 8003376:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337a:	2b08      	cmp	r3, #8
 800337c:	d014      	beq.n	80033a8 <UART_SetConfig+0x300>
 800337e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	2b09      	cmp	r3, #9
 8003384:	d00e      	beq.n	80033a4 <UART_SetConfig+0x2fc>
 8003386:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338a:	2b0a      	cmp	r3, #10
 800338c:	d008      	beq.n	80033a0 <UART_SetConfig+0x2f8>
 800338e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003392:	2b0b      	cmp	r3, #11
 8003394:	d102      	bne.n	800339c <UART_SetConfig+0x2f4>
 8003396:	2380      	movs	r3, #128	; 0x80
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	e016      	b.n	80033ca <UART_SetConfig+0x322>
 800339c:	2301      	movs	r3, #1
 800339e:	e014      	b.n	80033ca <UART_SetConfig+0x322>
 80033a0:	2380      	movs	r3, #128	; 0x80
 80033a2:	e012      	b.n	80033ca <UART_SetConfig+0x322>
 80033a4:	2340      	movs	r3, #64	; 0x40
 80033a6:	e010      	b.n	80033ca <UART_SetConfig+0x322>
 80033a8:	2320      	movs	r3, #32
 80033aa:	e00e      	b.n	80033ca <UART_SetConfig+0x322>
 80033ac:	2310      	movs	r3, #16
 80033ae:	e00c      	b.n	80033ca <UART_SetConfig+0x322>
 80033b0:	230c      	movs	r3, #12
 80033b2:	e00a      	b.n	80033ca <UART_SetConfig+0x322>
 80033b4:	230a      	movs	r3, #10
 80033b6:	e008      	b.n	80033ca <UART_SetConfig+0x322>
 80033b8:	2308      	movs	r3, #8
 80033ba:	e006      	b.n	80033ca <UART_SetConfig+0x322>
 80033bc:	2306      	movs	r3, #6
 80033be:	e004      	b.n	80033ca <UART_SetConfig+0x322>
 80033c0:	2304      	movs	r3, #4
 80033c2:	e002      	b.n	80033ca <UART_SetConfig+0x322>
 80033c4:	2302      	movs	r3, #2
 80033c6:	e000      	b.n	80033ca <UART_SetConfig+0x322>
 80033c8:	2301      	movs	r3, #1
 80033ca:	0019      	movs	r1, r3
 80033cc:	0010      	movs	r0, r2
 80033ce:	f7fc fe99 	bl	8000104 <__udivsi3>
 80033d2:	0003      	movs	r3, r0
 80033d4:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 80033d6:	e10b      	b.n	80035f0 <UART_SetConfig+0x548>
 80033d8:	cfff69f3 	.word	0xcfff69f3
 80033dc:	ffffcfff 	.word	0xffffcfff
 80033e0:	40008000 	.word	0x40008000
 80033e4:	11fff4ff 	.word	0x11fff4ff
 80033e8:	40013800 	.word	0x40013800
 80033ec:	40021000 	.word	0x40021000
 80033f0:	40004400 	.word	0x40004400
 80033f4:	40004800 	.word	0x40004800
 80033f8:	40004c00 	.word	0x40004c00
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80033fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003400:	2b00      	cmp	r3, #0
 8003402:	d043      	beq.n	800348c <UART_SetConfig+0x3e4>
 8003404:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003408:	2b01      	cmp	r3, #1
 800340a:	d03d      	beq.n	8003488 <UART_SetConfig+0x3e0>
 800340c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800340e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003410:	2b02      	cmp	r3, #2
 8003412:	d037      	beq.n	8003484 <UART_SetConfig+0x3dc>
 8003414:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	2b03      	cmp	r3, #3
 800341a:	d031      	beq.n	8003480 <UART_SetConfig+0x3d8>
 800341c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800341e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003420:	2b04      	cmp	r3, #4
 8003422:	d02b      	beq.n	800347c <UART_SetConfig+0x3d4>
 8003424:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003428:	2b05      	cmp	r3, #5
 800342a:	d025      	beq.n	8003478 <UART_SetConfig+0x3d0>
 800342c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800342e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003430:	2b06      	cmp	r3, #6
 8003432:	d01f      	beq.n	8003474 <UART_SetConfig+0x3cc>
 8003434:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003438:	2b07      	cmp	r3, #7
 800343a:	d019      	beq.n	8003470 <UART_SetConfig+0x3c8>
 800343c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003440:	2b08      	cmp	r3, #8
 8003442:	d013      	beq.n	800346c <UART_SetConfig+0x3c4>
 8003444:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003448:	2b09      	cmp	r3, #9
 800344a:	d00d      	beq.n	8003468 <UART_SetConfig+0x3c0>
 800344c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800344e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003450:	2b0a      	cmp	r3, #10
 8003452:	d007      	beq.n	8003464 <UART_SetConfig+0x3bc>
 8003454:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003458:	2b0b      	cmp	r3, #11
 800345a:	d101      	bne.n	8003460 <UART_SetConfig+0x3b8>
 800345c:	4bab      	ldr	r3, [pc, #684]	; (800370c <UART_SetConfig+0x664>)
 800345e:	e016      	b.n	800348e <UART_SetConfig+0x3e6>
 8003460:	4bab      	ldr	r3, [pc, #684]	; (8003710 <UART_SetConfig+0x668>)
 8003462:	e014      	b.n	800348e <UART_SetConfig+0x3e6>
 8003464:	4bab      	ldr	r3, [pc, #684]	; (8003714 <UART_SetConfig+0x66c>)
 8003466:	e012      	b.n	800348e <UART_SetConfig+0x3e6>
 8003468:	4bab      	ldr	r3, [pc, #684]	; (8003718 <UART_SetConfig+0x670>)
 800346a:	e010      	b.n	800348e <UART_SetConfig+0x3e6>
 800346c:	4bab      	ldr	r3, [pc, #684]	; (800371c <UART_SetConfig+0x674>)
 800346e:	e00e      	b.n	800348e <UART_SetConfig+0x3e6>
 8003470:	4bab      	ldr	r3, [pc, #684]	; (8003720 <UART_SetConfig+0x678>)
 8003472:	e00c      	b.n	800348e <UART_SetConfig+0x3e6>
 8003474:	4bab      	ldr	r3, [pc, #684]	; (8003724 <UART_SetConfig+0x67c>)
 8003476:	e00a      	b.n	800348e <UART_SetConfig+0x3e6>
 8003478:	4bab      	ldr	r3, [pc, #684]	; (8003728 <UART_SetConfig+0x680>)
 800347a:	e008      	b.n	800348e <UART_SetConfig+0x3e6>
 800347c:	4bab      	ldr	r3, [pc, #684]	; (800372c <UART_SetConfig+0x684>)
 800347e:	e006      	b.n	800348e <UART_SetConfig+0x3e6>
 8003480:	4bab      	ldr	r3, [pc, #684]	; (8003730 <UART_SetConfig+0x688>)
 8003482:	e004      	b.n	800348e <UART_SetConfig+0x3e6>
 8003484:	4bab      	ldr	r3, [pc, #684]	; (8003734 <UART_SetConfig+0x68c>)
 8003486:	e002      	b.n	800348e <UART_SetConfig+0x3e6>
 8003488:	4bab      	ldr	r3, [pc, #684]	; (8003738 <UART_SetConfig+0x690>)
 800348a:	e000      	b.n	800348e <UART_SetConfig+0x3e6>
 800348c:	4ba0      	ldr	r3, [pc, #640]	; (8003710 <UART_SetConfig+0x668>)
 800348e:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8003490:	e0ae      	b.n	80035f0 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003492:	f7fe fb1b 	bl	8001acc <HAL_RCC_GetSysClockFreq>
 8003496:	0002      	movs	r2, r0
 8003498:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800349a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349c:	2b00      	cmp	r3, #0
 800349e:	d044      	beq.n	800352a <UART_SetConfig+0x482>
 80034a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d03e      	beq.n	8003526 <UART_SetConfig+0x47e>
 80034a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d038      	beq.n	8003522 <UART_SetConfig+0x47a>
 80034b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b4:	2b03      	cmp	r3, #3
 80034b6:	d032      	beq.n	800351e <UART_SetConfig+0x476>
 80034b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034bc:	2b04      	cmp	r3, #4
 80034be:	d02c      	beq.n	800351a <UART_SetConfig+0x472>
 80034c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c4:	2b05      	cmp	r3, #5
 80034c6:	d026      	beq.n	8003516 <UART_SetConfig+0x46e>
 80034c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034cc:	2b06      	cmp	r3, #6
 80034ce:	d020      	beq.n	8003512 <UART_SetConfig+0x46a>
 80034d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d4:	2b07      	cmp	r3, #7
 80034d6:	d01a      	beq.n	800350e <UART_SetConfig+0x466>
 80034d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034dc:	2b08      	cmp	r3, #8
 80034de:	d014      	beq.n	800350a <UART_SetConfig+0x462>
 80034e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e4:	2b09      	cmp	r3, #9
 80034e6:	d00e      	beq.n	8003506 <UART_SetConfig+0x45e>
 80034e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ec:	2b0a      	cmp	r3, #10
 80034ee:	d008      	beq.n	8003502 <UART_SetConfig+0x45a>
 80034f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f4:	2b0b      	cmp	r3, #11
 80034f6:	d102      	bne.n	80034fe <UART_SetConfig+0x456>
 80034f8:	2380      	movs	r3, #128	; 0x80
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	e016      	b.n	800352c <UART_SetConfig+0x484>
 80034fe:	2301      	movs	r3, #1
 8003500:	e014      	b.n	800352c <UART_SetConfig+0x484>
 8003502:	2380      	movs	r3, #128	; 0x80
 8003504:	e012      	b.n	800352c <UART_SetConfig+0x484>
 8003506:	2340      	movs	r3, #64	; 0x40
 8003508:	e010      	b.n	800352c <UART_SetConfig+0x484>
 800350a:	2320      	movs	r3, #32
 800350c:	e00e      	b.n	800352c <UART_SetConfig+0x484>
 800350e:	2310      	movs	r3, #16
 8003510:	e00c      	b.n	800352c <UART_SetConfig+0x484>
 8003512:	230c      	movs	r3, #12
 8003514:	e00a      	b.n	800352c <UART_SetConfig+0x484>
 8003516:	230a      	movs	r3, #10
 8003518:	e008      	b.n	800352c <UART_SetConfig+0x484>
 800351a:	2308      	movs	r3, #8
 800351c:	e006      	b.n	800352c <UART_SetConfig+0x484>
 800351e:	2306      	movs	r3, #6
 8003520:	e004      	b.n	800352c <UART_SetConfig+0x484>
 8003522:	2304      	movs	r3, #4
 8003524:	e002      	b.n	800352c <UART_SetConfig+0x484>
 8003526:	2302      	movs	r3, #2
 8003528:	e000      	b.n	800352c <UART_SetConfig+0x484>
 800352a:	2301      	movs	r3, #1
 800352c:	0019      	movs	r1, r3
 800352e:	0010      	movs	r0, r2
 8003530:	f7fc fde8 	bl	8000104 <__udivsi3>
 8003534:	0003      	movs	r3, r0
 8003536:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8003538:	e05a      	b.n	80035f0 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800353a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800353c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353e:	2b00      	cmp	r3, #0
 8003540:	d04b      	beq.n	80035da <UART_SetConfig+0x532>
 8003542:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003546:	2b01      	cmp	r3, #1
 8003548:	d044      	beq.n	80035d4 <UART_SetConfig+0x52c>
 800354a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800354c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354e:	2b02      	cmp	r3, #2
 8003550:	d03d      	beq.n	80035ce <UART_SetConfig+0x526>
 8003552:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003556:	2b03      	cmp	r3, #3
 8003558:	d037      	beq.n	80035ca <UART_SetConfig+0x522>
 800355a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800355c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355e:	2b04      	cmp	r3, #4
 8003560:	d030      	beq.n	80035c4 <UART_SetConfig+0x51c>
 8003562:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003566:	2b05      	cmp	r3, #5
 8003568:	d02a      	beq.n	80035c0 <UART_SetConfig+0x518>
 800356a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800356c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356e:	2b06      	cmp	r3, #6
 8003570:	d024      	beq.n	80035bc <UART_SetConfig+0x514>
 8003572:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003576:	2b07      	cmp	r3, #7
 8003578:	d01d      	beq.n	80035b6 <UART_SetConfig+0x50e>
 800357a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800357c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357e:	2b08      	cmp	r3, #8
 8003580:	d016      	beq.n	80035b0 <UART_SetConfig+0x508>
 8003582:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003586:	2b09      	cmp	r3, #9
 8003588:	d00f      	beq.n	80035aa <UART_SetConfig+0x502>
 800358a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800358c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358e:	2b0a      	cmp	r3, #10
 8003590:	d008      	beq.n	80035a4 <UART_SetConfig+0x4fc>
 8003592:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003596:	2b0b      	cmp	r3, #11
 8003598:	d101      	bne.n	800359e <UART_SetConfig+0x4f6>
 800359a:	2380      	movs	r3, #128	; 0x80
 800359c:	e01f      	b.n	80035de <UART_SetConfig+0x536>
 800359e:	2380      	movs	r3, #128	; 0x80
 80035a0:	021b      	lsls	r3, r3, #8
 80035a2:	e01c      	b.n	80035de <UART_SetConfig+0x536>
 80035a4:	2380      	movs	r3, #128	; 0x80
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	e019      	b.n	80035de <UART_SetConfig+0x536>
 80035aa:	2380      	movs	r3, #128	; 0x80
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	e016      	b.n	80035de <UART_SetConfig+0x536>
 80035b0:	2380      	movs	r3, #128	; 0x80
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	e013      	b.n	80035de <UART_SetConfig+0x536>
 80035b6:	2380      	movs	r3, #128	; 0x80
 80035b8:	011b      	lsls	r3, r3, #4
 80035ba:	e010      	b.n	80035de <UART_SetConfig+0x536>
 80035bc:	4b5f      	ldr	r3, [pc, #380]	; (800373c <UART_SetConfig+0x694>)
 80035be:	e00e      	b.n	80035de <UART_SetConfig+0x536>
 80035c0:	4b5f      	ldr	r3, [pc, #380]	; (8003740 <UART_SetConfig+0x698>)
 80035c2:	e00c      	b.n	80035de <UART_SetConfig+0x536>
 80035c4:	2380      	movs	r3, #128	; 0x80
 80035c6:	015b      	lsls	r3, r3, #5
 80035c8:	e009      	b.n	80035de <UART_SetConfig+0x536>
 80035ca:	4b5e      	ldr	r3, [pc, #376]	; (8003744 <UART_SetConfig+0x69c>)
 80035cc:	e007      	b.n	80035de <UART_SetConfig+0x536>
 80035ce:	2380      	movs	r3, #128	; 0x80
 80035d0:	019b      	lsls	r3, r3, #6
 80035d2:	e004      	b.n	80035de <UART_SetConfig+0x536>
 80035d4:	2380      	movs	r3, #128	; 0x80
 80035d6:	01db      	lsls	r3, r3, #7
 80035d8:	e001      	b.n	80035de <UART_SetConfig+0x536>
 80035da:	2380      	movs	r3, #128	; 0x80
 80035dc:	021b      	lsls	r3, r3, #8
 80035de:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 80035e0:	e006      	b.n	80035f0 <UART_SetConfig+0x548>
      default:
        ret = HAL_ERROR;
 80035e2:	231b      	movs	r3, #27
 80035e4:	2258      	movs	r2, #88	; 0x58
 80035e6:	18ba      	adds	r2, r7, r2
 80035e8:	18d2      	adds	r2, r2, r3
 80035ea:	2301      	movs	r3, #1
 80035ec:	7013      	strb	r3, [r2, #0]
        break;
 80035ee:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80035f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <UART_SetConfig+0x552>
 80035f6:	f000 fe12 	bl	800421e <UART_SetConfig+0x1176>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80035fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035fc:	685a      	ldr	r2, [r3, #4]
 80035fe:	0013      	movs	r3, r2
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	189a      	adds	r2, r3, r2
 8003604:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003606:	4293      	cmp	r3, r2
 8003608:	d305      	bcc.n	8003616 <UART_SetConfig+0x56e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800360a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003612:	4293      	cmp	r3, r2
 8003614:	d908      	bls.n	8003628 <UART_SetConfig+0x580>
      {
        ret = HAL_ERROR;
 8003616:	231b      	movs	r3, #27
 8003618:	2258      	movs	r2, #88	; 0x58
 800361a:	4694      	mov	ip, r2
 800361c:	44bc      	add	ip, r7
 800361e:	4463      	add	r3, ip
 8003620:	2201      	movs	r2, #1
 8003622:	701a      	strb	r2, [r3, #0]
 8003624:	f000 fdfb 	bl	800421e <UART_SetConfig+0x1176>
      }
      else
      {
        switch (clocksource)
 8003628:	2323      	movs	r3, #35	; 0x23
 800362a:	2258      	movs	r2, #88	; 0x58
 800362c:	4694      	mov	ip, r2
 800362e:	44bc      	add	ip, r7
 8003630:	4463      	add	r3, ip
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	2b02      	cmp	r3, #2
 8003636:	d100      	bne.n	800363a <UART_SetConfig+0x592>
 8003638:	e0ab      	b.n	8003792 <UART_SetConfig+0x6ea>
 800363a:	dc02      	bgt.n	8003642 <UART_SetConfig+0x59a>
 800363c:	2b00      	cmp	r3, #0
 800363e:	d007      	beq.n	8003650 <UART_SetConfig+0x5a8>
 8003640:	e213      	b.n	8003a6a <UART_SetConfig+0x9c2>
 8003642:	2b04      	cmp	r3, #4
 8003644:	d100      	bne.n	8003648 <UART_SetConfig+0x5a0>
 8003646:	e111      	b.n	800386c <UART_SetConfig+0x7c4>
 8003648:	2b08      	cmp	r3, #8
 800364a:	d100      	bne.n	800364e <UART_SetConfig+0x5a6>
 800364c:	e196      	b.n	800397c <UART_SetConfig+0x8d4>
 800364e:	e20c      	b.n	8003a6a <UART_SetConfig+0x9c2>
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8003650:	f7fe fac8 	bl	8001be4 <HAL_RCC_GetPCLK1Freq>
 8003654:	0003      	movs	r3, r0
 8003656:	66bb      	str	r3, [r7, #104]	; 0x68
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003658:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800365a:	64bb      	str	r3, [r7, #72]	; 0x48
 800365c:	2300      	movs	r3, #0
 800365e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003660:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003664:	2b00      	cmp	r3, #0
 8003666:	d100      	bne.n	800366a <UART_SetConfig+0x5c2>
 8003668:	e06e      	b.n	8003748 <UART_SetConfig+0x6a0>
 800366a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800366c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366e:	2b01      	cmp	r3, #1
 8003670:	d049      	beq.n	8003706 <UART_SetConfig+0x65e>
 8003672:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003676:	2b02      	cmp	r3, #2
 8003678:	d042      	beq.n	8003700 <UART_SetConfig+0x658>
 800367a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800367c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367e:	2b03      	cmp	r3, #3
 8003680:	d03b      	beq.n	80036fa <UART_SetConfig+0x652>
 8003682:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003686:	2b04      	cmp	r3, #4
 8003688:	d034      	beq.n	80036f4 <UART_SetConfig+0x64c>
 800368a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800368c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368e:	2b05      	cmp	r3, #5
 8003690:	d02d      	beq.n	80036ee <UART_SetConfig+0x646>
 8003692:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003696:	2b06      	cmp	r3, #6
 8003698:	d026      	beq.n	80036e8 <UART_SetConfig+0x640>
 800369a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800369c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369e:	2b07      	cmp	r3, #7
 80036a0:	d01f      	beq.n	80036e2 <UART_SetConfig+0x63a>
 80036a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a6:	2b08      	cmp	r3, #8
 80036a8:	d018      	beq.n	80036dc <UART_SetConfig+0x634>
 80036aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ae:	2b09      	cmp	r3, #9
 80036b0:	d011      	beq.n	80036d6 <UART_SetConfig+0x62e>
 80036b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b6:	2b0a      	cmp	r3, #10
 80036b8:	d00a      	beq.n	80036d0 <UART_SetConfig+0x628>
 80036ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036be:	2b0b      	cmp	r3, #11
 80036c0:	d103      	bne.n	80036ca <UART_SetConfig+0x622>
 80036c2:	2380      	movs	r3, #128	; 0x80
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	2400      	movs	r4, #0
 80036c8:	e040      	b.n	800374c <UART_SetConfig+0x6a4>
 80036ca:	2301      	movs	r3, #1
 80036cc:	2400      	movs	r4, #0
 80036ce:	e03d      	b.n	800374c <UART_SetConfig+0x6a4>
 80036d0:	2380      	movs	r3, #128	; 0x80
 80036d2:	2400      	movs	r4, #0
 80036d4:	e03a      	b.n	800374c <UART_SetConfig+0x6a4>
 80036d6:	2340      	movs	r3, #64	; 0x40
 80036d8:	2400      	movs	r4, #0
 80036da:	e037      	b.n	800374c <UART_SetConfig+0x6a4>
 80036dc:	2320      	movs	r3, #32
 80036de:	2400      	movs	r4, #0
 80036e0:	e034      	b.n	800374c <UART_SetConfig+0x6a4>
 80036e2:	2310      	movs	r3, #16
 80036e4:	2400      	movs	r4, #0
 80036e6:	e031      	b.n	800374c <UART_SetConfig+0x6a4>
 80036e8:	230c      	movs	r3, #12
 80036ea:	2400      	movs	r4, #0
 80036ec:	e02e      	b.n	800374c <UART_SetConfig+0x6a4>
 80036ee:	230a      	movs	r3, #10
 80036f0:	2400      	movs	r4, #0
 80036f2:	e02b      	b.n	800374c <UART_SetConfig+0x6a4>
 80036f4:	2308      	movs	r3, #8
 80036f6:	2400      	movs	r4, #0
 80036f8:	e028      	b.n	800374c <UART_SetConfig+0x6a4>
 80036fa:	2306      	movs	r3, #6
 80036fc:	2400      	movs	r4, #0
 80036fe:	e025      	b.n	800374c <UART_SetConfig+0x6a4>
 8003700:	2304      	movs	r3, #4
 8003702:	2400      	movs	r4, #0
 8003704:	e022      	b.n	800374c <UART_SetConfig+0x6a4>
 8003706:	2302      	movs	r3, #2
 8003708:	2400      	movs	r4, #0
 800370a:	e01f      	b.n	800374c <UART_SetConfig+0x6a4>
 800370c:	0000f424 	.word	0x0000f424
 8003710:	00f42400 	.word	0x00f42400
 8003714:	0001e848 	.word	0x0001e848
 8003718:	0003d090 	.word	0x0003d090
 800371c:	0007a120 	.word	0x0007a120
 8003720:	000f4240 	.word	0x000f4240
 8003724:	00145855 	.word	0x00145855
 8003728:	00186a00 	.word	0x00186a00
 800372c:	001e8480 	.word	0x001e8480
 8003730:	0028b0aa 	.word	0x0028b0aa
 8003734:	003d0900 	.word	0x003d0900
 8003738:	007a1200 	.word	0x007a1200
 800373c:	00000aaa 	.word	0x00000aaa
 8003740:	00000ccc 	.word	0x00000ccc
 8003744:	00001555 	.word	0x00001555
 8003748:	2301      	movs	r3, #1
 800374a:	2400      	movs	r4, #0
 800374c:	001a      	movs	r2, r3
 800374e:	0023      	movs	r3, r4
 8003750:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003752:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003754:	f7fc fe4c 	bl	80003f0 <__aeabi_uldivmod>
 8003758:	0003      	movs	r3, r0
 800375a:	000c      	movs	r4, r1
 800375c:	0e1a      	lsrs	r2, r3, #24
 800375e:	0226      	lsls	r6, r4, #8
 8003760:	4316      	orrs	r6, r2
 8003762:	021d      	lsls	r5, r3, #8
 8003764:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	085b      	lsrs	r3, r3, #1
 800376a:	643b      	str	r3, [r7, #64]	; 0x40
 800376c:	2300      	movs	r3, #0
 800376e:	647b      	str	r3, [r7, #68]	; 0x44
 8003770:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003772:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003774:	1940      	adds	r0, r0, r5
 8003776:	4171      	adcs	r1, r6
 8003778:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	63bb      	str	r3, [r7, #56]	; 0x38
 800377e:	2300      	movs	r3, #0
 8003780:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003782:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003786:	f7fc fe33 	bl	80003f0 <__aeabi_uldivmod>
 800378a:	0003      	movs	r3, r0
 800378c:	000c      	movs	r4, r1
 800378e:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 8003790:	e173      	b.n	8003a7a <UART_SetConfig+0x9d2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003792:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003796:	2b00      	cmp	r3, #0
 8003798:	d04f      	beq.n	800383a <UART_SetConfig+0x792>
 800379a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d048      	beq.n	8003834 <UART_SetConfig+0x78c>
 80037a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d041      	beq.n	800382e <UART_SetConfig+0x786>
 80037aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ae:	2b03      	cmp	r3, #3
 80037b0:	d03a      	beq.n	8003828 <UART_SetConfig+0x780>
 80037b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b6:	2b04      	cmp	r3, #4
 80037b8:	d033      	beq.n	8003822 <UART_SetConfig+0x77a>
 80037ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	2b05      	cmp	r3, #5
 80037c0:	d02c      	beq.n	800381c <UART_SetConfig+0x774>
 80037c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c6:	2b06      	cmp	r3, #6
 80037c8:	d025      	beq.n	8003816 <UART_SetConfig+0x76e>
 80037ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ce:	2b07      	cmp	r3, #7
 80037d0:	d01e      	beq.n	8003810 <UART_SetConfig+0x768>
 80037d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d6:	2b08      	cmp	r3, #8
 80037d8:	d017      	beq.n	800380a <UART_SetConfig+0x762>
 80037da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037de:	2b09      	cmp	r3, #9
 80037e0:	d010      	beq.n	8003804 <UART_SetConfig+0x75c>
 80037e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e6:	2b0a      	cmp	r3, #10
 80037e8:	d009      	beq.n	80037fe <UART_SetConfig+0x756>
 80037ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ee:	2b0b      	cmp	r3, #11
 80037f0:	d102      	bne.n	80037f8 <UART_SetConfig+0x750>
 80037f2:	4bbb      	ldr	r3, [pc, #748]	; (8003ae0 <UART_SetConfig+0xa38>)
 80037f4:	2400      	movs	r4, #0
 80037f6:	e022      	b.n	800383e <UART_SetConfig+0x796>
 80037f8:	4bba      	ldr	r3, [pc, #744]	; (8003ae4 <UART_SetConfig+0xa3c>)
 80037fa:	2400      	movs	r4, #0
 80037fc:	e01f      	b.n	800383e <UART_SetConfig+0x796>
 80037fe:	4bba      	ldr	r3, [pc, #744]	; (8003ae8 <UART_SetConfig+0xa40>)
 8003800:	2400      	movs	r4, #0
 8003802:	e01c      	b.n	800383e <UART_SetConfig+0x796>
 8003804:	4bb9      	ldr	r3, [pc, #740]	; (8003aec <UART_SetConfig+0xa44>)
 8003806:	2400      	movs	r4, #0
 8003808:	e019      	b.n	800383e <UART_SetConfig+0x796>
 800380a:	4bb9      	ldr	r3, [pc, #740]	; (8003af0 <UART_SetConfig+0xa48>)
 800380c:	2400      	movs	r4, #0
 800380e:	e016      	b.n	800383e <UART_SetConfig+0x796>
 8003810:	4bb8      	ldr	r3, [pc, #736]	; (8003af4 <UART_SetConfig+0xa4c>)
 8003812:	2400      	movs	r4, #0
 8003814:	e013      	b.n	800383e <UART_SetConfig+0x796>
 8003816:	4bb8      	ldr	r3, [pc, #736]	; (8003af8 <UART_SetConfig+0xa50>)
 8003818:	2400      	movs	r4, #0
 800381a:	e010      	b.n	800383e <UART_SetConfig+0x796>
 800381c:	4bb7      	ldr	r3, [pc, #732]	; (8003afc <UART_SetConfig+0xa54>)
 800381e:	2400      	movs	r4, #0
 8003820:	e00d      	b.n	800383e <UART_SetConfig+0x796>
 8003822:	4bb7      	ldr	r3, [pc, #732]	; (8003b00 <UART_SetConfig+0xa58>)
 8003824:	2400      	movs	r4, #0
 8003826:	e00a      	b.n	800383e <UART_SetConfig+0x796>
 8003828:	4bb6      	ldr	r3, [pc, #728]	; (8003b04 <UART_SetConfig+0xa5c>)
 800382a:	2400      	movs	r4, #0
 800382c:	e007      	b.n	800383e <UART_SetConfig+0x796>
 800382e:	4bb6      	ldr	r3, [pc, #728]	; (8003b08 <UART_SetConfig+0xa60>)
 8003830:	2400      	movs	r4, #0
 8003832:	e004      	b.n	800383e <UART_SetConfig+0x796>
 8003834:	4bb5      	ldr	r3, [pc, #724]	; (8003b0c <UART_SetConfig+0xa64>)
 8003836:	2400      	movs	r4, #0
 8003838:	e001      	b.n	800383e <UART_SetConfig+0x796>
 800383a:	4baa      	ldr	r3, [pc, #680]	; (8003ae4 <UART_SetConfig+0xa3c>)
 800383c:	2400      	movs	r4, #0
 800383e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003840:	6852      	ldr	r2, [r2, #4]
 8003842:	0852      	lsrs	r2, r2, #1
 8003844:	633a      	str	r2, [r7, #48]	; 0x30
 8003846:	2200      	movs	r2, #0
 8003848:	637a      	str	r2, [r7, #52]	; 0x34
 800384a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800384c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800384e:	18c0      	adds	r0, r0, r3
 8003850:	4161      	adcs	r1, r4
 8003852:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	62bb      	str	r3, [r7, #40]	; 0x28
 8003858:	2300      	movs	r3, #0
 800385a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800385c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800385e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003860:	f7fc fdc6 	bl	80003f0 <__aeabi_uldivmod>
 8003864:	0003      	movs	r3, r0
 8003866:	000c      	movs	r4, r1
 8003868:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 800386a:	e106      	b.n	8003a7a <UART_SetConfig+0x9d2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800386c:	f7fe f92e 	bl	8001acc <HAL_RCC_GetSysClockFreq>
 8003870:	0003      	movs	r3, r0
 8003872:	66bb      	str	r3, [r7, #104]	; 0x68
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003874:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003876:	623b      	str	r3, [r7, #32]
 8003878:	2300      	movs	r3, #0
 800387a:	627b      	str	r3, [r7, #36]	; 0x24
 800387c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800387e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003880:	2b00      	cmp	r3, #0
 8003882:	d050      	beq.n	8003926 <UART_SetConfig+0x87e>
 8003884:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003888:	2b01      	cmp	r3, #1
 800388a:	d049      	beq.n	8003920 <UART_SetConfig+0x878>
 800388c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003890:	2b02      	cmp	r3, #2
 8003892:	d042      	beq.n	800391a <UART_SetConfig+0x872>
 8003894:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003898:	2b03      	cmp	r3, #3
 800389a:	d03b      	beq.n	8003914 <UART_SetConfig+0x86c>
 800389c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800389e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a0:	2b04      	cmp	r3, #4
 80038a2:	d034      	beq.n	800390e <UART_SetConfig+0x866>
 80038a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a8:	2b05      	cmp	r3, #5
 80038aa:	d02d      	beq.n	8003908 <UART_SetConfig+0x860>
 80038ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b0:	2b06      	cmp	r3, #6
 80038b2:	d026      	beq.n	8003902 <UART_SetConfig+0x85a>
 80038b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b8:	2b07      	cmp	r3, #7
 80038ba:	d01f      	beq.n	80038fc <UART_SetConfig+0x854>
 80038bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c0:	2b08      	cmp	r3, #8
 80038c2:	d018      	beq.n	80038f6 <UART_SetConfig+0x84e>
 80038c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	2b09      	cmp	r3, #9
 80038ca:	d011      	beq.n	80038f0 <UART_SetConfig+0x848>
 80038cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	2b0a      	cmp	r3, #10
 80038d2:	d00a      	beq.n	80038ea <UART_SetConfig+0x842>
 80038d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d8:	2b0b      	cmp	r3, #11
 80038da:	d103      	bne.n	80038e4 <UART_SetConfig+0x83c>
 80038dc:	2380      	movs	r3, #128	; 0x80
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	2400      	movs	r4, #0
 80038e2:	e022      	b.n	800392a <UART_SetConfig+0x882>
 80038e4:	2301      	movs	r3, #1
 80038e6:	2400      	movs	r4, #0
 80038e8:	e01f      	b.n	800392a <UART_SetConfig+0x882>
 80038ea:	2380      	movs	r3, #128	; 0x80
 80038ec:	2400      	movs	r4, #0
 80038ee:	e01c      	b.n	800392a <UART_SetConfig+0x882>
 80038f0:	2340      	movs	r3, #64	; 0x40
 80038f2:	2400      	movs	r4, #0
 80038f4:	e019      	b.n	800392a <UART_SetConfig+0x882>
 80038f6:	2320      	movs	r3, #32
 80038f8:	2400      	movs	r4, #0
 80038fa:	e016      	b.n	800392a <UART_SetConfig+0x882>
 80038fc:	2310      	movs	r3, #16
 80038fe:	2400      	movs	r4, #0
 8003900:	e013      	b.n	800392a <UART_SetConfig+0x882>
 8003902:	230c      	movs	r3, #12
 8003904:	2400      	movs	r4, #0
 8003906:	e010      	b.n	800392a <UART_SetConfig+0x882>
 8003908:	230a      	movs	r3, #10
 800390a:	2400      	movs	r4, #0
 800390c:	e00d      	b.n	800392a <UART_SetConfig+0x882>
 800390e:	2308      	movs	r3, #8
 8003910:	2400      	movs	r4, #0
 8003912:	e00a      	b.n	800392a <UART_SetConfig+0x882>
 8003914:	2306      	movs	r3, #6
 8003916:	2400      	movs	r4, #0
 8003918:	e007      	b.n	800392a <UART_SetConfig+0x882>
 800391a:	2304      	movs	r3, #4
 800391c:	2400      	movs	r4, #0
 800391e:	e004      	b.n	800392a <UART_SetConfig+0x882>
 8003920:	2302      	movs	r3, #2
 8003922:	2400      	movs	r4, #0
 8003924:	e001      	b.n	800392a <UART_SetConfig+0x882>
 8003926:	2301      	movs	r3, #1
 8003928:	2400      	movs	r4, #0
 800392a:	001a      	movs	r2, r3
 800392c:	0023      	movs	r3, r4
 800392e:	6a38      	ldr	r0, [r7, #32]
 8003930:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003932:	f7fc fd5d 	bl	80003f0 <__aeabi_uldivmod>
 8003936:	0003      	movs	r3, r0
 8003938:	000c      	movs	r4, r1
 800393a:	0e1a      	lsrs	r2, r3, #24
 800393c:	0221      	lsls	r1, r4, #8
 800393e:	6579      	str	r1, [r7, #84]	; 0x54
 8003940:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003942:	4311      	orrs	r1, r2
 8003944:	6579      	str	r1, [r7, #84]	; 0x54
 8003946:	021b      	lsls	r3, r3, #8
 8003948:	653b      	str	r3, [r7, #80]	; 0x50
 800394a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	085b      	lsrs	r3, r3, #1
 8003950:	61bb      	str	r3, [r7, #24]
 8003952:	2300      	movs	r3, #0
 8003954:	61fb      	str	r3, [r7, #28]
 8003956:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003958:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	69fc      	ldr	r4, [r7, #28]
 800395e:	18c0      	adds	r0, r0, r3
 8003960:	4161      	adcs	r1, r4
 8003962:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	613b      	str	r3, [r7, #16]
 8003968:	2300      	movs	r3, #0
 800396a:	617b      	str	r3, [r7, #20]
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f7fc fd3e 	bl	80003f0 <__aeabi_uldivmod>
 8003974:	0003      	movs	r3, r0
 8003976:	000c      	movs	r4, r1
 8003978:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 800397a:	e07e      	b.n	8003a7a <UART_SetConfig+0x9d2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800397c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003980:	2b00      	cmp	r3, #0
 8003982:	d058      	beq.n	8003a36 <UART_SetConfig+0x98e>
 8003984:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	2b01      	cmp	r3, #1
 800398a:	d050      	beq.n	8003a2e <UART_SetConfig+0x986>
 800398c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	2b02      	cmp	r3, #2
 8003992:	d048      	beq.n	8003a26 <UART_SetConfig+0x97e>
 8003994:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003998:	2b03      	cmp	r3, #3
 800399a:	d041      	beq.n	8003a20 <UART_SetConfig+0x978>
 800399c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a0:	2b04      	cmp	r3, #4
 80039a2:	d039      	beq.n	8003a18 <UART_SetConfig+0x970>
 80039a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a8:	2b05      	cmp	r3, #5
 80039aa:	d032      	beq.n	8003a12 <UART_SetConfig+0x96a>
 80039ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b0:	2b06      	cmp	r3, #6
 80039b2:	d02b      	beq.n	8003a0c <UART_SetConfig+0x964>
 80039b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	2b07      	cmp	r3, #7
 80039ba:	d023      	beq.n	8003a04 <UART_SetConfig+0x95c>
 80039bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c0:	2b08      	cmp	r3, #8
 80039c2:	d01b      	beq.n	80039fc <UART_SetConfig+0x954>
 80039c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c8:	2b09      	cmp	r3, #9
 80039ca:	d013      	beq.n	80039f4 <UART_SetConfig+0x94c>
 80039cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d0:	2b0a      	cmp	r3, #10
 80039d2:	d00b      	beq.n	80039ec <UART_SetConfig+0x944>
 80039d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d8:	2b0b      	cmp	r3, #11
 80039da:	d103      	bne.n	80039e4 <UART_SetConfig+0x93c>
 80039dc:	2380      	movs	r3, #128	; 0x80
 80039de:	021b      	lsls	r3, r3, #8
 80039e0:	2400      	movs	r4, #0
 80039e2:	e02b      	b.n	8003a3c <UART_SetConfig+0x994>
 80039e4:	2380      	movs	r3, #128	; 0x80
 80039e6:	041b      	lsls	r3, r3, #16
 80039e8:	2400      	movs	r4, #0
 80039ea:	e027      	b.n	8003a3c <UART_SetConfig+0x994>
 80039ec:	2380      	movs	r3, #128	; 0x80
 80039ee:	025b      	lsls	r3, r3, #9
 80039f0:	2400      	movs	r4, #0
 80039f2:	e023      	b.n	8003a3c <UART_SetConfig+0x994>
 80039f4:	2380      	movs	r3, #128	; 0x80
 80039f6:	029b      	lsls	r3, r3, #10
 80039f8:	2400      	movs	r4, #0
 80039fa:	e01f      	b.n	8003a3c <UART_SetConfig+0x994>
 80039fc:	2380      	movs	r3, #128	; 0x80
 80039fe:	02db      	lsls	r3, r3, #11
 8003a00:	2400      	movs	r4, #0
 8003a02:	e01b      	b.n	8003a3c <UART_SetConfig+0x994>
 8003a04:	2380      	movs	r3, #128	; 0x80
 8003a06:	031b      	lsls	r3, r3, #12
 8003a08:	2400      	movs	r4, #0
 8003a0a:	e017      	b.n	8003a3c <UART_SetConfig+0x994>
 8003a0c:	4b40      	ldr	r3, [pc, #256]	; (8003b10 <UART_SetConfig+0xa68>)
 8003a0e:	2400      	movs	r4, #0
 8003a10:	e014      	b.n	8003a3c <UART_SetConfig+0x994>
 8003a12:	4b40      	ldr	r3, [pc, #256]	; (8003b14 <UART_SetConfig+0xa6c>)
 8003a14:	2400      	movs	r4, #0
 8003a16:	e011      	b.n	8003a3c <UART_SetConfig+0x994>
 8003a18:	2380      	movs	r3, #128	; 0x80
 8003a1a:	035b      	lsls	r3, r3, #13
 8003a1c:	2400      	movs	r4, #0
 8003a1e:	e00d      	b.n	8003a3c <UART_SetConfig+0x994>
 8003a20:	4b3d      	ldr	r3, [pc, #244]	; (8003b18 <UART_SetConfig+0xa70>)
 8003a22:	2400      	movs	r4, #0
 8003a24:	e00a      	b.n	8003a3c <UART_SetConfig+0x994>
 8003a26:	2380      	movs	r3, #128	; 0x80
 8003a28:	039b      	lsls	r3, r3, #14
 8003a2a:	2400      	movs	r4, #0
 8003a2c:	e006      	b.n	8003a3c <UART_SetConfig+0x994>
 8003a2e:	2380      	movs	r3, #128	; 0x80
 8003a30:	03db      	lsls	r3, r3, #15
 8003a32:	2400      	movs	r4, #0
 8003a34:	e002      	b.n	8003a3c <UART_SetConfig+0x994>
 8003a36:	2380      	movs	r3, #128	; 0x80
 8003a38:	041b      	lsls	r3, r3, #16
 8003a3a:	2400      	movs	r4, #0
 8003a3c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003a3e:	6852      	ldr	r2, [r2, #4]
 8003a40:	0852      	lsrs	r2, r2, #1
 8003a42:	60ba      	str	r2, [r7, #8]
 8003a44:	2200      	movs	r2, #0
 8003a46:	60fa      	str	r2, [r7, #12]
 8003a48:	68b8      	ldr	r0, [r7, #8]
 8003a4a:	68f9      	ldr	r1, [r7, #12]
 8003a4c:	18c0      	adds	r0, r0, r3
 8003a4e:	4161      	adcs	r1, r4
 8003a50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	603b      	str	r3, [r7, #0]
 8003a56:	2300      	movs	r3, #0
 8003a58:	607b      	str	r3, [r7, #4]
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f7fc fcc7 	bl	80003f0 <__aeabi_uldivmod>
 8003a62:	0003      	movs	r3, r0
 8003a64:	000c      	movs	r4, r1
 8003a66:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 8003a68:	e007      	b.n	8003a7a <UART_SetConfig+0x9d2>
          default:
            ret = HAL_ERROR;
 8003a6a:	231b      	movs	r3, #27
 8003a6c:	2258      	movs	r2, #88	; 0x58
 8003a6e:	4694      	mov	ip, r2
 8003a70:	44bc      	add	ip, r7
 8003a72:	4463      	add	r3, ip
 8003a74:	2201      	movs	r2, #1
 8003a76:	701a      	strb	r2, [r3, #0]
            break;
 8003a78:	46c0      	nop			; (mov r8, r8)
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003a7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a7c:	4a27      	ldr	r2, [pc, #156]	; (8003b1c <UART_SetConfig+0xa74>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d909      	bls.n	8003a96 <UART_SetConfig+0x9ee>
 8003a82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a84:	4a26      	ldr	r2, [pc, #152]	; (8003b20 <UART_SetConfig+0xa78>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d805      	bhi.n	8003a96 <UART_SetConfig+0x9ee>
        {
          huart->Instance->BRR = usartdiv;
 8003a8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003a90:	60da      	str	r2, [r3, #12]
 8003a92:	f000 fbc4 	bl	800421e <UART_SetConfig+0x1176>
        }
        else
        {
          ret = HAL_ERROR;
 8003a96:	231b      	movs	r3, #27
 8003a98:	2258      	movs	r2, #88	; 0x58
 8003a9a:	4694      	mov	ip, r2
 8003a9c:	44bc      	add	ip, r7
 8003a9e:	4463      	add	r3, ip
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	701a      	strb	r2, [r3, #0]
 8003aa4:	f000 fbbb 	bl	800421e <UART_SetConfig+0x1176>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003aa8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003aaa:	69da      	ldr	r2, [r3, #28]
 8003aac:	2380      	movs	r3, #128	; 0x80
 8003aae:	021b      	lsls	r3, r3, #8
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d000      	beq.n	8003ab6 <UART_SetConfig+0xa0e>
 8003ab4:	e1e6      	b.n	8003e84 <UART_SetConfig+0xddc>
  {
    switch (clocksource)
 8003ab6:	2323      	movs	r3, #35	; 0x23
 8003ab8:	2258      	movs	r2, #88	; 0x58
 8003aba:	4694      	mov	ip, r2
 8003abc:	44bc      	add	ip, r7
 8003abe:	4463      	add	r3, ip
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d100      	bne.n	8003ac8 <UART_SetConfig+0xa20>
 8003ac6:	e08f      	b.n	8003be8 <UART_SetConfig+0xb40>
 8003ac8:	dc02      	bgt.n	8003ad0 <UART_SetConfig+0xa28>
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d02a      	beq.n	8003b24 <UART_SetConfig+0xa7c>
 8003ace:	e1a5      	b.n	8003e1c <UART_SetConfig+0xd74>
 8003ad0:	2b04      	cmp	r3, #4
 8003ad2:	d100      	bne.n	8003ad6 <UART_SetConfig+0xa2e>
 8003ad4:	e0df      	b.n	8003c96 <UART_SetConfig+0xbee>
 8003ad6:	2b08      	cmp	r3, #8
 8003ad8:	d100      	bne.n	8003adc <UART_SetConfig+0xa34>
 8003ada:	e13e      	b.n	8003d5a <UART_SetConfig+0xcb2>
 8003adc:	e19e      	b.n	8003e1c <UART_SetConfig+0xd74>
 8003ade:	46c0      	nop			; (mov r8, r8)
 8003ae0:	00f42400 	.word	0x00f42400
 8003ae4:	f4240000 	.word	0xf4240000
 8003ae8:	01e84800 	.word	0x01e84800
 8003aec:	03d09000 	.word	0x03d09000
 8003af0:	07a12000 	.word	0x07a12000
 8003af4:	0f424000 	.word	0x0f424000
 8003af8:	14585500 	.word	0x14585500
 8003afc:	186a0000 	.word	0x186a0000
 8003b00:	1e848000 	.word	0x1e848000
 8003b04:	28b0aa00 	.word	0x28b0aa00
 8003b08:	3d090000 	.word	0x3d090000
 8003b0c:	7a120000 	.word	0x7a120000
 8003b10:	000aaa00 	.word	0x000aaa00
 8003b14:	000ccc00 	.word	0x000ccc00
 8003b18:	00155500 	.word	0x00155500
 8003b1c:	000002ff 	.word	0x000002ff
 8003b20:	000fffff 	.word	0x000fffff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b24:	f7fe f85e 	bl	8001be4 <HAL_RCC_GetPCLK1Freq>
 8003b28:	0003      	movs	r3, r0
 8003b2a:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d044      	beq.n	8003bbe <UART_SetConfig+0xb16>
 8003b34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d03e      	beq.n	8003bba <UART_SetConfig+0xb12>
 8003b3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d038      	beq.n	8003bb6 <UART_SetConfig+0xb0e>
 8003b44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b48:	2b03      	cmp	r3, #3
 8003b4a:	d032      	beq.n	8003bb2 <UART_SetConfig+0xb0a>
 8003b4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b50:	2b04      	cmp	r3, #4
 8003b52:	d02c      	beq.n	8003bae <UART_SetConfig+0xb06>
 8003b54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b58:	2b05      	cmp	r3, #5
 8003b5a:	d026      	beq.n	8003baa <UART_SetConfig+0xb02>
 8003b5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b60:	2b06      	cmp	r3, #6
 8003b62:	d020      	beq.n	8003ba6 <UART_SetConfig+0xafe>
 8003b64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b68:	2b07      	cmp	r3, #7
 8003b6a:	d01a      	beq.n	8003ba2 <UART_SetConfig+0xafa>
 8003b6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b70:	2b08      	cmp	r3, #8
 8003b72:	d014      	beq.n	8003b9e <UART_SetConfig+0xaf6>
 8003b74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b78:	2b09      	cmp	r3, #9
 8003b7a:	d00e      	beq.n	8003b9a <UART_SetConfig+0xaf2>
 8003b7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	2b0a      	cmp	r3, #10
 8003b82:	d008      	beq.n	8003b96 <UART_SetConfig+0xaee>
 8003b84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b88:	2b0b      	cmp	r3, #11
 8003b8a:	d102      	bne.n	8003b92 <UART_SetConfig+0xaea>
 8003b8c:	2380      	movs	r3, #128	; 0x80
 8003b8e:	005b      	lsls	r3, r3, #1
 8003b90:	e016      	b.n	8003bc0 <UART_SetConfig+0xb18>
 8003b92:	2301      	movs	r3, #1
 8003b94:	e014      	b.n	8003bc0 <UART_SetConfig+0xb18>
 8003b96:	2380      	movs	r3, #128	; 0x80
 8003b98:	e012      	b.n	8003bc0 <UART_SetConfig+0xb18>
 8003b9a:	2340      	movs	r3, #64	; 0x40
 8003b9c:	e010      	b.n	8003bc0 <UART_SetConfig+0xb18>
 8003b9e:	2320      	movs	r3, #32
 8003ba0:	e00e      	b.n	8003bc0 <UART_SetConfig+0xb18>
 8003ba2:	2310      	movs	r3, #16
 8003ba4:	e00c      	b.n	8003bc0 <UART_SetConfig+0xb18>
 8003ba6:	230c      	movs	r3, #12
 8003ba8:	e00a      	b.n	8003bc0 <UART_SetConfig+0xb18>
 8003baa:	230a      	movs	r3, #10
 8003bac:	e008      	b.n	8003bc0 <UART_SetConfig+0xb18>
 8003bae:	2308      	movs	r3, #8
 8003bb0:	e006      	b.n	8003bc0 <UART_SetConfig+0xb18>
 8003bb2:	2306      	movs	r3, #6
 8003bb4:	e004      	b.n	8003bc0 <UART_SetConfig+0xb18>
 8003bb6:	2304      	movs	r3, #4
 8003bb8:	e002      	b.n	8003bc0 <UART_SetConfig+0xb18>
 8003bba:	2302      	movs	r3, #2
 8003bbc:	e000      	b.n	8003bc0 <UART_SetConfig+0xb18>
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	0019      	movs	r1, r3
 8003bc2:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8003bc4:	f7fc fa9e 	bl	8000104 <__udivsi3>
 8003bc8:	0003      	movs	r3, r0
 8003bca:	005a      	lsls	r2, r3, #1
 8003bcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	085b      	lsrs	r3, r3, #1
 8003bd2:	18d2      	adds	r2, r2, r3
 8003bd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	0019      	movs	r1, r3
 8003bda:	0010      	movs	r0, r2
 8003bdc:	f7fc fa92 	bl	8000104 <__udivsi3>
 8003be0:	0003      	movs	r3, r0
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8003be6:	e121      	b.n	8003e2c <UART_SetConfig+0xd84>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003be8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d043      	beq.n	8003c78 <UART_SetConfig+0xbd0>
 8003bf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d03d      	beq.n	8003c74 <UART_SetConfig+0xbcc>
 8003bf8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d037      	beq.n	8003c70 <UART_SetConfig+0xbc8>
 8003c00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	2b03      	cmp	r3, #3
 8003c06:	d031      	beq.n	8003c6c <UART_SetConfig+0xbc4>
 8003c08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0c:	2b04      	cmp	r3, #4
 8003c0e:	d02b      	beq.n	8003c68 <UART_SetConfig+0xbc0>
 8003c10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	2b05      	cmp	r3, #5
 8003c16:	d025      	beq.n	8003c64 <UART_SetConfig+0xbbc>
 8003c18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1c:	2b06      	cmp	r3, #6
 8003c1e:	d01f      	beq.n	8003c60 <UART_SetConfig+0xbb8>
 8003c20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c24:	2b07      	cmp	r3, #7
 8003c26:	d019      	beq.n	8003c5c <UART_SetConfig+0xbb4>
 8003c28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2c:	2b08      	cmp	r3, #8
 8003c2e:	d013      	beq.n	8003c58 <UART_SetConfig+0xbb0>
 8003c30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c34:	2b09      	cmp	r3, #9
 8003c36:	d00d      	beq.n	8003c54 <UART_SetConfig+0xbac>
 8003c38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3c:	2b0a      	cmp	r3, #10
 8003c3e:	d007      	beq.n	8003c50 <UART_SetConfig+0xba8>
 8003c40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c44:	2b0b      	cmp	r3, #11
 8003c46:	d101      	bne.n	8003c4c <UART_SetConfig+0xba4>
 8003c48:	4bba      	ldr	r3, [pc, #744]	; (8003f34 <UART_SetConfig+0xe8c>)
 8003c4a:	e016      	b.n	8003c7a <UART_SetConfig+0xbd2>
 8003c4c:	4bba      	ldr	r3, [pc, #744]	; (8003f38 <UART_SetConfig+0xe90>)
 8003c4e:	e014      	b.n	8003c7a <UART_SetConfig+0xbd2>
 8003c50:	4bba      	ldr	r3, [pc, #744]	; (8003f3c <UART_SetConfig+0xe94>)
 8003c52:	e012      	b.n	8003c7a <UART_SetConfig+0xbd2>
 8003c54:	4bba      	ldr	r3, [pc, #744]	; (8003f40 <UART_SetConfig+0xe98>)
 8003c56:	e010      	b.n	8003c7a <UART_SetConfig+0xbd2>
 8003c58:	4bba      	ldr	r3, [pc, #744]	; (8003f44 <UART_SetConfig+0xe9c>)
 8003c5a:	e00e      	b.n	8003c7a <UART_SetConfig+0xbd2>
 8003c5c:	4bba      	ldr	r3, [pc, #744]	; (8003f48 <UART_SetConfig+0xea0>)
 8003c5e:	e00c      	b.n	8003c7a <UART_SetConfig+0xbd2>
 8003c60:	4bba      	ldr	r3, [pc, #744]	; (8003f4c <UART_SetConfig+0xea4>)
 8003c62:	e00a      	b.n	8003c7a <UART_SetConfig+0xbd2>
 8003c64:	4bba      	ldr	r3, [pc, #744]	; (8003f50 <UART_SetConfig+0xea8>)
 8003c66:	e008      	b.n	8003c7a <UART_SetConfig+0xbd2>
 8003c68:	4bba      	ldr	r3, [pc, #744]	; (8003f54 <UART_SetConfig+0xeac>)
 8003c6a:	e006      	b.n	8003c7a <UART_SetConfig+0xbd2>
 8003c6c:	4bba      	ldr	r3, [pc, #744]	; (8003f58 <UART_SetConfig+0xeb0>)
 8003c6e:	e004      	b.n	8003c7a <UART_SetConfig+0xbd2>
 8003c70:	4bba      	ldr	r3, [pc, #744]	; (8003f5c <UART_SetConfig+0xeb4>)
 8003c72:	e002      	b.n	8003c7a <UART_SetConfig+0xbd2>
 8003c74:	4bba      	ldr	r3, [pc, #744]	; (8003f60 <UART_SetConfig+0xeb8>)
 8003c76:	e000      	b.n	8003c7a <UART_SetConfig+0xbd2>
 8003c78:	4baf      	ldr	r3, [pc, #700]	; (8003f38 <UART_SetConfig+0xe90>)
 8003c7a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003c7c:	6852      	ldr	r2, [r2, #4]
 8003c7e:	0852      	lsrs	r2, r2, #1
 8003c80:	189a      	adds	r2, r3, r2
 8003c82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	0019      	movs	r1, r3
 8003c88:	0010      	movs	r0, r2
 8003c8a:	f7fc fa3b 	bl	8000104 <__udivsi3>
 8003c8e:	0003      	movs	r3, r0
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8003c94:	e0ca      	b.n	8003e2c <UART_SetConfig+0xd84>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c96:	f7fd ff19 	bl	8001acc <HAL_RCC_GetSysClockFreq>
 8003c9a:	0003      	movs	r3, r0
 8003c9c:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d044      	beq.n	8003d30 <UART_SetConfig+0xc88>
 8003ca6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d03e      	beq.n	8003d2c <UART_SetConfig+0xc84>
 8003cae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d038      	beq.n	8003d28 <UART_SetConfig+0xc80>
 8003cb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cba:	2b03      	cmp	r3, #3
 8003cbc:	d032      	beq.n	8003d24 <UART_SetConfig+0xc7c>
 8003cbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc2:	2b04      	cmp	r3, #4
 8003cc4:	d02c      	beq.n	8003d20 <UART_SetConfig+0xc78>
 8003cc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cca:	2b05      	cmp	r3, #5
 8003ccc:	d026      	beq.n	8003d1c <UART_SetConfig+0xc74>
 8003cce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd2:	2b06      	cmp	r3, #6
 8003cd4:	d020      	beq.n	8003d18 <UART_SetConfig+0xc70>
 8003cd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cda:	2b07      	cmp	r3, #7
 8003cdc:	d01a      	beq.n	8003d14 <UART_SetConfig+0xc6c>
 8003cde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce2:	2b08      	cmp	r3, #8
 8003ce4:	d014      	beq.n	8003d10 <UART_SetConfig+0xc68>
 8003ce6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	2b09      	cmp	r3, #9
 8003cec:	d00e      	beq.n	8003d0c <UART_SetConfig+0xc64>
 8003cee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf2:	2b0a      	cmp	r3, #10
 8003cf4:	d008      	beq.n	8003d08 <UART_SetConfig+0xc60>
 8003cf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfa:	2b0b      	cmp	r3, #11
 8003cfc:	d102      	bne.n	8003d04 <UART_SetConfig+0xc5c>
 8003cfe:	2380      	movs	r3, #128	; 0x80
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	e016      	b.n	8003d32 <UART_SetConfig+0xc8a>
 8003d04:	2301      	movs	r3, #1
 8003d06:	e014      	b.n	8003d32 <UART_SetConfig+0xc8a>
 8003d08:	2380      	movs	r3, #128	; 0x80
 8003d0a:	e012      	b.n	8003d32 <UART_SetConfig+0xc8a>
 8003d0c:	2340      	movs	r3, #64	; 0x40
 8003d0e:	e010      	b.n	8003d32 <UART_SetConfig+0xc8a>
 8003d10:	2320      	movs	r3, #32
 8003d12:	e00e      	b.n	8003d32 <UART_SetConfig+0xc8a>
 8003d14:	2310      	movs	r3, #16
 8003d16:	e00c      	b.n	8003d32 <UART_SetConfig+0xc8a>
 8003d18:	230c      	movs	r3, #12
 8003d1a:	e00a      	b.n	8003d32 <UART_SetConfig+0xc8a>
 8003d1c:	230a      	movs	r3, #10
 8003d1e:	e008      	b.n	8003d32 <UART_SetConfig+0xc8a>
 8003d20:	2308      	movs	r3, #8
 8003d22:	e006      	b.n	8003d32 <UART_SetConfig+0xc8a>
 8003d24:	2306      	movs	r3, #6
 8003d26:	e004      	b.n	8003d32 <UART_SetConfig+0xc8a>
 8003d28:	2304      	movs	r3, #4
 8003d2a:	e002      	b.n	8003d32 <UART_SetConfig+0xc8a>
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	e000      	b.n	8003d32 <UART_SetConfig+0xc8a>
 8003d30:	2301      	movs	r3, #1
 8003d32:	0019      	movs	r1, r3
 8003d34:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8003d36:	f7fc f9e5 	bl	8000104 <__udivsi3>
 8003d3a:	0003      	movs	r3, r0
 8003d3c:	005a      	lsls	r2, r3, #1
 8003d3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	085b      	lsrs	r3, r3, #1
 8003d44:	18d2      	adds	r2, r2, r3
 8003d46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	0019      	movs	r1, r3
 8003d4c:	0010      	movs	r0, r2
 8003d4e:	f7fc f9d9 	bl	8000104 <__udivsi3>
 8003d52:	0003      	movs	r3, r0
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8003d58:	e068      	b.n	8003e2c <UART_SetConfig+0xd84>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d04c      	beq.n	8003dfc <UART_SetConfig+0xd54>
 8003d62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d045      	beq.n	8003df6 <UART_SetConfig+0xd4e>
 8003d6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d03e      	beq.n	8003df0 <UART_SetConfig+0xd48>
 8003d72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d76:	2b03      	cmp	r3, #3
 8003d78:	d038      	beq.n	8003dec <UART_SetConfig+0xd44>
 8003d7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7e:	2b04      	cmp	r3, #4
 8003d80:	d031      	beq.n	8003de6 <UART_SetConfig+0xd3e>
 8003d82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d86:	2b05      	cmp	r3, #5
 8003d88:	d02b      	beq.n	8003de2 <UART_SetConfig+0xd3a>
 8003d8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8e:	2b06      	cmp	r3, #6
 8003d90:	d025      	beq.n	8003dde <UART_SetConfig+0xd36>
 8003d92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d96:	2b07      	cmp	r3, #7
 8003d98:	d01e      	beq.n	8003dd8 <UART_SetConfig+0xd30>
 8003d9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9e:	2b08      	cmp	r3, #8
 8003da0:	d017      	beq.n	8003dd2 <UART_SetConfig+0xd2a>
 8003da2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da6:	2b09      	cmp	r3, #9
 8003da8:	d010      	beq.n	8003dcc <UART_SetConfig+0xd24>
 8003daa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dae:	2b0a      	cmp	r3, #10
 8003db0:	d009      	beq.n	8003dc6 <UART_SetConfig+0xd1e>
 8003db2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db6:	2b0b      	cmp	r3, #11
 8003db8:	d102      	bne.n	8003dc0 <UART_SetConfig+0xd18>
 8003dba:	2380      	movs	r3, #128	; 0x80
 8003dbc:	005b      	lsls	r3, r3, #1
 8003dbe:	e01f      	b.n	8003e00 <UART_SetConfig+0xd58>
 8003dc0:	2380      	movs	r3, #128	; 0x80
 8003dc2:	025b      	lsls	r3, r3, #9
 8003dc4:	e01c      	b.n	8003e00 <UART_SetConfig+0xd58>
 8003dc6:	2380      	movs	r3, #128	; 0x80
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	e019      	b.n	8003e00 <UART_SetConfig+0xd58>
 8003dcc:	2380      	movs	r3, #128	; 0x80
 8003dce:	00db      	lsls	r3, r3, #3
 8003dd0:	e016      	b.n	8003e00 <UART_SetConfig+0xd58>
 8003dd2:	2380      	movs	r3, #128	; 0x80
 8003dd4:	011b      	lsls	r3, r3, #4
 8003dd6:	e013      	b.n	8003e00 <UART_SetConfig+0xd58>
 8003dd8:	2380      	movs	r3, #128	; 0x80
 8003dda:	015b      	lsls	r3, r3, #5
 8003ddc:	e010      	b.n	8003e00 <UART_SetConfig+0xd58>
 8003dde:	4b61      	ldr	r3, [pc, #388]	; (8003f64 <UART_SetConfig+0xebc>)
 8003de0:	e00e      	b.n	8003e00 <UART_SetConfig+0xd58>
 8003de2:	4b61      	ldr	r3, [pc, #388]	; (8003f68 <UART_SetConfig+0xec0>)
 8003de4:	e00c      	b.n	8003e00 <UART_SetConfig+0xd58>
 8003de6:	2380      	movs	r3, #128	; 0x80
 8003de8:	019b      	lsls	r3, r3, #6
 8003dea:	e009      	b.n	8003e00 <UART_SetConfig+0xd58>
 8003dec:	4b5f      	ldr	r3, [pc, #380]	; (8003f6c <UART_SetConfig+0xec4>)
 8003dee:	e007      	b.n	8003e00 <UART_SetConfig+0xd58>
 8003df0:	2380      	movs	r3, #128	; 0x80
 8003df2:	01db      	lsls	r3, r3, #7
 8003df4:	e004      	b.n	8003e00 <UART_SetConfig+0xd58>
 8003df6:	2380      	movs	r3, #128	; 0x80
 8003df8:	021b      	lsls	r3, r3, #8
 8003dfa:	e001      	b.n	8003e00 <UART_SetConfig+0xd58>
 8003dfc:	2380      	movs	r3, #128	; 0x80
 8003dfe:	025b      	lsls	r3, r3, #9
 8003e00:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003e02:	6852      	ldr	r2, [r2, #4]
 8003e04:	0852      	lsrs	r2, r2, #1
 8003e06:	189a      	adds	r2, r3, r2
 8003e08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	0019      	movs	r1, r3
 8003e0e:	0010      	movs	r0, r2
 8003e10:	f7fc f978 	bl	8000104 <__udivsi3>
 8003e14:	0003      	movs	r3, r0
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8003e1a:	e007      	b.n	8003e2c <UART_SetConfig+0xd84>
      default:
        ret = HAL_ERROR;
 8003e1c:	231b      	movs	r3, #27
 8003e1e:	2258      	movs	r2, #88	; 0x58
 8003e20:	4694      	mov	ip, r2
 8003e22:	44bc      	add	ip, r7
 8003e24:	4463      	add	r3, ip
 8003e26:	2201      	movs	r2, #1
 8003e28:	701a      	strb	r2, [r3, #0]
        break;
 8003e2a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e2e:	2b0f      	cmp	r3, #15
 8003e30:	d920      	bls.n	8003e74 <UART_SetConfig+0xdcc>
 8003e32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e34:	4a4e      	ldr	r2, [pc, #312]	; (8003f70 <UART_SetConfig+0xec8>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d81c      	bhi.n	8003e74 <UART_SetConfig+0xdcc>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	200e      	movs	r0, #14
 8003e40:	2458      	movs	r4, #88	; 0x58
 8003e42:	193b      	adds	r3, r7, r4
 8003e44:	181b      	adds	r3, r3, r0
 8003e46:	210f      	movs	r1, #15
 8003e48:	438a      	bics	r2, r1
 8003e4a:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e4e:	085b      	lsrs	r3, r3, #1
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	2207      	movs	r2, #7
 8003e54:	4013      	ands	r3, r2
 8003e56:	b299      	uxth	r1, r3
 8003e58:	193b      	adds	r3, r7, r4
 8003e5a:	181b      	adds	r3, r3, r0
 8003e5c:	193a      	adds	r2, r7, r4
 8003e5e:	1812      	adds	r2, r2, r0
 8003e60:	8812      	ldrh	r2, [r2, #0]
 8003e62:	430a      	orrs	r2, r1
 8003e64:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8003e66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	193a      	adds	r2, r7, r4
 8003e6c:	1812      	adds	r2, r2, r0
 8003e6e:	8812      	ldrh	r2, [r2, #0]
 8003e70:	60da      	str	r2, [r3, #12]
 8003e72:	e1d4      	b.n	800421e <UART_SetConfig+0x1176>
    }
    else
    {
      ret = HAL_ERROR;
 8003e74:	231b      	movs	r3, #27
 8003e76:	2258      	movs	r2, #88	; 0x58
 8003e78:	4694      	mov	ip, r2
 8003e7a:	44bc      	add	ip, r7
 8003e7c:	4463      	add	r3, ip
 8003e7e:	2201      	movs	r2, #1
 8003e80:	701a      	strb	r2, [r3, #0]
 8003e82:	e1cc      	b.n	800421e <UART_SetConfig+0x1176>
    }
  }
  else
  {
    switch (clocksource)
 8003e84:	2323      	movs	r3, #35	; 0x23
 8003e86:	2258      	movs	r2, #88	; 0x58
 8003e88:	4694      	mov	ip, r2
 8003e8a:	44bc      	add	ip, r7
 8003e8c:	4463      	add	r3, ip
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d100      	bne.n	8003e96 <UART_SetConfig+0xdee>
 8003e94:	e08f      	b.n	8003fb6 <UART_SetConfig+0xf0e>
 8003e96:	dc02      	bgt.n	8003e9e <UART_SetConfig+0xdf6>
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d007      	beq.n	8003eac <UART_SetConfig+0xe04>
 8003e9c:	e1a4      	b.n	80041e8 <UART_SetConfig+0x1140>
 8003e9e:	2b04      	cmp	r3, #4
 8003ea0:	d100      	bne.n	8003ea4 <UART_SetConfig+0xdfc>
 8003ea2:	e0df      	b.n	8004064 <UART_SetConfig+0xfbc>
 8003ea4:	2b08      	cmp	r3, #8
 8003ea6:	d100      	bne.n	8003eaa <UART_SetConfig+0xe02>
 8003ea8:	e13e      	b.n	8004128 <UART_SetConfig+0x1080>
 8003eaa:	e19d      	b.n	80041e8 <UART_SetConfig+0x1140>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003eac:	f7fd fe9a 	bl	8001be4 <HAL_RCC_GetPCLK1Freq>
 8003eb0:	0003      	movs	r3, r0
 8003eb2:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003eb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d100      	bne.n	8003ebe <UART_SetConfig+0xe16>
 8003ebc:	e066      	b.n	8003f8c <UART_SetConfig+0xee4>
 8003ebe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d100      	bne.n	8003ec8 <UART_SetConfig+0xe20>
 8003ec6:	e05f      	b.n	8003f88 <UART_SetConfig+0xee0>
 8003ec8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d059      	beq.n	8003f84 <UART_SetConfig+0xedc>
 8003ed0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed4:	2b03      	cmp	r3, #3
 8003ed6:	d053      	beq.n	8003f80 <UART_SetConfig+0xed8>
 8003ed8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003edc:	2b04      	cmp	r3, #4
 8003ede:	d04d      	beq.n	8003f7c <UART_SetConfig+0xed4>
 8003ee0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee4:	2b05      	cmp	r3, #5
 8003ee6:	d047      	beq.n	8003f78 <UART_SetConfig+0xed0>
 8003ee8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eec:	2b06      	cmp	r3, #6
 8003eee:	d041      	beq.n	8003f74 <UART_SetConfig+0xecc>
 8003ef0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef4:	2b07      	cmp	r3, #7
 8003ef6:	d01a      	beq.n	8003f2e <UART_SetConfig+0xe86>
 8003ef8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efc:	2b08      	cmp	r3, #8
 8003efe:	d014      	beq.n	8003f2a <UART_SetConfig+0xe82>
 8003f00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f04:	2b09      	cmp	r3, #9
 8003f06:	d00e      	beq.n	8003f26 <UART_SetConfig+0xe7e>
 8003f08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0c:	2b0a      	cmp	r3, #10
 8003f0e:	d008      	beq.n	8003f22 <UART_SetConfig+0xe7a>
 8003f10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f14:	2b0b      	cmp	r3, #11
 8003f16:	d102      	bne.n	8003f1e <UART_SetConfig+0xe76>
 8003f18:	2380      	movs	r3, #128	; 0x80
 8003f1a:	005b      	lsls	r3, r3, #1
 8003f1c:	e037      	b.n	8003f8e <UART_SetConfig+0xee6>
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e035      	b.n	8003f8e <UART_SetConfig+0xee6>
 8003f22:	2380      	movs	r3, #128	; 0x80
 8003f24:	e033      	b.n	8003f8e <UART_SetConfig+0xee6>
 8003f26:	2340      	movs	r3, #64	; 0x40
 8003f28:	e031      	b.n	8003f8e <UART_SetConfig+0xee6>
 8003f2a:	2320      	movs	r3, #32
 8003f2c:	e02f      	b.n	8003f8e <UART_SetConfig+0xee6>
 8003f2e:	2310      	movs	r3, #16
 8003f30:	e02d      	b.n	8003f8e <UART_SetConfig+0xee6>
 8003f32:	46c0      	nop			; (mov r8, r8)
 8003f34:	0001e848 	.word	0x0001e848
 8003f38:	01e84800 	.word	0x01e84800
 8003f3c:	0003d090 	.word	0x0003d090
 8003f40:	0007a120 	.word	0x0007a120
 8003f44:	000f4240 	.word	0x000f4240
 8003f48:	001e8480 	.word	0x001e8480
 8003f4c:	0028b0aa 	.word	0x0028b0aa
 8003f50:	0030d400 	.word	0x0030d400
 8003f54:	003d0900 	.word	0x003d0900
 8003f58:	00516154 	.word	0x00516154
 8003f5c:	007a1200 	.word	0x007a1200
 8003f60:	00f42400 	.word	0x00f42400
 8003f64:	00001554 	.word	0x00001554
 8003f68:	00001998 	.word	0x00001998
 8003f6c:	00002aaa 	.word	0x00002aaa
 8003f70:	0000ffff 	.word	0x0000ffff
 8003f74:	230c      	movs	r3, #12
 8003f76:	e00a      	b.n	8003f8e <UART_SetConfig+0xee6>
 8003f78:	230a      	movs	r3, #10
 8003f7a:	e008      	b.n	8003f8e <UART_SetConfig+0xee6>
 8003f7c:	2308      	movs	r3, #8
 8003f7e:	e006      	b.n	8003f8e <UART_SetConfig+0xee6>
 8003f80:	2306      	movs	r3, #6
 8003f82:	e004      	b.n	8003f8e <UART_SetConfig+0xee6>
 8003f84:	2304      	movs	r3, #4
 8003f86:	e002      	b.n	8003f8e <UART_SetConfig+0xee6>
 8003f88:	2302      	movs	r3, #2
 8003f8a:	e000      	b.n	8003f8e <UART_SetConfig+0xee6>
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	0019      	movs	r1, r3
 8003f90:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8003f92:	f7fc f8b7 	bl	8000104 <__udivsi3>
 8003f96:	0003      	movs	r3, r0
 8003f98:	001a      	movs	r2, r3
 8003f9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	085b      	lsrs	r3, r3, #1
 8003fa0:	18d2      	adds	r2, r2, r3
 8003fa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	0019      	movs	r1, r3
 8003fa8:	0010      	movs	r0, r2
 8003faa:	f7fc f8ab 	bl	8000104 <__udivsi3>
 8003fae:	0003      	movs	r3, r0
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8003fb4:	e120      	b.n	80041f8 <UART_SetConfig+0x1150>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d043      	beq.n	8004046 <UART_SetConfig+0xf9e>
 8003fbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d03d      	beq.n	8004042 <UART_SetConfig+0xf9a>
 8003fc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d037      	beq.n	800403e <UART_SetConfig+0xf96>
 8003fce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd2:	2b03      	cmp	r3, #3
 8003fd4:	d031      	beq.n	800403a <UART_SetConfig+0xf92>
 8003fd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fda:	2b04      	cmp	r3, #4
 8003fdc:	d02b      	beq.n	8004036 <UART_SetConfig+0xf8e>
 8003fde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	2b05      	cmp	r3, #5
 8003fe4:	d025      	beq.n	8004032 <UART_SetConfig+0xf8a>
 8003fe6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fea:	2b06      	cmp	r3, #6
 8003fec:	d01f      	beq.n	800402e <UART_SetConfig+0xf86>
 8003fee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff2:	2b07      	cmp	r3, #7
 8003ff4:	d019      	beq.n	800402a <UART_SetConfig+0xf82>
 8003ff6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffa:	2b08      	cmp	r3, #8
 8003ffc:	d013      	beq.n	8004026 <UART_SetConfig+0xf7e>
 8003ffe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004002:	2b09      	cmp	r3, #9
 8004004:	d00d      	beq.n	8004022 <UART_SetConfig+0xf7a>
 8004006:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400a:	2b0a      	cmp	r3, #10
 800400c:	d007      	beq.n	800401e <UART_SetConfig+0xf76>
 800400e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004012:	2b0b      	cmp	r3, #11
 8004014:	d101      	bne.n	800401a <UART_SetConfig+0xf72>
 8004016:	4b8e      	ldr	r3, [pc, #568]	; (8004250 <UART_SetConfig+0x11a8>)
 8004018:	e016      	b.n	8004048 <UART_SetConfig+0xfa0>
 800401a:	4b8e      	ldr	r3, [pc, #568]	; (8004254 <UART_SetConfig+0x11ac>)
 800401c:	e014      	b.n	8004048 <UART_SetConfig+0xfa0>
 800401e:	4b8e      	ldr	r3, [pc, #568]	; (8004258 <UART_SetConfig+0x11b0>)
 8004020:	e012      	b.n	8004048 <UART_SetConfig+0xfa0>
 8004022:	4b8e      	ldr	r3, [pc, #568]	; (800425c <UART_SetConfig+0x11b4>)
 8004024:	e010      	b.n	8004048 <UART_SetConfig+0xfa0>
 8004026:	4b8e      	ldr	r3, [pc, #568]	; (8004260 <UART_SetConfig+0x11b8>)
 8004028:	e00e      	b.n	8004048 <UART_SetConfig+0xfa0>
 800402a:	4b8e      	ldr	r3, [pc, #568]	; (8004264 <UART_SetConfig+0x11bc>)
 800402c:	e00c      	b.n	8004048 <UART_SetConfig+0xfa0>
 800402e:	4b8e      	ldr	r3, [pc, #568]	; (8004268 <UART_SetConfig+0x11c0>)
 8004030:	e00a      	b.n	8004048 <UART_SetConfig+0xfa0>
 8004032:	4b8e      	ldr	r3, [pc, #568]	; (800426c <UART_SetConfig+0x11c4>)
 8004034:	e008      	b.n	8004048 <UART_SetConfig+0xfa0>
 8004036:	4b8e      	ldr	r3, [pc, #568]	; (8004270 <UART_SetConfig+0x11c8>)
 8004038:	e006      	b.n	8004048 <UART_SetConfig+0xfa0>
 800403a:	4b8e      	ldr	r3, [pc, #568]	; (8004274 <UART_SetConfig+0x11cc>)
 800403c:	e004      	b.n	8004048 <UART_SetConfig+0xfa0>
 800403e:	4b8e      	ldr	r3, [pc, #568]	; (8004278 <UART_SetConfig+0x11d0>)
 8004040:	e002      	b.n	8004048 <UART_SetConfig+0xfa0>
 8004042:	4b8e      	ldr	r3, [pc, #568]	; (800427c <UART_SetConfig+0x11d4>)
 8004044:	e000      	b.n	8004048 <UART_SetConfig+0xfa0>
 8004046:	4b83      	ldr	r3, [pc, #524]	; (8004254 <UART_SetConfig+0x11ac>)
 8004048:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800404a:	6852      	ldr	r2, [r2, #4]
 800404c:	0852      	lsrs	r2, r2, #1
 800404e:	189a      	adds	r2, r3, r2
 8004050:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	0019      	movs	r1, r3
 8004056:	0010      	movs	r0, r2
 8004058:	f7fc f854 	bl	8000104 <__udivsi3>
 800405c:	0003      	movs	r3, r0
 800405e:	b29b      	uxth	r3, r3
 8004060:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8004062:	e0c9      	b.n	80041f8 <UART_SetConfig+0x1150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004064:	f7fd fd32 	bl	8001acc <HAL_RCC_GetSysClockFreq>
 8004068:	0003      	movs	r3, r0
 800406a:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800406c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800406e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004070:	2b00      	cmp	r3, #0
 8004072:	d044      	beq.n	80040fe <UART_SetConfig+0x1056>
 8004074:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004078:	2b01      	cmp	r3, #1
 800407a:	d03e      	beq.n	80040fa <UART_SetConfig+0x1052>
 800407c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800407e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004080:	2b02      	cmp	r3, #2
 8004082:	d038      	beq.n	80040f6 <UART_SetConfig+0x104e>
 8004084:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004088:	2b03      	cmp	r3, #3
 800408a:	d032      	beq.n	80040f2 <UART_SetConfig+0x104a>
 800408c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800408e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004090:	2b04      	cmp	r3, #4
 8004092:	d02c      	beq.n	80040ee <UART_SetConfig+0x1046>
 8004094:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004098:	2b05      	cmp	r3, #5
 800409a:	d026      	beq.n	80040ea <UART_SetConfig+0x1042>
 800409c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800409e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a0:	2b06      	cmp	r3, #6
 80040a2:	d020      	beq.n	80040e6 <UART_SetConfig+0x103e>
 80040a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a8:	2b07      	cmp	r3, #7
 80040aa:	d01a      	beq.n	80040e2 <UART_SetConfig+0x103a>
 80040ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b0:	2b08      	cmp	r3, #8
 80040b2:	d014      	beq.n	80040de <UART_SetConfig+0x1036>
 80040b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b8:	2b09      	cmp	r3, #9
 80040ba:	d00e      	beq.n	80040da <UART_SetConfig+0x1032>
 80040bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c0:	2b0a      	cmp	r3, #10
 80040c2:	d008      	beq.n	80040d6 <UART_SetConfig+0x102e>
 80040c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c8:	2b0b      	cmp	r3, #11
 80040ca:	d102      	bne.n	80040d2 <UART_SetConfig+0x102a>
 80040cc:	2380      	movs	r3, #128	; 0x80
 80040ce:	005b      	lsls	r3, r3, #1
 80040d0:	e016      	b.n	8004100 <UART_SetConfig+0x1058>
 80040d2:	2301      	movs	r3, #1
 80040d4:	e014      	b.n	8004100 <UART_SetConfig+0x1058>
 80040d6:	2380      	movs	r3, #128	; 0x80
 80040d8:	e012      	b.n	8004100 <UART_SetConfig+0x1058>
 80040da:	2340      	movs	r3, #64	; 0x40
 80040dc:	e010      	b.n	8004100 <UART_SetConfig+0x1058>
 80040de:	2320      	movs	r3, #32
 80040e0:	e00e      	b.n	8004100 <UART_SetConfig+0x1058>
 80040e2:	2310      	movs	r3, #16
 80040e4:	e00c      	b.n	8004100 <UART_SetConfig+0x1058>
 80040e6:	230c      	movs	r3, #12
 80040e8:	e00a      	b.n	8004100 <UART_SetConfig+0x1058>
 80040ea:	230a      	movs	r3, #10
 80040ec:	e008      	b.n	8004100 <UART_SetConfig+0x1058>
 80040ee:	2308      	movs	r3, #8
 80040f0:	e006      	b.n	8004100 <UART_SetConfig+0x1058>
 80040f2:	2306      	movs	r3, #6
 80040f4:	e004      	b.n	8004100 <UART_SetConfig+0x1058>
 80040f6:	2304      	movs	r3, #4
 80040f8:	e002      	b.n	8004100 <UART_SetConfig+0x1058>
 80040fa:	2302      	movs	r3, #2
 80040fc:	e000      	b.n	8004100 <UART_SetConfig+0x1058>
 80040fe:	2301      	movs	r3, #1
 8004100:	0019      	movs	r1, r3
 8004102:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004104:	f7fb fffe 	bl	8000104 <__udivsi3>
 8004108:	0003      	movs	r3, r0
 800410a:	001a      	movs	r2, r3
 800410c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	085b      	lsrs	r3, r3, #1
 8004112:	18d2      	adds	r2, r2, r3
 8004114:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	0019      	movs	r1, r3
 800411a:	0010      	movs	r0, r2
 800411c:	f7fb fff2 	bl	8000104 <__udivsi3>
 8004120:	0003      	movs	r3, r0
 8004122:	b29b      	uxth	r3, r3
 8004124:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8004126:	e067      	b.n	80041f8 <UART_SetConfig+0x1150>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004128:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800412a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412c:	2b00      	cmp	r3, #0
 800412e:	d04b      	beq.n	80041c8 <UART_SetConfig+0x1120>
 8004130:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004134:	2b01      	cmp	r3, #1
 8004136:	d044      	beq.n	80041c2 <UART_SetConfig+0x111a>
 8004138:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800413a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413c:	2b02      	cmp	r3, #2
 800413e:	d03d      	beq.n	80041bc <UART_SetConfig+0x1114>
 8004140:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004144:	2b03      	cmp	r3, #3
 8004146:	d037      	beq.n	80041b8 <UART_SetConfig+0x1110>
 8004148:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800414a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414c:	2b04      	cmp	r3, #4
 800414e:	d030      	beq.n	80041b2 <UART_SetConfig+0x110a>
 8004150:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	2b05      	cmp	r3, #5
 8004156:	d02a      	beq.n	80041ae <UART_SetConfig+0x1106>
 8004158:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	2b06      	cmp	r3, #6
 800415e:	d024      	beq.n	80041aa <UART_SetConfig+0x1102>
 8004160:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004164:	2b07      	cmp	r3, #7
 8004166:	d01d      	beq.n	80041a4 <UART_SetConfig+0x10fc>
 8004168:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416c:	2b08      	cmp	r3, #8
 800416e:	d016      	beq.n	800419e <UART_SetConfig+0x10f6>
 8004170:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004174:	2b09      	cmp	r3, #9
 8004176:	d00f      	beq.n	8004198 <UART_SetConfig+0x10f0>
 8004178:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800417a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417c:	2b0a      	cmp	r3, #10
 800417e:	d008      	beq.n	8004192 <UART_SetConfig+0x10ea>
 8004180:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004184:	2b0b      	cmp	r3, #11
 8004186:	d101      	bne.n	800418c <UART_SetConfig+0x10e4>
 8004188:	2380      	movs	r3, #128	; 0x80
 800418a:	e01f      	b.n	80041cc <UART_SetConfig+0x1124>
 800418c:	2380      	movs	r3, #128	; 0x80
 800418e:	021b      	lsls	r3, r3, #8
 8004190:	e01c      	b.n	80041cc <UART_SetConfig+0x1124>
 8004192:	2380      	movs	r3, #128	; 0x80
 8004194:	005b      	lsls	r3, r3, #1
 8004196:	e019      	b.n	80041cc <UART_SetConfig+0x1124>
 8004198:	2380      	movs	r3, #128	; 0x80
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	e016      	b.n	80041cc <UART_SetConfig+0x1124>
 800419e:	2380      	movs	r3, #128	; 0x80
 80041a0:	00db      	lsls	r3, r3, #3
 80041a2:	e013      	b.n	80041cc <UART_SetConfig+0x1124>
 80041a4:	2380      	movs	r3, #128	; 0x80
 80041a6:	011b      	lsls	r3, r3, #4
 80041a8:	e010      	b.n	80041cc <UART_SetConfig+0x1124>
 80041aa:	4b35      	ldr	r3, [pc, #212]	; (8004280 <UART_SetConfig+0x11d8>)
 80041ac:	e00e      	b.n	80041cc <UART_SetConfig+0x1124>
 80041ae:	4b35      	ldr	r3, [pc, #212]	; (8004284 <UART_SetConfig+0x11dc>)
 80041b0:	e00c      	b.n	80041cc <UART_SetConfig+0x1124>
 80041b2:	2380      	movs	r3, #128	; 0x80
 80041b4:	015b      	lsls	r3, r3, #5
 80041b6:	e009      	b.n	80041cc <UART_SetConfig+0x1124>
 80041b8:	4b33      	ldr	r3, [pc, #204]	; (8004288 <UART_SetConfig+0x11e0>)
 80041ba:	e007      	b.n	80041cc <UART_SetConfig+0x1124>
 80041bc:	2380      	movs	r3, #128	; 0x80
 80041be:	019b      	lsls	r3, r3, #6
 80041c0:	e004      	b.n	80041cc <UART_SetConfig+0x1124>
 80041c2:	2380      	movs	r3, #128	; 0x80
 80041c4:	01db      	lsls	r3, r3, #7
 80041c6:	e001      	b.n	80041cc <UART_SetConfig+0x1124>
 80041c8:	2380      	movs	r3, #128	; 0x80
 80041ca:	021b      	lsls	r3, r3, #8
 80041cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80041ce:	6852      	ldr	r2, [r2, #4]
 80041d0:	0852      	lsrs	r2, r2, #1
 80041d2:	189a      	adds	r2, r3, r2
 80041d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	0019      	movs	r1, r3
 80041da:	0010      	movs	r0, r2
 80041dc:	f7fb ff92 	bl	8000104 <__udivsi3>
 80041e0:	0003      	movs	r3, r0
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 80041e6:	e007      	b.n	80041f8 <UART_SetConfig+0x1150>
      default:
        ret = HAL_ERROR;
 80041e8:	231b      	movs	r3, #27
 80041ea:	2258      	movs	r2, #88	; 0x58
 80041ec:	4694      	mov	ip, r2
 80041ee:	44bc      	add	ip, r7
 80041f0:	4463      	add	r3, ip
 80041f2:	2201      	movs	r2, #1
 80041f4:	701a      	strb	r2, [r3, #0]
        break;
 80041f6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041fa:	2b0f      	cmp	r3, #15
 80041fc:	d908      	bls.n	8004210 <UART_SetConfig+0x1168>
 80041fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004200:	4a22      	ldr	r2, [pc, #136]	; (800428c <UART_SetConfig+0x11e4>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d804      	bhi.n	8004210 <UART_SetConfig+0x1168>
    {
      huart->Instance->BRR = usartdiv;
 8004206:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800420c:	60da      	str	r2, [r3, #12]
 800420e:	e006      	b.n	800421e <UART_SetConfig+0x1176>
    }
    else
    {
      ret = HAL_ERROR;
 8004210:	231b      	movs	r3, #27
 8004212:	2258      	movs	r2, #88	; 0x58
 8004214:	4694      	mov	ip, r2
 8004216:	44bc      	add	ip, r7
 8004218:	4463      	add	r3, ip
 800421a:	2201      	movs	r2, #1
 800421c:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800421e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004220:	226a      	movs	r2, #106	; 0x6a
 8004222:	2101      	movs	r1, #1
 8004224:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004226:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004228:	2268      	movs	r2, #104	; 0x68
 800422a:	2101      	movs	r1, #1
 800422c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800422e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004230:	2200      	movs	r2, #0
 8004232:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8004234:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004236:	2200      	movs	r2, #0
 8004238:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800423a:	231b      	movs	r3, #27
 800423c:	2258      	movs	r2, #88	; 0x58
 800423e:	4694      	mov	ip, r2
 8004240:	44bc      	add	ip, r7
 8004242:	4463      	add	r3, ip
 8004244:	781b      	ldrb	r3, [r3, #0]
}
 8004246:	0018      	movs	r0, r3
 8004248:	46bd      	mov	sp, r7
 800424a:	b021      	add	sp, #132	; 0x84
 800424c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800424e:	46c0      	nop			; (mov r8, r8)
 8004250:	0000f424 	.word	0x0000f424
 8004254:	00f42400 	.word	0x00f42400
 8004258:	0001e848 	.word	0x0001e848
 800425c:	0003d090 	.word	0x0003d090
 8004260:	0007a120 	.word	0x0007a120
 8004264:	000f4240 	.word	0x000f4240
 8004268:	00145855 	.word	0x00145855
 800426c:	00186a00 	.word	0x00186a00
 8004270:	001e8480 	.word	0x001e8480
 8004274:	0028b0aa 	.word	0x0028b0aa
 8004278:	003d0900 	.word	0x003d0900
 800427c:	007a1200 	.word	0x007a1200
 8004280:	00000aaa 	.word	0x00000aaa
 8004284:	00000ccc 	.word	0x00000ccc
 8004288:	00001555 	.word	0x00001555
 800428c:	0000ffff 	.word	0x0000ffff

08004290 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429c:	2201      	movs	r2, #1
 800429e:	4013      	ands	r3, r2
 80042a0:	d00b      	beq.n	80042ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	4a4a      	ldr	r2, [pc, #296]	; (80043d4 <UART_AdvFeatureConfig+0x144>)
 80042aa:	4013      	ands	r3, r2
 80042ac:	0019      	movs	r1, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	430a      	orrs	r2, r1
 80042b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042be:	2202      	movs	r2, #2
 80042c0:	4013      	ands	r3, r2
 80042c2:	d00b      	beq.n	80042dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	4a43      	ldr	r2, [pc, #268]	; (80043d8 <UART_AdvFeatureConfig+0x148>)
 80042cc:	4013      	ands	r3, r2
 80042ce:	0019      	movs	r1, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	430a      	orrs	r2, r1
 80042da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e0:	2204      	movs	r2, #4
 80042e2:	4013      	ands	r3, r2
 80042e4:	d00b      	beq.n	80042fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	4a3b      	ldr	r2, [pc, #236]	; (80043dc <UART_AdvFeatureConfig+0x14c>)
 80042ee:	4013      	ands	r3, r2
 80042f0:	0019      	movs	r1, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	430a      	orrs	r2, r1
 80042fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004302:	2208      	movs	r2, #8
 8004304:	4013      	ands	r3, r2
 8004306:	d00b      	beq.n	8004320 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	4a34      	ldr	r2, [pc, #208]	; (80043e0 <UART_AdvFeatureConfig+0x150>)
 8004310:	4013      	ands	r3, r2
 8004312:	0019      	movs	r1, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	430a      	orrs	r2, r1
 800431e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004324:	2210      	movs	r2, #16
 8004326:	4013      	ands	r3, r2
 8004328:	d00b      	beq.n	8004342 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	4a2c      	ldr	r2, [pc, #176]	; (80043e4 <UART_AdvFeatureConfig+0x154>)
 8004332:	4013      	ands	r3, r2
 8004334:	0019      	movs	r1, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	430a      	orrs	r2, r1
 8004340:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004346:	2220      	movs	r2, #32
 8004348:	4013      	ands	r3, r2
 800434a:	d00b      	beq.n	8004364 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	4a25      	ldr	r2, [pc, #148]	; (80043e8 <UART_AdvFeatureConfig+0x158>)
 8004354:	4013      	ands	r3, r2
 8004356:	0019      	movs	r1, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	430a      	orrs	r2, r1
 8004362:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004368:	2240      	movs	r2, #64	; 0x40
 800436a:	4013      	ands	r3, r2
 800436c:	d01d      	beq.n	80043aa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	4a1d      	ldr	r2, [pc, #116]	; (80043ec <UART_AdvFeatureConfig+0x15c>)
 8004376:	4013      	ands	r3, r2
 8004378:	0019      	movs	r1, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800438a:	2380      	movs	r3, #128	; 0x80
 800438c:	035b      	lsls	r3, r3, #13
 800438e:	429a      	cmp	r2, r3
 8004390:	d10b      	bne.n	80043aa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	4a15      	ldr	r2, [pc, #84]	; (80043f0 <UART_AdvFeatureConfig+0x160>)
 800439a:	4013      	ands	r3, r2
 800439c:	0019      	movs	r1, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ae:	2280      	movs	r2, #128	; 0x80
 80043b0:	4013      	ands	r3, r2
 80043b2:	d00b      	beq.n	80043cc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	4a0e      	ldr	r2, [pc, #56]	; (80043f4 <UART_AdvFeatureConfig+0x164>)
 80043bc:	4013      	ands	r3, r2
 80043be:	0019      	movs	r1, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	430a      	orrs	r2, r1
 80043ca:	605a      	str	r2, [r3, #4]
  }
}
 80043cc:	46c0      	nop			; (mov r8, r8)
 80043ce:	46bd      	mov	sp, r7
 80043d0:	b002      	add	sp, #8
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	fffdffff 	.word	0xfffdffff
 80043d8:	fffeffff 	.word	0xfffeffff
 80043dc:	fffbffff 	.word	0xfffbffff
 80043e0:	ffff7fff 	.word	0xffff7fff
 80043e4:	ffffefff 	.word	0xffffefff
 80043e8:	ffffdfff 	.word	0xffffdfff
 80043ec:	ffefffff 	.word	0xffefffff
 80043f0:	ff9fffff 	.word	0xff9fffff
 80043f4:	fff7ffff 	.word	0xfff7ffff

080043f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b086      	sub	sp, #24
 80043fc:	af02      	add	r7, sp, #8
 80043fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2288      	movs	r2, #136	; 0x88
 8004404:	2100      	movs	r1, #0
 8004406:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004408:	f7fc fc60 	bl	8000ccc <HAL_GetTick>
 800440c:	0003      	movs	r3, r0
 800440e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2208      	movs	r2, #8
 8004418:	4013      	ands	r3, r2
 800441a:	2b08      	cmp	r3, #8
 800441c:	d10d      	bne.n	800443a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	2380      	movs	r3, #128	; 0x80
 8004422:	0399      	lsls	r1, r3, #14
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	4b18      	ldr	r3, [pc, #96]	; (8004488 <UART_CheckIdleState+0x90>)
 8004428:	9300      	str	r3, [sp, #0]
 800442a:	0013      	movs	r3, r2
 800442c:	2200      	movs	r2, #0
 800442e:	f000 f82d 	bl	800448c <UART_WaitOnFlagUntilTimeout>
 8004432:	1e03      	subs	r3, r0, #0
 8004434:	d001      	beq.n	800443a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e021      	b.n	800447e <UART_CheckIdleState+0x86>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2204      	movs	r2, #4
 8004442:	4013      	ands	r3, r2
 8004444:	2b04      	cmp	r3, #4
 8004446:	d10d      	bne.n	8004464 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	2380      	movs	r3, #128	; 0x80
 800444c:	03d9      	lsls	r1, r3, #15
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	4b0d      	ldr	r3, [pc, #52]	; (8004488 <UART_CheckIdleState+0x90>)
 8004452:	9300      	str	r3, [sp, #0]
 8004454:	0013      	movs	r3, r2
 8004456:	2200      	movs	r2, #0
 8004458:	f000 f818 	bl	800448c <UART_WaitOnFlagUntilTimeout>
 800445c:	1e03      	subs	r3, r0, #0
 800445e:	d001      	beq.n	8004464 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e00c      	b.n	800447e <UART_CheckIdleState+0x86>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2280      	movs	r2, #128	; 0x80
 8004468:	2120      	movs	r1, #32
 800446a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2284      	movs	r2, #132	; 0x84
 8004470:	2120      	movs	r1, #32
 8004472:	5099      	str	r1, [r3, r2]

  __HAL_UNLOCK(huart);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	227c      	movs	r2, #124	; 0x7c
 8004478:	2100      	movs	r1, #0
 800447a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	0018      	movs	r0, r3
 8004480:	46bd      	mov	sp, r7
 8004482:	b004      	add	sp, #16
 8004484:	bd80      	pop	{r7, pc}
 8004486:	46c0      	nop			; (mov r8, r8)
 8004488:	01ffffff 	.word	0x01ffffff

0800448c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	603b      	str	r3, [r7, #0]
 8004498:	1dfb      	adds	r3, r7, #7
 800449a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800449c:	e02b      	b.n	80044f6 <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	3301      	adds	r3, #1
 80044a2:	d028      	beq.n	80044f6 <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044a4:	f7fc fc12 	bl	8000ccc <HAL_GetTick>
 80044a8:	0002      	movs	r2, r0
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	69ba      	ldr	r2, [r7, #24]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d302      	bcc.n	80044ba <UART_WaitOnFlagUntilTimeout+0x2e>
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d11d      	bne.n	80044f6 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4916      	ldr	r1, [pc, #88]	; (8004520 <UART_WaitOnFlagUntilTimeout+0x94>)
 80044c6:	400a      	ands	r2, r1
 80044c8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	689a      	ldr	r2, [r3, #8]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2101      	movs	r1, #1
 80044d6:	438a      	bics	r2, r1
 80044d8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2280      	movs	r2, #128	; 0x80
 80044de:	2120      	movs	r1, #32
 80044e0:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2284      	movs	r2, #132	; 0x84
 80044e6:	2120      	movs	r1, #32
 80044e8:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	227c      	movs	r2, #124	; 0x7c
 80044ee:	2100      	movs	r1, #0
 80044f0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e00f      	b.n	8004516 <UART_WaitOnFlagUntilTimeout+0x8a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	69db      	ldr	r3, [r3, #28]
 80044fc:	68ba      	ldr	r2, [r7, #8]
 80044fe:	4013      	ands	r3, r2
 8004500:	68ba      	ldr	r2, [r7, #8]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	425a      	negs	r2, r3
 8004506:	4153      	adcs	r3, r2
 8004508:	b2db      	uxtb	r3, r3
 800450a:	001a      	movs	r2, r3
 800450c:	1dfb      	adds	r3, r7, #7
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	429a      	cmp	r2, r3
 8004512:	d0c4      	beq.n	800449e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	0018      	movs	r0, r3
 8004518:	46bd      	mov	sp, r7
 800451a:	b004      	add	sp, #16
 800451c:	bd80      	pop	{r7, pc}
 800451e:	46c0      	nop			; (mov r8, r8)
 8004520:	fffffe5f 	.word	0xfffffe5f

08004524 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	227c      	movs	r2, #124	; 0x7c
 8004530:	5c9b      	ldrb	r3, [r3, r2]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d101      	bne.n	800453a <HAL_UARTEx_DisableFifoMode+0x16>
 8004536:	2302      	movs	r3, #2
 8004538:	e027      	b.n	800458a <HAL_UARTEx_DisableFifoMode+0x66>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	227c      	movs	r2, #124	; 0x7c
 800453e:	2101      	movs	r1, #1
 8004540:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2280      	movs	r2, #128	; 0x80
 8004546:	2124      	movs	r1, #36	; 0x24
 8004548:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2101      	movs	r1, #1
 800455e:	438a      	bics	r2, r1
 8004560:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	4a0b      	ldr	r2, [pc, #44]	; (8004594 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004566:	4013      	ands	r3, r2
 8004568:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2280      	movs	r2, #128	; 0x80
 800457c:	2120      	movs	r1, #32
 800457e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	227c      	movs	r2, #124	; 0x7c
 8004584:	2100      	movs	r1, #0
 8004586:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	0018      	movs	r0, r3
 800458c:	46bd      	mov	sp, r7
 800458e:	b004      	add	sp, #16
 8004590:	bd80      	pop	{r7, pc}
 8004592:	46c0      	nop			; (mov r8, r8)
 8004594:	dfffffff 	.word	0xdfffffff

08004598 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	227c      	movs	r2, #124	; 0x7c
 80045a6:	5c9b      	ldrb	r3, [r3, r2]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d101      	bne.n	80045b0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80045ac:	2302      	movs	r3, #2
 80045ae:	e02e      	b.n	800460e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	227c      	movs	r2, #124	; 0x7c
 80045b4:	2101      	movs	r1, #1
 80045b6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2280      	movs	r2, #128	; 0x80
 80045bc:	2124      	movs	r1, #36	; 0x24
 80045be:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2101      	movs	r1, #1
 80045d4:	438a      	bics	r2, r1
 80045d6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	00db      	lsls	r3, r3, #3
 80045e0:	08d9      	lsrs	r1, r3, #3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	683a      	ldr	r2, [r7, #0]
 80045e8:	430a      	orrs	r2, r1
 80045ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	0018      	movs	r0, r3
 80045f0:	f000 f854 	bl	800469c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2280      	movs	r2, #128	; 0x80
 8004600:	2120      	movs	r1, #32
 8004602:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	227c      	movs	r2, #124	; 0x7c
 8004608:	2100      	movs	r1, #0
 800460a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	0018      	movs	r0, r3
 8004610:	46bd      	mov	sp, r7
 8004612:	b004      	add	sp, #16
 8004614:	bd80      	pop	{r7, pc}
	...

08004618 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	227c      	movs	r2, #124	; 0x7c
 8004626:	5c9b      	ldrb	r3, [r3, r2]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d101      	bne.n	8004630 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800462c:	2302      	movs	r3, #2
 800462e:	e02f      	b.n	8004690 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	227c      	movs	r2, #124	; 0x7c
 8004634:	2101      	movs	r1, #1
 8004636:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2280      	movs	r2, #128	; 0x80
 800463c:	2124      	movs	r1, #36	; 0x24
 800463e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2101      	movs	r1, #1
 8004654:	438a      	bics	r2, r1
 8004656:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	4a0e      	ldr	r2, [pc, #56]	; (8004698 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004660:	4013      	ands	r3, r2
 8004662:	0019      	movs	r1, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	683a      	ldr	r2, [r7, #0]
 800466a:	430a      	orrs	r2, r1
 800466c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	0018      	movs	r0, r3
 8004672:	f000 f813 	bl	800469c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2280      	movs	r2, #128	; 0x80
 8004682:	2120      	movs	r1, #32
 8004684:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	227c      	movs	r2, #124	; 0x7c
 800468a:	2100      	movs	r1, #0
 800468c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	0018      	movs	r0, r3
 8004692:	46bd      	mov	sp, r7
 8004694:	b004      	add	sp, #16
 8004696:	bd80      	pop	{r7, pc}
 8004698:	f1ffffff 	.word	0xf1ffffff

0800469c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800469c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800469e:	b089      	sub	sp, #36	; 0x24
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80046a4:	2314      	movs	r3, #20
 80046a6:	18fb      	adds	r3, r7, r3
 80046a8:	4a2f      	ldr	r2, [pc, #188]	; (8004768 <UARTEx_SetNbDataToProcess+0xcc>)
 80046aa:	ca03      	ldmia	r2!, {r0, r1}
 80046ac:	c303      	stmia	r3!, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80046ae:	230c      	movs	r3, #12
 80046b0:	18fb      	adds	r3, r7, r3
 80046b2:	4a2e      	ldr	r2, [pc, #184]	; (800476c <UARTEx_SetNbDataToProcess+0xd0>)
 80046b4:	ca03      	ldmia	r2!, {r0, r1}
 80046b6:	c303      	stmia	r3!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d108      	bne.n	80046d2 <UARTEx_SetNbDataToProcess+0x36>
  {
    huart->NbTxDataToProcess = 1U;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	226a      	movs	r2, #106	; 0x6a
 80046c4:	2101      	movs	r1, #1
 80046c6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2268      	movs	r2, #104	; 0x68
 80046cc:	2101      	movs	r1, #1
 80046ce:	5299      	strh	r1, [r3, r2]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80046d0:	e046      	b.n	8004760 <UARTEx_SetNbDataToProcess+0xc4>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80046d2:	261f      	movs	r6, #31
 80046d4:	19bb      	adds	r3, r7, r6
 80046d6:	2208      	movs	r2, #8
 80046d8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80046da:	201e      	movs	r0, #30
 80046dc:	183b      	adds	r3, r7, r0
 80046de:	2208      	movs	r2, #8
 80046e0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	0e5b      	lsrs	r3, r3, #25
 80046ea:	b2da      	uxtb	r2, r3
 80046ec:	241d      	movs	r4, #29
 80046ee:	193b      	adds	r3, r7, r4
 80046f0:	2107      	movs	r1, #7
 80046f2:	400a      	ands	r2, r1
 80046f4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	0f5b      	lsrs	r3, r3, #29
 80046fe:	b2da      	uxtb	r2, r3
 8004700:	251c      	movs	r5, #28
 8004702:	197b      	adds	r3, r7, r5
 8004704:	2107      	movs	r1, #7
 8004706:	400a      	ands	r2, r1
 8004708:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800470a:	183b      	adds	r3, r7, r0
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	197a      	adds	r2, r7, r5
 8004710:	7812      	ldrb	r2, [r2, #0]
 8004712:	2114      	movs	r1, #20
 8004714:	1879      	adds	r1, r7, r1
 8004716:	5c8a      	ldrb	r2, [r1, r2]
 8004718:	435a      	muls	r2, r3
 800471a:	0010      	movs	r0, r2
 800471c:	197b      	adds	r3, r7, r5
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	250c      	movs	r5, #12
 8004722:	197a      	adds	r2, r7, r5
 8004724:	5cd3      	ldrb	r3, [r2, r3]
 8004726:	0019      	movs	r1, r3
 8004728:	f7fb fd76 	bl	8000218 <__divsi3>
 800472c:	0003      	movs	r3, r0
 800472e:	b299      	uxth	r1, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	226a      	movs	r2, #106	; 0x6a
 8004734:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004736:	19bb      	adds	r3, r7, r6
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	193a      	adds	r2, r7, r4
 800473c:	7812      	ldrb	r2, [r2, #0]
 800473e:	2114      	movs	r1, #20
 8004740:	1879      	adds	r1, r7, r1
 8004742:	5c8a      	ldrb	r2, [r1, r2]
 8004744:	435a      	muls	r2, r3
 8004746:	0010      	movs	r0, r2
 8004748:	193b      	adds	r3, r7, r4
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	197a      	adds	r2, r7, r5
 800474e:	5cd3      	ldrb	r3, [r2, r3]
 8004750:	0019      	movs	r1, r3
 8004752:	f7fb fd61 	bl	8000218 <__divsi3>
 8004756:	0003      	movs	r3, r0
 8004758:	b299      	uxth	r1, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2268      	movs	r2, #104	; 0x68
 800475e:	5299      	strh	r1, [r3, r2]
}
 8004760:	46c0      	nop			; (mov r8, r8)
 8004762:	46bd      	mov	sp, r7
 8004764:	b009      	add	sp, #36	; 0x24
 8004766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004768:	080047e0 	.word	0x080047e0
 800476c:	080047e8 	.word	0x080047e8

08004770 <__libc_init_array>:
 8004770:	b570      	push	{r4, r5, r6, lr}
 8004772:	2600      	movs	r6, #0
 8004774:	4d0c      	ldr	r5, [pc, #48]	; (80047a8 <__libc_init_array+0x38>)
 8004776:	4c0d      	ldr	r4, [pc, #52]	; (80047ac <__libc_init_array+0x3c>)
 8004778:	1b64      	subs	r4, r4, r5
 800477a:	10a4      	asrs	r4, r4, #2
 800477c:	42a6      	cmp	r6, r4
 800477e:	d109      	bne.n	8004794 <__libc_init_array+0x24>
 8004780:	2600      	movs	r6, #0
 8004782:	f000 f821 	bl	80047c8 <_init>
 8004786:	4d0a      	ldr	r5, [pc, #40]	; (80047b0 <__libc_init_array+0x40>)
 8004788:	4c0a      	ldr	r4, [pc, #40]	; (80047b4 <__libc_init_array+0x44>)
 800478a:	1b64      	subs	r4, r4, r5
 800478c:	10a4      	asrs	r4, r4, #2
 800478e:	42a6      	cmp	r6, r4
 8004790:	d105      	bne.n	800479e <__libc_init_array+0x2e>
 8004792:	bd70      	pop	{r4, r5, r6, pc}
 8004794:	00b3      	lsls	r3, r6, #2
 8004796:	58eb      	ldr	r3, [r5, r3]
 8004798:	4798      	blx	r3
 800479a:	3601      	adds	r6, #1
 800479c:	e7ee      	b.n	800477c <__libc_init_array+0xc>
 800479e:	00b3      	lsls	r3, r6, #2
 80047a0:	58eb      	ldr	r3, [r5, r3]
 80047a2:	4798      	blx	r3
 80047a4:	3601      	adds	r6, #1
 80047a6:	e7f2      	b.n	800478e <__libc_init_array+0x1e>
 80047a8:	080048ac 	.word	0x080048ac
 80047ac:	080048ac 	.word	0x080048ac
 80047b0:	080048ac 	.word	0x080048ac
 80047b4:	080048b0 	.word	0x080048b0

080047b8 <memset>:
 80047b8:	0003      	movs	r3, r0
 80047ba:	1812      	adds	r2, r2, r0
 80047bc:	4293      	cmp	r3, r2
 80047be:	d100      	bne.n	80047c2 <memset+0xa>
 80047c0:	4770      	bx	lr
 80047c2:	7019      	strb	r1, [r3, #0]
 80047c4:	3301      	adds	r3, #1
 80047c6:	e7f9      	b.n	80047bc <memset+0x4>

080047c8 <_init>:
 80047c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ca:	46c0      	nop			; (mov r8, r8)
 80047cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ce:	bc08      	pop	{r3}
 80047d0:	469e      	mov	lr, r3
 80047d2:	4770      	bx	lr

080047d4 <_fini>:
 80047d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047d6:	46c0      	nop			; (mov r8, r8)
 80047d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047da:	bc08      	pop	{r3}
 80047dc:	469e      	mov	lr, r3
 80047de:	4770      	bx	lr
